{
  "version": 3,
  "sources": ["../../lib/index.ts", "../../src/api/index.ts", "../../src/CognitoStack.ts", "../../src/CognitoAuthRole.ts", "../../src/DynamoDBStack.ts", "../../src/S3Stack.ts"],
  "sourcesContent": ["import { App } from '@aws-cdk/core';\nimport { APIStack } from '../src/api';\nimport CognitoStack from \"../src/CognitoStack\"\nimport DynamoDBStack from \"../src/DynamoDBStack\"\nimport S3Stack from '../src/S3Stack';\n//import * as sst from \"@serverless-stack/resources\";\n//import * as cdk from \"@aws-cdk/core\";\n\nconst devEnv = {\n  account: '293400667467',\n  region: 'eu-west-1'\n};\n\nconst app = new App();\nconst props = {} // env: devEnv }\n\napp.synth();\n\nexport default function main(app) {\nconst database = new DynamoDBStack(app, 'DevDSSPDynamodbStack', props);\n\nconst s3 = new S3Stack(app, 'DevDSSPS3Stack', props)\n\n new CognitoStack(app, 'DevDSSPCognito', { bucketArn: s3.bucket.bucketArn });\n\n APIStack(app, { table: database.table });\n\n}\n\n", "import * as appsync from '@aws-cdk/aws-appsync'\nimport * as _ from 'lodash'\nimport * as sst from \"@serverless-stack/resources\";\nimport * as cdk from \"@aws-cdk/core\";\nimport * as dynamo from '@aws-cdk/aws-dynamodb'\n\n\nconst StatusListLambda = (scope: sst.Stack, envVars: { [key: string]: string}) =>\nnew sst.Function(scope, 'StatusListLanbda', {\n  handler: \"src/api/status/statusList.handler\",\n  environment: envVars,\n})\n\nconst StatusByIdLambda = (scope: sst.Stack, envVars: { [key: string]: string }) =>\n  new  sst.Function(scope, 'StatusByIdLambda', {\n    handler: \"src/api/status/statusById.handler\",\n    environment: envVars,\n  })\n\nconst StatusUpdateLambda = (scope: sst.Stack, envVars: { [key: string]: string }) =>\n  new sst.Function(scope, 'StatusUpdateLambda', {\n    handler: \"src/api/status/statusUpdate.handler\",\n    environment: envVars,\n  })\n\nconst StatusCreateLambda = (scope: sst.Stack, envVars: { [key: string]: string }) =>\n  new sst.Function(scope, 'StatusCreateLambda', {\n    handler: \"src/api/status/statusCreate.handler\",\n    environment: envVars,\n  })\n\nconst StatusDeleteLambda = (scope: sst.Stack, envVars: { [key: string]: string }) =>\n  new sst.Function(scope, 'StatusDeleteLambda', {\n    handler: \"src/api/status/statusDelete.handler\",\n    environment: envVars,\n  })\n\n\n\nexport const ResourceName = (logicalId: string, scope?: sst.Stack) => {  \n  let prefix = ''\n  if (scope) {\n    const stack = sst.Stack.of(scope)\n    prefix = `${stack.stackName}`\n  }\n\n  return `${prefix}-${logicalId}`\n}\n\nconst GraphQLAPI = (scope: sst.Stack) => {\n  const api = new appsync.GraphqlApi(scope, 'GraphQLAPI', {\n    // name: 'Kork-PublicAPI',\n    name: ResourceName('GraphQLAPI', scope),\n    schema: appsync.Schema.fromAsset(\"graphql/schema.gql\"),\n    xrayEnabled: true,\n    logConfig: {\n      excludeVerboseContent: false,\n      fieldLogLevel: appsync.FieldLogLevel.ALL,\n    }\n  })\n  return api\n}\n\n// ? auto-generate name?\nconst useLambdaDataSource = (graphqlApi: appsync.GraphqlApi, lambdaFunction: sst.Function, fieldName: string, type: 'Query' | 'Mutation' = 'Query') => {\n  graphqlApi.addLambdaDataSource(\n    `${_.upperFirst(fieldName)}DataSource`,\n    lambdaFunction,\n  ).createResolver({\n    typeName: type,\n    fieldName,\n  })\n  return lambdaFunction\n}\n\nconst useVTLDataSource = (\n  graphqlApi: appsync.GraphqlApi,\n  fieldName: string,\n  requestMappingTemplate: string,\n  responseMappingTemplate: string,\n  typeName: 'Query' | 'Mutation' = 'Query'\n) =>\n  graphqlApi.addNoneDataSource(_.upperFirst(`${fieldName}DataSource`)).createResolver({\n    typeName,\n    fieldName,\n    requestMappingTemplate: appsync.MappingTemplate.fromString(requestMappingTemplate),\n    responseMappingTemplate: appsync.MappingTemplate.fromString(responseMappingTemplate),\n  })\n\n  export interface APIStackProps extends sst.StackProps {\n    table: dynamo.Table\n  }\n\nexport const APIStack = (scope: sst.App, props: APIStackProps) => {\n  const stack = new sst.Stack(scope, 'DevDSSPAPI', props)\n\n  const graphqlApi = GraphQLAPI(stack)\n\n  // EventByIdLambda(stack)\n  // EventUpdateLambda(stack)\n  // CommentSendLambda(stack)\n\n  const envVars = {\n    DYNAMODB_TABLE: props.table.tableName\n  }\n\n  props.table.grantReadData(\n  useLambdaDataSource(graphqlApi, StatusListLambda(stack, envVars), 'statusList'))\n  props.table.grantReadData(\n  useLambdaDataSource(graphqlApi, StatusByIdLambda(stack, envVars), 'statusById'))\n  props.table.grantReadWriteData(\n  useLambdaDataSource(graphqlApi, StatusUpdateLambda(stack, envVars), 'statusUpdate', 'Mutation'))\n  props.table.grantReadWriteData(\n  useLambdaDataSource(graphqlApi, StatusCreateLambda(stack, envVars), 'statusCreate', 'Mutation'))\n  props.table.grantReadWriteData(\n  useLambdaDataSource(graphqlApi, StatusDeleteLambda(stack, envVars), 'statusDelete', 'Mutation'))\n\n  useVTLDataSource(\n    graphqlApi,\n    'version',\n    `\n      {\n        \"version\": \"2018-05-29\",\n        \"payload\": $util.toJson($context.arguments)\n      }\n    `,\n    `\n      #set($version = \"1.0.0\")\n      #return($version)\n    `\n  )\n\n  new cdk.CfnOutput(stack, 'GraphQLID', {\n    value: graphqlApi.apiId\n  })\n  new cdk.CfnOutput(stack, 'GraphQLAPIURL', {\n    value: graphqlApi.graphqlUrl\n  })\n  new cdk.CfnOutput(stack, 'GraphQLRealTimeURL', {\n    value: graphqlApi.graphqlUrl.replace('api', 'realtime-api')\n  })\n  new cdk.CfnOutput(stack, 'GraphQLAPIKey', {\n    value: graphqlApi.apiKey!\n  })\n}", "import * as sst from \"@serverless-stack/resources\";\nimport { CfnOutput } from '@aws-cdk/core';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport CognitoAuthRole from './CognitoAuthRole';\nimport * as cdk from \"@aws-cdk/core\";\n\ninterface CognitoStackProps extends sst.StackProps {\n  bucketArn: string\n}\n\nexport default class CognitoStack extends sst.Stack {\n  constructor(scope: sst.App, id: string, props: CognitoStackProps) {\n    super(scope, id, props);\n\n    const { bucketArn } = props;\n\n    //const app = this.node.root;\n\n    const userPool = new cognito.UserPool(this, 'UserPool', {\n      selfSignUpEnabled: true, // Allow users to sign up\n      autoVerify: { email: true }, // Verify email addresses by sending a verification code\n      signInAliases: { email: true }, // Set email as an alias\n    });\n\n    const userPoolClient = new cognito.UserPoolClient(this, 'UserPoolClient', {\n      userPool,\n      generateSecret: false, // Don't need to generate secret for web app running on browsers\n    });\n\n    const identityPool = new cognito.CfnIdentityPool(this as any as cdk.Construct, 'IdentityPool', {\n      allowUnauthenticatedIdentities: false, // Don't allow unathenticated users\n      cognitoIdentityProviders: [\n        {\n          clientId: userPoolClient.userPoolClientId,\n          providerName: userPool.userPoolProviderName,\n        },\n      ],\n    });\n\n    const authenticatedRole = new CognitoAuthRole(this, 'CognitoAuthRole', {\n      identityPool,\n    });\n\n    authenticatedRole.role.addToPolicy(\n      // IAM policy granting users permission to a specific folder in the S3 bucket\n      new iam.PolicyStatement({\n        actions: ['s3:*'],\n        effect: iam.Effect.ALLOW,\n        resources: [\n          bucketArn + '/private/${cognito-identity.amazonaws.com:sub}/*',\n        ],\n      })\n    );\n\n    // Export values\n    new CfnOutput(this, 'UserPoolId', {\n      value: userPool.userPoolId,\n    });\n    new CfnOutput(this, 'UserPoolClientId', {\n      value: userPoolClient.userPoolClientId,\n    });\n    new CfnOutput(this, 'IdentityPoolId', {\n      value: identityPool.ref,\n    });\n    new CfnOutput(this, 'AuthenticatedRoleName', {\n      value: authenticatedRole.role.roleName,\n      // exportName: app.logicalPrefixedName('CognitoAuthRole'),\n    });\n  }\n}", "import * as sst from \"@serverless-stack/resources\";\nimport * as cdk from '@aws-cdk/core'\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cognito from '@aws-cdk/aws-cognito';\n\nexport default class CognitoAuthRole extends cdk.Construct {\n  // Public reference to the IAM role\n  role;\n\n  constructor(scope: sst.Stack, id: string, props: { identityPool: any; }) {\n    super(scope, id);\n\n    const { identityPool } = props;\n\n    // IAM role used for authenticated users\n    this.role = new iam.Role(this, 'CognitoDefaultAuthenticatedRole', {\n      assumedBy: new iam.FederatedPrincipal(\n        'cognito-identity.amazonaws.com',\n        {\n          StringEquals: {\n            'cognito-identity.amazonaws.com:aud': identityPool.ref,\n          },\n          'ForAnyValue:StringLike': {\n            'cognito-identity.amazonaws.com:amr': 'authenticated',\n          },\n        },\n        'sts:AssumeRoleWithWebIdentity',\n      ),\n    });\n    this.role.addToPolicy(\n      new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: [\n          'mobileanalytics:PutEvents',\n          'cognito-sync:*',\n          'cognito-identity:*',\n        ],\n        resources: ['*'],\n      })\n    );\n\n    new cognito.CfnIdentityPoolRoleAttachment(\n      this,\n      'IdentityPoolRoleAttachment',\n      {\n        identityPoolId: identityPool.ref,\n        roles: { authenticated: this.role.roleArn },\n      }\n    );\n  }\n}", "import * as sst from \"@serverless-stack/resources\";\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport { CfnOutput } from '@aws-cdk/core';\nimport { AttributeType } from '@aws-cdk/aws-dynamodb'\n\nexport default class DynamoDBStack extends sst.Stack {\n  public table: dynamodb.Table\n\n  constructor(scope: sst.App, id: string, props?: sst.StackProps) {\n    super(scope, id, props);\n\n    //const app = this.node.root;\n\n    this.table = new dynamodb.Table(this, 'Table', {\n      sortKey: { name: 'SK', type: dynamodb.AttributeType.STRING },\n      partitionKey: { name: 'PK', type: dynamodb.AttributeType.STRING },\n    });\n\n    const index = 1;\n\n    this.table.addGlobalSecondaryIndex({\n      indexName: `GSI${index}`,\n      partitionKey: { \n        name: `GSI${index}PK`,\n        type: AttributeType.STRING,\n      },\n      sortKey: {\n        name: `GSI${index}SK`,\n        type: AttributeType.STRING,\n    }\n  });\n\n    // Output values\n    new CfnOutput(this, 'TableName', {\n      value: this.table.tableName,\n      // exportName: // app.logicalPrefixedName('TableName'),\n    });\n    new CfnOutput(this, 'TableArn', {\n      value: this.table.tableArn,\n      // exportName: app.logicalPrefixedName('TableArn'),\n    });\n  }\n}", "import * as cdk from '@aws-cdk/core';\nimport * as sst from \"@serverless-stack/resources\";\nimport * as s3 from '@aws-cdk/aws-s3';\n\nexport default class S3Stack extends sst.Stack {\n  // Public reference to the S3 bucket\n  bucket;\n\n  constructor(scope: sst.App, id: string, props?: sst.StackProps) {\n    super(scope, id, props);\n\n    this.bucket = new s3.Bucket(this, 'Uploads', {\n      // Allow client side access to the bucket from a different domain\n      cors: [\n        {\n          maxAge: 3000,\n          allowedOrigins: ['*'],\n          allowedHeaders: ['*'],\n          allowedMethods: [ s3.HttpMethods.GET, s3.HttpMethods.PUT, s3.HttpMethods.POST, s3.HttpMethods.DELETE, s3.HttpMethods.HEAD],\n        },\n      ],\n    });\n\n    // Export values\n    new cdk.CfnOutput(this, 'AttachmentsBucketName', {\n      value: this.bucket.bucketName,\n    });\n  }\n}"],
  "mappings": "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",
  "names": []
}
