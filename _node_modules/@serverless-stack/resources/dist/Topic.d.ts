import * as cdk from "@aws-cdk/core";
import * as sns from "@aws-cdk/aws-sns";
import * as snsSubscriptions from "@aws-cdk/aws-sns-subscriptions";
import { Function as Fn, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export interface TopicProps {
    readonly snsTopic?: sns.ITopic | sns.TopicProps;
    readonly subscribers?: (FunctionDefinition | TopicSubscriberProps)[];
}
export interface TopicSubscriberProps {
    readonly function: FunctionDefinition;
    readonly subscriberProps?: snsSubscriptions.LambdaSubscriptionProps;
}
export declare class Topic extends cdk.Construct {
    readonly snsTopic: sns.Topic;
    readonly subscriberFunctions: Fn[];
    private readonly permissionsAttachedForAllSubscribers;
    constructor(scope: cdk.Construct, id: string, props?: TopicProps);
    addSubscriber(scope: cdk.Construct, subscriber: FunctionDefinition | TopicSubscriberProps): Fn;
    addSubscribers(scope: cdk.Construct, subscribers: (FunctionDefinition | TopicSubscriberProps)[]): void;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToSubscriber(index: number, permissions: Permissions): void;
}
