"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachPermissionsToRole = exports.PermissionType = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const iam = __importStar(require("@aws-cdk/aws-iam"));
const core_1 = require("@serverless-stack/core");
const Api_1 = require("../Api");
const Table_1 = require("../Table");
const Topic_1 = require("../Topic");
const Queue_1 = require("../Queue");
const Stack_1 = require("../Stack");
const construct_1 = require("./construct");
const logger = core_1.getChildLogger("resources");
var PermissionType;
(function (PermissionType) {
    PermissionType["ALL"] = "*";
})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));
function attachPermissionsToRole(role, permissions) {
    // Four patterns
    //
    // attachPermissions(PermissionType.ALL);
    // attachPermissions([ 'sns', 'sqs' ]);
    // attachPermissions([ event, queue ]);
    // attachPermissions([
    //   [ event.snsTopic, 'grantPublish' ],
    //   [ queue.sqsQueue, 'grantSendMessages' ],
    // ]);
    // attachPermissions([
    //   new iam.PolicyStatement({
    //     actions: ["s3:*"],
    //     effect: iam.Effect.ALLOW,
    //     resources: [
    //       bucket.bucketArn + "/private/${cognito-identity.amazonaws.com:sub}/*",
    //     ],
    //   })
    // ]);
    ////////////////////////////////////
    // Case: 'admin' permissions => '*'
    ////////////////////////////////////
    if (typeof permissions === "string") {
        if (permissions === PermissionType.ALL) {
            role.addToPolicy(buildPolicy(permissions, ["*"]));
        }
        else {
            throw new Error(`The specified permissions are not supported.`);
        }
        return;
    }
    if (!Array.isArray(permissions)) {
        throw new Error(`The specified permissions are not supported. They are expected to be PermissionType.ALL or an array.`);
    }
    // Handle array of permissions
    permissions.forEach((permission) => {
        // Case: 's3' permissions => 's3:*'
        if (typeof permission === "string") {
            role.addToPolicy(buildPolicy(`${permission}:*`, ["*"]));
            return;
        }
        ////////////////////////////////////
        // Case: iam.PolicyStatement
        ////////////////////////////////////
        if (construct_1.isConstructOf(permission, "aws-iam.PolicyStatement")) {
            role.addToPolicy(permission);
        }
        ////////////////////////////////////
        // Case: CDK constructs
        ////////////////////////////////////
        else if (construct_1.isConstructOf(permission, "aws-dynamodb.Table")) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            const tableArn = permission.tableArn;
            role.addToPolicy(buildPolicy("dynamodb:*", [tableArn, `${tableArn}/*`]));
        }
        else if (construct_1.isConstructOf(permission, "aws-sns.Topic")) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            role.addToPolicy(buildPolicy("sns:*", [permission.topicArn]));
        }
        else if (construct_1.isConstructOf(permission, "aws-sqs.Queue")) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            role.addToPolicy(buildPolicy("sqs:*", [permission.queueArn]));
        }
        else if (construct_1.isConstructOf(permission, "aws-s3.Bucket")) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            const bucketArn = permission.bucketArn;
            role.addToPolicy(buildPolicy("s3:*", [bucketArn, `${bucketArn}/*`]));
        }
        ////////////////////////////////////
        // Case: SST construct => 's3:*'
        ////////////////////////////////////
        else if (permission instanceof Api_1.Api) {
            const httpApi = permission.httpApi;
            const { account, region } = Stack_1.Stack.of(httpApi);
            role.addToPolicy(buildPolicy("execute-api:Invoke", [
                `arn:aws:execute-api:${region}:${account}:${httpApi.httpApiId}/*`,
            ]));
        }
        else if (permission instanceof Table_1.Table) {
            const tableArn = permission.dynamodbTable.tableArn;
            role.addToPolicy(buildPolicy("dynamodb:*", [tableArn, `${tableArn}/*`]));
        }
        else if (permission instanceof Topic_1.Topic) {
            role.addToPolicy(buildPolicy("sns:*", [permission.snsTopic.topicArn]));
        }
        else if (permission instanceof Queue_1.Queue) {
            role.addToPolicy(buildPolicy("sqs:*", [permission.sqsQueue.queueArn]));
        }
        ////////////////////////////////////
        // Case: grant method
        ////////////////////////////////////
        else if (Array.isArray(permission) &&
            permission.length === 2 &&
            cdk.Construct.isConstruct(permission[0]) &&
            typeof permission[1] === "string") {
            const construct = permission[0];
            const methodName = permission[1];
            construct[methodName](role);
        }
        else {
            logger.debug("permission object", permission);
            throw new Error(`The specified permissions are not supported.`);
        }
    });
}
exports.attachPermissionsToRole = attachPermissionsToRole;
function buildPolicy(action, resources) {
    return new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [action],
        resources,
    });
}
//# sourceMappingURL=data:application/json;base64,