"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachPermissions = void 0;
function attachPermissions(source, permissions) {
    // Four patterns
    //
    // attachPermissions('*');
    // attachPermissions([ 'sns', 'sqs' ]);
    // attachPermissions([ event, queue ]);
    // attachPermissions([
    //   [ event.snsTopic, 'grantPublish' ],
    //   [ queue.sqsQueue, 'grantSendMessages' ],
    // ]);
    // Case: 'admin' permissions => '*'
    if (typeof permissions === "string") {
        if (permissions === "*") {
            addToRolePolicyByActionAndResource(permissions, "*");
        }
        else {
            throw new Error(`The specified permissions is not a supported.`);
        }
    }
    else {
        permissions.forEach((permission) => {
            var _a, _b;
            // Case: 's3' permissions => 's3:*'
            if (typeof permission === "string") {
                addToRolePolicyByActionAndResource(`${permission}:*`, "*");
            }
            // Case: construct => 's3:*'
            else if (permission instanceof Table) {
                addToRolePolicyByActionAndResource("dynamodb:*", permission.dynamodbTable.tableArn);
            }
            else if (permission instanceof Topic) {
                addToRolePolicyByActionAndResource("sns:*", permission.snsTopic.topicArn);
            }
            else if (permission instanceof Queue) {
                addToRolePolicyByActionAndResource("sqs:*", permission.sqsQueue.queueArn);
            }
            else if (permission instanceof cdk.Construct) {
                switch ((_b = (_a = permission.node) === null || _a === void 0 ? void 0 : _a.defaultChild) === null || _b === void 0 ? void 0 : _b.constructor.name) {
                    case "CfnTable":
                        addToRolePolicyByActionAndResource("dynamodb:*", 
                        // @ts-expect-error We do not want to import the cdk modules, just cast to any
                        permission.tableArn);
                        break;
                    case "CfnTopic":
                        addToRolePolicyByActionAndResource("sns:*", 
                        // @ts-expect-error We do not want to import the cdk modules, just cast to any
                        permission.topicArn);
                        break;
                    case "CfnQueue":
                        addToRolePolicyByActionAndResource("sqs:*", 
                        // @ts-expect-error We do not want to import the cdk modules, just cast to any
                        permission.queueArn);
                        break;
                    case "CfnBucket":
                        addToRolePolicyByActionAndResource("s3:*", 
                        // @ts-expect-error We do not want to import the cdk modules, just cast to any
                        permission.bucketArn);
                        break;
                    default:
                        throw new Error(`The specified permissions is not a supported construct type.`);
                }
            }
            // Case: grant method
            else if (permission.length === 2 &&
                permission[0] instanceof cdk.Construct &&
                typeof permission[1] === "string") {
                const construct = permission[0];
                const methodName = permission[1];
                construct[methodName](this);
            }
            else {
                throw new Error(`The specified permissions is not supported.`);
            }
        });
    }
}
exports.attachPermissions = attachPermissions;
addToRolePolicyByActionAndResource(action, string, resource, string);
void {
    this: .addToRolePolicy(new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: [action],
        resources: [resource],
    }))
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVybWlzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9QZXJtaXNzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLFNBQWdCLGlCQUFpQixDQUFDLE1BQXFCLEVBQUUsV0FBZ0M7SUFDdkYsZ0JBQWdCO0lBQ2hCLEVBQUU7SUFDRiwwQkFBMEI7SUFDMUIsdUNBQXVDO0lBQ3ZDLHVDQUF1QztJQUN2QyxzQkFBc0I7SUFDdEIsd0NBQXdDO0lBQ3hDLDZDQUE2QztJQUM3QyxNQUFNO0lBRU4sbUNBQW1DO0lBQ25DLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQ25DLElBQUksV0FBVyxLQUFLLEdBQUcsRUFBRTtZQUN2QixrQ0FBa0MsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDdEQ7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztTQUNsRTtLQUNGO1NBQU07UUFDTCxXQUFXLENBQUMsT0FBTyxDQUNqQixDQUFDLFVBQTRELEVBQUUsRUFBRTs7WUFDL0QsbUNBQW1DO1lBQ25DLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO2dCQUNsQyxrQ0FBa0MsQ0FBQyxHQUFHLFVBQVUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzVEO1lBRUQsNEJBQTRCO2lCQUN2QixJQUFJLFVBQVUsWUFBWSxLQUFLLEVBQUU7Z0JBQ3BDLGtDQUFrQyxDQUNoQyxZQUFZLEVBQ1osVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQ2xDLENBQUM7YUFDSDtpQkFBTSxJQUFJLFVBQVUsWUFBWSxLQUFLLEVBQUU7Z0JBQ3RDLGtDQUFrQyxDQUNoQyxPQUFPLEVBQ1AsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQzdCLENBQUM7YUFDSDtpQkFBTSxJQUFJLFVBQVUsWUFBWSxLQUFLLEVBQUU7Z0JBQ3RDLGtDQUFrQyxDQUNoQyxPQUFPLEVBQ1AsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQzdCLENBQUM7YUFDSDtpQkFBTSxJQUFJLFVBQVUsWUFBWSxHQUFHLENBQUMsU0FBUyxFQUFFO2dCQUM5QyxvQkFBUSxVQUFVLENBQUMsSUFBSSwwQ0FBRSxZQUFZLDBDQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUU7b0JBQ3ZELEtBQUssVUFBVTt3QkFDYixrQ0FBa0MsQ0FDaEMsWUFBWTt3QkFDWiw4RUFBOEU7d0JBQzlFLFVBQVUsQ0FBQyxRQUFRLENBQ3BCLENBQUM7d0JBQ0YsTUFBTTtvQkFDUixLQUFLLFVBQVU7d0JBQ2Isa0NBQWtDLENBQ2hDLE9BQU87d0JBQ1AsOEVBQThFO3dCQUM5RSxVQUFVLENBQUMsUUFBUSxDQUNwQixDQUFDO3dCQUNGLE1BQU07b0JBQ1IsS0FBSyxVQUFVO3dCQUNiLGtDQUFrQyxDQUNoQyxPQUFPO3dCQUNQLDhFQUE4RTt3QkFDOUUsVUFBVSxDQUFDLFFBQVEsQ0FDcEIsQ0FBQzt3QkFDRixNQUFNO29CQUNSLEtBQUssV0FBVzt3QkFDZCxrQ0FBa0MsQ0FDaEMsTUFBTTt3QkFDTiw4RUFBOEU7d0JBQzlFLFVBQVUsQ0FBQyxTQUFTLENBQ3JCLENBQUM7d0JBQ0YsTUFBTTtvQkFDUjt3QkFDRSxNQUFNLElBQUksS0FBSyxDQUNiLDhEQUE4RCxDQUMvRCxDQUFDO2lCQUNMO2FBQ0Y7WUFDRCxxQkFBcUI7aUJBQ2hCLElBQ0gsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDO2dCQUN2QixVQUFVLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLFNBQVM7Z0JBQ3RDLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFDakM7Z0JBQ0EsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBa0IsQ0FBQztnQkFDakQsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBd0IsQ0FBQztnQkFDdkQsU0FBUyxDQUFDLFVBQVUsQ0FBMEMsQ0FDN0QsSUFBSSxDQUNMLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7YUFDaEU7UUFDSCxDQUFDLENBQ0YsQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQS9GRCw4Q0ErRkM7QUFFRCxrQ0FBa0MsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUFFLEtBQUs7SUFDekUsSUFBSSxFQUFBLENBQUMsZUFBZSxDQUNsQixJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7UUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztRQUN4QixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDakIsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDO0tBQ3RCLENBQUMsQ0FDSDtDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYXR0YWNoUGVybWlzc2lvbnMoc291cmNlOiBjZGsuQ29uc3RydWN0LCBwZXJtaXNzaW9uczogRnVuY3Rpb25QZXJtaXNzaW9ucyk6IHZvaWQge1xuICAvLyBGb3VyIHBhdHRlcm5zXG4gIC8vXG4gIC8vIGF0dGFjaFBlcm1pc3Npb25zKCcqJyk7XG4gIC8vIGF0dGFjaFBlcm1pc3Npb25zKFsgJ3NucycsICdzcXMnIF0pO1xuICAvLyBhdHRhY2hQZXJtaXNzaW9ucyhbIGV2ZW50LCBxdWV1ZSBdKTtcbiAgLy8gYXR0YWNoUGVybWlzc2lvbnMoW1xuICAvLyAgIFsgZXZlbnQuc25zVG9waWMsICdncmFudFB1Ymxpc2gnIF0sXG4gIC8vICAgWyBxdWV1ZS5zcXNRdWV1ZSwgJ2dyYW50U2VuZE1lc3NhZ2VzJyBdLFxuICAvLyBdKTtcblxuICAvLyBDYXNlOiAnYWRtaW4nIHBlcm1pc3Npb25zID0+ICcqJ1xuICBpZiAodHlwZW9mIHBlcm1pc3Npb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKHBlcm1pc3Npb25zID09PSBcIipcIikge1xuICAgICAgYWRkVG9Sb2xlUG9saWN5QnlBY3Rpb25BbmRSZXNvdXJjZShwZXJtaXNzaW9ucywgXCIqXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzcGVjaWZpZWQgcGVybWlzc2lvbnMgaXMgbm90IGEgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwZXJtaXNzaW9ucy5mb3JFYWNoKFxuICAgICAgKHBlcm1pc3Npb246IHN0cmluZyB8IGNkay5Db25zdHJ1Y3QgfCBbY2RrLkNvbnN0cnVjdCwgc3RyaW5nXSkgPT4ge1xuICAgICAgICAvLyBDYXNlOiAnczMnIHBlcm1pc3Npb25zID0+ICdzMzoqJ1xuICAgICAgICBpZiAodHlwZW9mIHBlcm1pc3Npb24gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBhZGRUb1JvbGVQb2xpY3lCeUFjdGlvbkFuZFJlc291cmNlKGAke3Blcm1pc3Npb259OipgLCBcIipcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXNlOiBjb25zdHJ1Y3QgPT4gJ3MzOionXG4gICAgICAgIGVsc2UgaWYgKHBlcm1pc3Npb24gaW5zdGFuY2VvZiBUYWJsZSkge1xuICAgICAgICAgIGFkZFRvUm9sZVBvbGljeUJ5QWN0aW9uQW5kUmVzb3VyY2UoXG4gICAgICAgICAgICBcImR5bmFtb2RiOipcIixcbiAgICAgICAgICAgIHBlcm1pc3Npb24uZHluYW1vZGJUYWJsZS50YWJsZUFyblxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAocGVybWlzc2lvbiBpbnN0YW5jZW9mIFRvcGljKSB7XG4gICAgICAgICAgYWRkVG9Sb2xlUG9saWN5QnlBY3Rpb25BbmRSZXNvdXJjZShcbiAgICAgICAgICAgIFwic25zOipcIixcbiAgICAgICAgICAgIHBlcm1pc3Npb24uc25zVG9waWMudG9waWNBcm5cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcm1pc3Npb24gaW5zdGFuY2VvZiBRdWV1ZSkge1xuICAgICAgICAgIGFkZFRvUm9sZVBvbGljeUJ5QWN0aW9uQW5kUmVzb3VyY2UoXG4gICAgICAgICAgICBcInNxczoqXCIsXG4gICAgICAgICAgICBwZXJtaXNzaW9uLnNxc1F1ZXVlLnF1ZXVlQXJuXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwZXJtaXNzaW9uIGluc3RhbmNlb2YgY2RrLkNvbnN0cnVjdCkge1xuICAgICAgICAgIHN3aXRjaCAocGVybWlzc2lvbi5ub2RlPy5kZWZhdWx0Q2hpbGQ/LmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJDZm5UYWJsZVwiOlxuICAgICAgICAgICAgICBhZGRUb1JvbGVQb2xpY3lCeUFjdGlvbkFuZFJlc291cmNlKFxuICAgICAgICAgICAgICAgIFwiZHluYW1vZGI6KlwiLFxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgZG8gbm90IHdhbnQgdG8gaW1wb3J0IHRoZSBjZGsgbW9kdWxlcywganVzdCBjYXN0IHRvIGFueVxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb24udGFibGVBcm5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQ2ZuVG9waWNcIjpcbiAgICAgICAgICAgICAgYWRkVG9Sb2xlUG9saWN5QnlBY3Rpb25BbmRSZXNvdXJjZShcbiAgICAgICAgICAgICAgICBcInNuczoqXCIsXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBkbyBub3Qgd2FudCB0byBpbXBvcnQgdGhlIGNkayBtb2R1bGVzLCBqdXN0IGNhc3QgdG8gYW55XG4gICAgICAgICAgICAgICAgcGVybWlzc2lvbi50b3BpY0FyblxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJDZm5RdWV1ZVwiOlxuICAgICAgICAgICAgICBhZGRUb1JvbGVQb2xpY3lCeUFjdGlvbkFuZFJlc291cmNlKFxuICAgICAgICAgICAgICAgIFwic3FzOipcIixcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGRvIG5vdCB3YW50IHRvIGltcG9ydCB0aGUgY2RrIG1vZHVsZXMsIGp1c3QgY2FzdCB0byBhbnlcbiAgICAgICAgICAgICAgICBwZXJtaXNzaW9uLnF1ZXVlQXJuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkNmbkJ1Y2tldFwiOlxuICAgICAgICAgICAgICBhZGRUb1JvbGVQb2xpY3lCeUFjdGlvbkFuZFJlc291cmNlKFxuICAgICAgICAgICAgICAgIFwiczM6KlwiLFxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgZG8gbm90IHdhbnQgdG8gaW1wb3J0IHRoZSBjZGsgbW9kdWxlcywganVzdCBjYXN0IHRvIGFueVxuICAgICAgICAgICAgICAgIHBlcm1pc3Npb24uYnVja2V0QXJuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGBUaGUgc3BlY2lmaWVkIHBlcm1pc3Npb25zIGlzIG5vdCBhIHN1cHBvcnRlZCBjb25zdHJ1Y3QgdHlwZS5gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENhc2U6IGdyYW50IG1ldGhvZFxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICBwZXJtaXNzaW9uLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICAgIHBlcm1pc3Npb25bMF0gaW5zdGFuY2VvZiBjZGsuQ29uc3RydWN0ICYmXG4gICAgICAgICAgdHlwZW9mIHBlcm1pc3Npb25bMV0gPT09IFwic3RyaW5nXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgY29uc3RydWN0ID0gcGVybWlzc2lvblswXSBhcyBjZGsuQ29uc3RydWN0O1xuICAgICAgICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBwZXJtaXNzaW9uWzFdIGFzIGtleW9mIGNkay5Db25zdHJ1Y3Q7XG4gICAgICAgICAgKGNvbnN0cnVjdFttZXRob2ROYW1lXSBhcyB7IChjb25zdHJ1Y3Q6IGNkay5Db25zdHJ1Y3QpOiB2b2lkIH0pKFxuICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc3BlY2lmaWVkIHBlcm1pc3Npb25zIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5cbmFkZFRvUm9sZVBvbGljeUJ5QWN0aW9uQW5kUmVzb3VyY2UoYWN0aW9uOiBzdHJpbmcsIHJlc291cmNlOiBzdHJpbmcpOiB2b2lkIHtcbiAgdGhpcy5hZGRUb1JvbGVQb2xpY3koXG4gICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgYWN0aW9uczogW2FjdGlvbl0sXG4gICAgICByZXNvdXJjZXM6IFtyZXNvdXJjZV0sXG4gICAgfSlcbiAgKTtcbn1cblxuIl19