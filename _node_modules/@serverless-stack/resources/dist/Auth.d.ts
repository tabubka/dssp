import * as cdk from "@aws-cdk/core";
import * as iam from "@aws-cdk/aws-iam";
import * as cognito from "@aws-cdk/aws-cognito";
import { Permissions } from "./util/permission";
export interface AuthProps {
    readonly cognito?: AuthCognitoProps;
    readonly cognitoUserPool?: cognito.IUserPool;
    readonly cognitoUserPoolClient?: cognito.IUserPoolClient;
    readonly auth0?: AuthAuth0Props;
    readonly amazon?: AuthAmazonProps;
    readonly apple?: AuthAppleProps;
    readonly facebook?: AuthFacebookProps;
    readonly google?: AuthGoogleProps;
    readonly twitter?: AuthTwitterProps;
}
export interface AuthCognitoProps {
    readonly signInAliases: cognito.SignInAliases;
}
export interface AuthAuth0Props {
    readonly domain: string;
    readonly clientId: string;
}
export interface AuthAmazonProps {
    readonly appId: string;
}
export interface AuthAppleProps {
    readonly servicesId: string;
}
export interface AuthFacebookProps {
    readonly appId: string;
}
export interface AuthGoogleProps {
    readonly clientId: string;
}
export interface AuthTwitterProps {
    readonly consumerKey: string;
    readonly consumerSecret: string;
}
export declare class Auth extends cdk.Construct {
    readonly cognitoUserPool?: cognito.UserPool;
    readonly cognitoUserPoolClient?: cognito.UserPoolClient;
    readonly cognitoCfnIdentityPool: cognito.CfnIdentityPool;
    readonly iamAuthRole: iam.Role;
    readonly iamUnauthRole: iam.Role;
    constructor(scope: cdk.Construct, id: string, props: AuthProps);
    createAuthRole(identityPool: cognito.CfnIdentityPool): iam.Role;
    createUnauthRole(identityPool: cognito.CfnIdentityPool): iam.Role;
    attachPermissionsForAuthUsers(permissions: Permissions): void;
    attachPermissionsForUnauthUsers(permissions: Permissions): void;
}
