"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const spawn = __importStar(require("cross-spawn"));
const cdk = __importStar(require("@aws-cdk/core"));
const child_process_1 = require("child_process");
const builder_1 = require("./util/builder");
const appPath = process.cwd();
/**
 * Finds the path to the tsc package executable by converting the file path of:
 * /Users/spongebob/serverless-stack/node_modules/typescript/dist/index.js
 * to:
 * /Users/spongebob/serverless-stack/node_modules/.bin/tsc
 */
function getTsBinPath() {
    const pkg = "typescript";
    const filePath = require.resolve(pkg);
    const matches = filePath.match(/(^.*[/\\]node_modules)[/\\].*$/);
    if (matches === null || !matches[1]) {
        throw new Error(`There was a problem finding ${pkg}`);
    }
    return path.join(matches[1], ".bin", "tsc");
}
/**
 * Uses the current file path and the package name to figure out the path to the
 * CLI. Converts:
 * /Users/spongebob/Sites/serverless-stack/packages/resources/dist/App.js
 * to:
 * /Users/jayair/Sites/serverless-stack/packages/cli
 */
function getSstCliRootPath() {
    const filePath = __dirname;
    const packageName = "resources";
    const packagePath = filePath.slice(0, filePath.lastIndexOf(packageName) + packageName.length);
    return path.join(packagePath, "../cli");
}
function exitWithMessage(message) {
    console.error(message);
    process.exit(1);
}
class App extends cdk.App {
    constructor(deployProps = {}, props = {}) {
        super(props);
        /**
         * Is the app being deployed locally
         */
        this.local = false;
        /**
         * A list of Lambda functions in the app
         */
        this.lambdaHandlers = [];
        this.buildDir = deployProps.buildDir || ".build";
        this.stage = deployProps.stage || "dev";
        this.name = deployProps.name || "my-app";
        this.region = deployProps.region || "us-east-1";
        this.lint = deployProps.lint === false ? false : true;
        if (deployProps.debugEndpoint) {
            this.local = true;
            this.debugEndpoint = deployProps.debugEndpoint;
            this.synthCallback = deployProps.synthCallback;
        }
    }
    logicalPrefixedName(logicalName) {
        const namePrefix = this.name === "" ? "" : `${this.name}-`;
        return `${this.stage}-${namePrefix}${logicalName}`;
    }
    synth(options = {}) {
        for (const child of this.node.children) {
            if (child instanceof cdk.Stack &&
                child.stackName.indexOf(`${this.stage}-`) !== 0) {
                throw new Error(`Stack (${child.stackName}) is not prefixed with the stage. Use sst.Stack or the format {stageName}-${child.stackName}.`);
            }
        }
        const cloudAssembly = super.synth(options);
        // Run lint and type check on handler input files
        // Note: do not need to run in two scenarios:
        //  1. do not need to run while debugging because the Lambda functions are
        //     replaced by stubs and have not been transpiled.
        //  2. do not need to run while running resources tests because .eslint file
        //     does not exist inside .build folder.
        if (!this.local && !this.isJestTest()) {
            this.processInputFiles();
        }
        // Run callback after synth has finished
        if (this.synthCallback) {
            this.synthCallback(this.lambdaHandlers);
        }
        return cloudAssembly;
    }
    isJestTest() {
        // Check the env var set inside test/setup-tests.js
        return process.env.JEST_RESOURCES_TESTS === "enabled";
    }
    registerLambdaHandler(handler) {
        this.lambdaHandlers.push(handler);
    }
    processInputFiles() {
        // Get input files
        const inputFilesBySrcPath = {};
        this.lambdaHandlers.forEach(({ srcPath, handler }) => {
            const metafile = path.join(srcPath, this.buildDir, builder_1.getEsbuildMetafileName(handler));
            const files = this.getInputFilesFromEsbuildMetafile(metafile);
            files.forEach((file) => {
                inputFilesBySrcPath[srcPath] = inputFilesBySrcPath[srcPath] || {};
                inputFilesBySrcPath[srcPath][file] = true;
            });
        });
        // Process each srcPath
        Object.keys(inputFilesBySrcPath).forEach((srcPath) => {
            const inputFiles = Object.keys(inputFilesBySrcPath[srcPath]);
            if (this.lint) {
                this.runLint(srcPath, inputFiles);
            }
            this.runTypeCheck(srcPath, inputFiles);
        });
    }
    getInputFilesFromEsbuildMetafile(file) {
        let metaJson;
        try {
            metaJson = fs.readJsonSync(file);
        }
        catch (e) {
            exitWithMessage("There was a problem reading the esbuild metafile.");
        }
        return Object.keys(metaJson.inputs).map((input) => path.resolve(input));
    }
    runLint(srcPath, inputFiles) {
        inputFiles = inputFiles.filter((file) => file.indexOf("node_modules") === -1 &&
            (file.endsWith(".ts") || file.endsWith(".js")));
        console.log(chalk_1.default.grey("Linting Lambda function source"));
        const response = spawn.sync("node", [
            path.join(appPath, this.buildDir, "eslint.js"),
            process.env.NO_COLOR === "true" ? "--no-color" : "--color",
            ...inputFiles,
        ], 
        // Using the ownPath instead of the appPath because there are cases
        // where npm flattens the dependecies and this casues eslint to be
        // unable to find the parsers and plugins. The ownPath hack seems
        // to fix this issue.
        // https://github.com/serverless-stack/serverless-stack/pull/68
        // Steps to replicate, repo: https://github.com/jayair/sst-eu-example
        // Do `yarn add standard -D` and `sst build`
        { stdio: "inherit", cwd: getSstCliRootPath() });
        if (response.error) {
            console.log(response.error);
            exitWithMessage("There was a problem linting the source.");
        }
        else if (response.stderr) {
            console.log(response.stderr);
            exitWithMessage("There was a problem linting the source.");
        }
        else if (response.status === 1) {
            exitWithMessage("There was a problem linting the source.");
        }
    }
    runTypeCheck(srcPath, inputFiles) {
        inputFiles = inputFiles.filter((file) => file.endsWith(".ts"));
        if (inputFiles.length === 0) {
            return;
        }
        console.log(chalk_1.default.grey("Type checking Lambda function source"));
        const hasTsconfig = fs.existsSync(path.join(srcPath, "tsconfig.json"));
        if (!hasTsconfig) {
            throw new Error(`Cannot find a "tsconfig.json" in the function's srcPath: ${path.resolve(srcPath)}`);
        }
        try {
            const stdout = child_process_1.execSync([
                getTsBinPath(),
                "--pretty",
                process.env.NO_COLOR === "true" ? "false" : "true",
                "--noEmit",
            ].join(" "), { cwd: srcPath });
            const output = stdout.toString();
            if (output.trim() !== "") {
                console.log(output);
            }
        }
        catch (e) {
            console.log(e.stdout.toString());
            exitWithMessage("There was a problem type checking the source.");
        }
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,