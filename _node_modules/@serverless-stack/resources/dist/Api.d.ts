import * as cdk from "@aws-cdk/core";
import * as logs from "@aws-cdk/aws-logs";
import * as route53 from "@aws-cdk/aws-route53";
import * as acm from "@aws-cdk/aws-certificatemanager";
import * as apig from "@aws-cdk/aws-apigatewayv2";
import * as apigAuthorizers from "@aws-cdk/aws-apigatewayv2-authorizers";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export declare enum ApiAuthorizationType {
    JWT = "JWT",
    NONE = "NONE",
    AWS_IAM = "AWS_IAM"
}
export declare enum ApiPayloadFormatVersion {
    V1 = "1.0",
    V2 = "2.0"
}
export interface ApiProps {
    readonly httpApi?: apig.IHttpApi | apig.HttpApiProps;
    readonly routes?: {
        [key: string]: FunctionDefinition | ApiRouteProps;
    };
    readonly cors?: boolean | apig.CorsPreflightOptions;
    readonly accessLog?: boolean | string | apig.CfnStage.AccessLogSettingsProperty;
    readonly customDomain?: string | ApiCustomDomainProps;
    readonly defaultFunctionProps?: FunctionProps;
    readonly defaultAuthorizationType?: ApiAuthorizationType;
    readonly defaultAuthorizer?: apigAuthorizers.HttpJwtAuthorizer | apigAuthorizers.HttpUserPoolAuthorizer;
    readonly defaultAuthorizationScopes?: string[];
    readonly defaultPayloadFormatVersion?: ApiPayloadFormatVersion;
}
export interface ApiRouteProps {
    readonly authorizationType?: ApiAuthorizationType;
    readonly authorizer?: apigAuthorizers.HttpJwtAuthorizer | apigAuthorizers.HttpUserPoolAuthorizer;
    readonly authorizationScopes?: string[];
    readonly payloadFormatVersion?: ApiPayloadFormatVersion;
    readonly function?: FunctionDefinition;
}
export interface ApiCustomDomainProps {
    readonly domainName: string | apig.IDomainName;
    readonly hostedZone?: string | route53.IHostedZone;
    readonly certificate?: acm.ICertificate;
    readonly path?: string;
}
export declare class Api extends cdk.Construct {
    readonly httpApi: apig.HttpApi;
    readonly accessLogGroup?: logs.LogGroup;
    private readonly functions;
    private readonly permissionsAttachedForAllRoutes;
    private readonly defaultFunctionProps?;
    private readonly defaultAuthorizer?;
    private readonly defaultAuthorizationType?;
    private readonly defaultAuthorizationScopes?;
    private readonly defaultPayloadFormatVersion?;
    constructor(scope: cdk.Construct, id: string, props?: ApiProps);
    buildCorsConfig(cors: boolean | apig.CorsPreflightOptions | undefined): apig.CorsPreflightOptions | undefined;
    buildCustomDomainConfig(customDomain: string | ApiCustomDomainProps | undefined): apig.DefaultDomainMappingOptions | undefined;
    buildAccessLogConfig(accessLog: boolean | string | apig.CfnStage.AccessLogSettingsProperty | undefined): logs.LogGroup | undefined;
    addRoutes(scope: cdk.Construct, routes: {
        [key: string]: FunctionDefinition | ApiRouteProps;
    }): void;
    addRoute(scope: cdk.Construct, routeKey: string, routeValue: FunctionDefinition | ApiRouteProps): Fn;
    isInstanceOfApiRouteProps(object: ApiRouteProps): boolean;
    normalizeRouteKey(routeKey: string): string;
    getFunction(routeKey: string): Fn | undefined;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToRoute(routeKey: string, permissions: Permissions): void;
}
