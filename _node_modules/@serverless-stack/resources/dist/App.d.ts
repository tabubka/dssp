import * as cdk from "@aws-cdk/core";
import * as cxapi from "@aws-cdk/cx-api";
import { FunctionHandlerProps } from "./Function";
export declare type DeployProps = AppDeployProps;
/**
 * Deploy props for apps.
 */
export interface AppDeployProps {
    /**
     * The app name, used to prefix stacks.
     *
     * @default - Defaults to empty string
     */
    readonly name?: string;
    /**
     * The stage to deploy this app to.
     *
     * @default - Defaults to dev
     */
    readonly stage?: string;
    /**
     * The region to deploy this app to.
     *
     * @default - Defaults to us-east-1
     */
    readonly region?: string;
    readonly lint?: boolean;
    readonly buildDir?: string;
    /**
     * The local WebSockets debug enpoint used by `sst start`.
     *
     * @default - Defaults to undefined
     */
    readonly debugEndpoint?: string;
    /**
     * The callback after synth completes, used by `sst start`.
     *
     * @default - Defaults to undefined
     */
    readonly synthCallback?: (lambdaHandlers: Array<FunctionHandlerProps>) => void;
}
export declare type AppProps = cdk.AppProps;
export declare class App extends cdk.App {
    /**
     * Is the app being deployed locally
     */
    readonly local: boolean;
    /**
     * The app name
     */
    readonly name: string;
    /**
     * The stage to deploy to
     */
    readonly stage: string;
    /**
     * The region to deploy to
     */
    readonly region: string;
    readonly lint: boolean;
    readonly buildDir: string;
    /**
     * The local WebSockets debug endpoint
     */
    readonly debugEndpoint?: string;
    /**
     * The callback after synth completes.
     */
    private readonly synthCallback?;
    /**
     * A list of Lambda functions in the app
     */
    private readonly lambdaHandlers;
    constructor(deployProps?: AppDeployProps, props?: AppProps);
    logicalPrefixedName(logicalName: string): string;
    synth(options?: cdk.StageSynthesisOptions): cxapi.CloudAssembly;
    isJestTest(): boolean;
    registerLambdaHandler(handler: FunctionHandlerProps): void;
    processInputFiles(): void;
    getInputFilesFromEsbuildMetafile(file: string): Array<string>;
    runLint(srcPath: string, inputFiles: Array<string>): void;
    runTypeCheck(srcPath: string, inputFiles: Array<string>): void;
}
