"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
class Stack extends cdk.Stack {
    constructor(scope, id, props) {
        const root = scope.node.root;
        const stageId = root.logicalPrefixedName(id);
        Stack.checkForEnvInProps(props);
        super(scope, stageId, Object.assign(Object.assign({}, props), { env: {
                account: process.env.CDK_DEFAULT_ACCOUNT,
                region: root.region,
            } }));
        this.stage = root.stage;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static checkForEnvInProps(props) {
        if (props && props.env) {
            let envS = "";
            try {
                envS = " (" + JSON.stringify(props.env) + ")";
            }
            catch (e) {
                // Ignore
            }
            throw new Error(`Do not directly set the environment for a stack${envS}. Use the "AWS_PROFILE" environment variable and "--region" option instead.`);
        }
    }
}
exports.Stack = Stack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1EQUFxQztBQUtyQyxNQUFhLEtBQU0sU0FBUSxHQUFHLENBQUMsS0FBSztJQUdsQyxZQUFZLEtBQVUsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDcEQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFXLENBQUM7UUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTdDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sa0NBQ2YsS0FBSyxLQUNSLEdBQUcsRUFBRTtnQkFDSCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7Z0JBQ3hDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTthQUNwQixJQUNELENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDMUIsQ0FBQztJQUVELDhEQUE4RDtJQUN0RCxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBVztRQUMzQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3RCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUVkLElBQUk7Z0JBQ0YsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDL0M7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixTQUFTO2FBQ1Y7WUFFRCxNQUFNLElBQUksS0FBSyxDQUNiLGtEQUFrRCxJQUFJLDZFQUE2RSxDQUNwSSxDQUFDO1NBQ0g7SUFDSCxDQUFDO0NBQ0Y7QUFwQ0Qsc0JBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcblxuZXhwb3J0IHR5cGUgU3RhY2tQcm9wcyA9IGNkay5TdGFja1Byb3BzO1xuXG5leHBvcnQgY2xhc3MgU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgcmVhZG9ubHkgc3RhZ2U6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQXBwLCBpZDogc3RyaW5nLCBwcm9wcz86IFN0YWNrUHJvcHMpIHtcbiAgICBjb25zdCByb290ID0gc2NvcGUubm9kZS5yb290IGFzIEFwcDtcbiAgICBjb25zdCBzdGFnZUlkID0gcm9vdC5sb2dpY2FsUHJlZml4ZWROYW1lKGlkKTtcblxuICAgIFN0YWNrLmNoZWNrRm9yRW52SW5Qcm9wcyhwcm9wcyk7XG5cbiAgICBzdXBlcihzY29wZSwgc3RhZ2VJZCwge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBlbnY6IHtcbiAgICAgICAgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCxcbiAgICAgICAgcmVnaW9uOiByb290LnJlZ2lvbixcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YWdlID0gcm9vdC5zdGFnZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHByaXZhdGUgc3RhdGljIGNoZWNrRm9yRW52SW5Qcm9wcyhwcm9wcz86IGFueSkge1xuICAgIGlmIChwcm9wcyAmJiBwcm9wcy5lbnYpIHtcbiAgICAgIGxldCBlbnZTID0gXCJcIjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZW52UyA9IFwiIChcIiArIEpTT04uc3RyaW5naWZ5KHByb3BzLmVudikgKyBcIilcIjtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWdub3JlXG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYERvIG5vdCBkaXJlY3RseSBzZXQgdGhlIGVudmlyb25tZW50IGZvciBhIHN0YWNrJHtlbnZTfS4gVXNlIHRoZSBcIkFXU19QUk9GSUxFXCIgZW52aXJvbm1lbnQgdmFyaWFibGUgYW5kIFwiLS1yZWdpb25cIiBvcHRpb24gaW5zdGVhZC5gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19