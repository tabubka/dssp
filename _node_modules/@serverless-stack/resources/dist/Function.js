"use strict";
/* eslint-disable @typescript-eslint/ban-types*/
// Note: disabling ban-type rule so we don't get an error referencing the class Function
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const path_1 = __importDefault(require("path"));
const cdk = __importStar(require("@aws-cdk/core"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const builder_1 = require("./util/builder");
const permission_1 = require("./util/permission");
// A map of supported runtimes and esbuild targets
const runtimeTargetMap = {
    [lambda.Runtime.NODEJS.toString()]: "node12",
    [lambda.Runtime.NODEJS_4_3.toString()]: "node4",
    [lambda.Runtime.NODEJS_6_10.toString()]: "node6",
    [lambda.Runtime.NODEJS_8_10.toString()]: "node8",
    [lambda.Runtime.NODEJS_10_X.toString()]: "node10",
    [lambda.Runtime.NODEJS_12_X.toString()]: "node12",
    [lambda.Runtime.NODEJS_14_X.toString()]: "node14",
};
class Function extends lambda.Function {
    constructor(scope, id, props) {
        const root = scope.node.root;
        // Set defaults
        const handler = props.handler;
        const timeout = props.timeout || 10;
        const srcPath = props.srcPath || ".";
        const memorySize = props.memorySize || 1024;
        const tracing = props.tracing || lambda.Tracing.ACTIVE;
        const runtime = props.runtime || lambda.Runtime.NODEJS_12_X;
        const bundle = props.bundle === undefined ? true : props.bundle;
        // Validate handler
        if (!handler) {
            throw new Error(`No handler defined for the "${id}" Lambda function`);
        }
        if (!bundle && srcPath === ".") {
            throw new Error(`Bundle cannot be disabled for the "${id}" function since the srcPath is set to the project root. Read more here â€” https://github.com/serverless-stack/serverless-stack/issues/78`);
        }
        // Validate NodeJS runtime
        const esbuildTarget = runtimeTargetMap[runtime.toString()];
        if (esbuildTarget === undefined) {
            throw new Error(`The specified runtime is not supported for sst.Function. Only NodeJS runtimes are currently supported.`);
        }
        if (root.local) {
            super(scope, id, Object.assign(Object.assign({}, props), { runtime,
                tracing,
                memorySize, handler: "index.main", timeout: cdk.Duration.seconds(timeout), code: lambda.Code.fromAsset(path_1.default.resolve(__dirname, "../dist/stub.zip")), environment: Object.assign(Object.assign({}, (props.environment || {})), { SST_DEBUG_SRC_PATH: srcPath, SST_DEBUG_SRC_HANDLER: handler, SST_DEBUG_ENDPOINT: root.debugEndpoint || "" }) }));
        }
        else {
            const { outZip, outHandler } = builder_1.builder({
                bundle,
                srcPath,
                handler,
                target: esbuildTarget,
                buildDir: root.buildDir,
            });
            super(scope, id, Object.assign(Object.assign({}, props), { runtime,
                tracing,
                memorySize, handler: outHandler, code: lambda.Code.fromAsset(outZip), timeout: cdk.Duration.seconds(timeout) }));
        }
        // Enable reusing connections with Keep-Alive for NodeJs Lambda function
        this.addEnvironment("AWS_NODEJS_CONNECTION_REUSE_ENABLED", "1", {
            removeInEdge: true,
        });
        // register Lambda function in app
        root.registerLambdaHandler({
            srcPath,
            handler,
            bundle,
        });
    }
    attachPermissions(permissions) {
        if (this.role) {
            permission_1.attachPermissionsToRole(this.role, permissions);
        }
    }
    static fromDefinition(scope, id, definition) {
        if (typeof definition === "string") {
            return new Function(scope, id, { handler: definition });
        }
        else if (definition instanceof Function) {
            return definition;
        }
        else if (definition instanceof lambda.Function) {
            throw new Error(`Please use sst.Function instead of lambda.Function for the "${id}" Function.`);
        }
        else if (definition.handler !== undefined) {
            return new Function(scope, id, definition);
        }
        throw new Error(`Invalid function definition for the "${id}" Function`);
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,