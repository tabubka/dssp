"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const sqs = __importStar(require("@aws-cdk/aws-sqs"));
const lambdaEventSources = __importStar(require("@aws-cdk/aws-lambda-event-sources"));
const Function_1 = require("./Function");
class Queue extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { 
        // Queue props
        sqsQueue, 
        // Function props
        consumer, } = props || {};
        this.permissionsAttachedForAllConsumers = [];
        ////////////////////
        // Create Queue
        ////////////////////
        if (cdk.Construct.isConstruct(sqsQueue)) {
            this.sqsQueue = sqsQueue;
        }
        else {
            const sqsQueueProps = (sqsQueue || {});
            this.sqsQueue = new sqs.Queue(this, "Queue", Object.assign({ queueName: root.logicalPrefixedName(id) }, sqsQueueProps));
        }
        ///////////////////////////
        // Create Consumer
        ///////////////////////////
        if (consumer) {
            this.addConsumer(this, consumer);
        }
    }
    addConsumer(scope, consumer) {
        if (this.consumerFunction) {
            throw new Error("Cannot configure more than 1 consumer for a Queue");
        }
        // create consumer
        if (consumer.function) {
            consumer = consumer;
            this.consumerFunction = Function_1.Function.fromDefinition(scope, "Consumer", consumer.function);
            this.consumerFunction.addEventSource(new lambdaEventSources.SqsEventSource(this.sqsQueue, consumer.consumerProps));
        }
        else {
            consumer = consumer;
            this.consumerFunction = Function_1.Function.fromDefinition(scope, `Consumer`, consumer);
            this.consumerFunction.addEventSource(new lambdaEventSources.SqsEventSource(this.sqsQueue));
        }
        // attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            if (this.consumerFunction) {
                this.consumerFunction.attachPermissions(permissions);
            }
        });
    }
    attachPermissions(permissions) {
        if (this.consumerFunction) {
            this.consumerFunction.attachPermissions(permissions);
        }
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1EQUFxQztBQUNyQyxzREFBd0M7QUFDeEMsc0ZBQXdFO0FBRXhFLHlDQUFnRTtBQWFoRSxNQUFhLEtBQU0sU0FBUSxHQUFHLENBQUMsU0FBUztJQUt0QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFXLENBQUM7UUFDcEMsTUFBTTtRQUNKLGNBQWM7UUFDZCxRQUFRO1FBQ1IsaUJBQWlCO1FBQ2pCLFFBQVEsR0FDVCxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGtDQUFrQyxHQUFHLEVBQUUsQ0FBQztRQUU3QyxvQkFBb0I7UUFDcEIsZUFBZTtRQUNmLG9CQUFvQjtRQUNwQixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBcUIsQ0FBQztTQUN2QzthQUFNO1lBQ0wsTUFBTSxhQUFhLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFtQixDQUFDO1lBQ3pELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLGtCQUN6QyxTQUFTLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxJQUNwQyxhQUFhLEVBQ2hCLENBQUM7U0FDSjtRQUVELDJCQUEyQjtRQUMzQixrQkFBa0I7UUFDbEIsMkJBQTJCO1FBRTNCLElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUNULEtBQW9CLEVBQ3BCLFFBQWlEO1FBRWpELElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUN0RTtRQUVELGtCQUFrQjtRQUNsQixJQUFLLFFBQStCLENBQUMsUUFBUSxFQUFFO1lBQzdDLFFBQVEsR0FBRyxRQUE4QixDQUFDO1lBQzFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxtQkFBRSxDQUFDLGNBQWMsQ0FDdkMsS0FBSyxFQUNMLFVBQVUsRUFDVixRQUFRLENBQUMsUUFBUSxDQUNsQixDQUFDO1lBQ0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FDbEMsSUFBSSxrQkFBa0IsQ0FBQyxjQUFjLENBQ25DLElBQUksQ0FBQyxRQUFRLEVBQ2IsUUFBUSxDQUFDLGFBQWEsQ0FDdkIsQ0FDRixDQUFDO1NBQ0g7YUFBTTtZQUNMLFFBQVEsR0FBRyxRQUE4QixDQUFDO1lBQzFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxtQkFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQ2xDLElBQUksa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDckQsQ0FBQztTQUNIO1FBRUQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUM5RCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3REO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsV0FBd0I7UUFDeEMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBQ0Y7QUFwRkQsc0JBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgKiBhcyBzcXMgZnJvbSBcIkBhd3MtY2RrL2F3cy1zcXNcIjtcbmltcG9ydCAqIGFzIGxhbWJkYUV2ZW50U291cmNlcyBmcm9tIFwiQGF3cy1jZGsvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIGFzIEZuLCBGdW5jdGlvbkRlZmluaXRpb24gfSBmcm9tIFwiLi9GdW5jdGlvblwiO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tIFwiLi91dGlsL3Blcm1pc3Npb25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBRdWV1ZVByb3BzIHtcbiAgcmVhZG9ubHkgc3FzUXVldWU/OiBzcXMuSVF1ZXVlIHwgc3FzLlF1ZXVlUHJvcHM7XG4gIHJlYWRvbmx5IGNvbnN1bWVyPzogRnVuY3Rpb25EZWZpbml0aW9uIHwgUXVldWVDb25zdW1lclByb3BzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXVlQ29uc3VtZXJQcm9wcyB7XG4gIHJlYWRvbmx5IGZ1bmN0aW9uOiBGdW5jdGlvbkRlZmluaXRpb247XG4gIHJlYWRvbmx5IGNvbnN1bWVyUHJvcHM/OiBsYW1iZGFFdmVudFNvdXJjZXMuU3FzRXZlbnRTb3VyY2VQcm9wcztcbn1cblxuZXhwb3J0IGNsYXNzIFF1ZXVlIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCB7XG4gIHB1YmxpYyByZWFkb25seSBzcXNRdWV1ZTogc3FzLlF1ZXVlO1xuICBwdWJsaWMgY29uc3VtZXJGdW5jdGlvbj86IEZuO1xuICBwcml2YXRlIHJlYWRvbmx5IHBlcm1pc3Npb25zQXR0YWNoZWRGb3JBbGxDb25zdW1lcnM6IFBlcm1pc3Npb25zW107XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogUXVldWVQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCByb290ID0gc2NvcGUubm9kZS5yb290IGFzIEFwcDtcbiAgICBjb25zdCB7XG4gICAgICAvLyBRdWV1ZSBwcm9wc1xuICAgICAgc3FzUXVldWUsXG4gICAgICAvLyBGdW5jdGlvbiBwcm9wc1xuICAgICAgY29uc3VtZXIsXG4gICAgfSA9IHByb3BzIHx8IHt9O1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbENvbnN1bWVycyA9IFtdO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDcmVhdGUgUXVldWVcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGlmIChjZGsuQ29uc3RydWN0LmlzQ29uc3RydWN0KHNxc1F1ZXVlKSkge1xuICAgICAgdGhpcy5zcXNRdWV1ZSA9IHNxc1F1ZXVlIGFzIHNxcy5RdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3FzUXVldWVQcm9wcyA9IChzcXNRdWV1ZSB8fCB7fSkgYXMgc3FzLlF1ZXVlUHJvcHM7XG4gICAgICB0aGlzLnNxc1F1ZXVlID0gbmV3IHNxcy5RdWV1ZSh0aGlzLCBcIlF1ZXVlXCIsIHtcbiAgICAgICAgcXVldWVOYW1lOiByb290LmxvZ2ljYWxQcmVmaXhlZE5hbWUoaWQpLFxuICAgICAgICAuLi5zcXNRdWV1ZVByb3BzLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIENvbnN1bWVyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICBpZiAoY29uc3VtZXIpIHtcbiAgICAgIHRoaXMuYWRkQ29uc3VtZXIodGhpcywgY29uc3VtZXIpO1xuICAgIH1cbiAgfVxuXG4gIGFkZENvbnN1bWVyKFxuICAgIHNjb3BlOiBjZGsuQ29uc3RydWN0LFxuICAgIGNvbnN1bWVyOiBGdW5jdGlvbkRlZmluaXRpb24gfCBRdWV1ZUNvbnN1bWVyUHJvcHNcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY29uc3VtZXJGdW5jdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbmZpZ3VyZSBtb3JlIHRoYW4gMSBjb25zdW1lciBmb3IgYSBRdWV1ZVwiKTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgY29uc3VtZXJcbiAgICBpZiAoKGNvbnN1bWVyIGFzIFF1ZXVlQ29uc3VtZXJQcm9wcykuZnVuY3Rpb24pIHtcbiAgICAgIGNvbnN1bWVyID0gY29uc3VtZXIgYXMgUXVldWVDb25zdW1lclByb3BzO1xuICAgICAgdGhpcy5jb25zdW1lckZ1bmN0aW9uID0gRm4uZnJvbURlZmluaXRpb24oXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBcIkNvbnN1bWVyXCIsXG4gICAgICAgIGNvbnN1bWVyLmZ1bmN0aW9uXG4gICAgICApO1xuICAgICAgdGhpcy5jb25zdW1lckZ1bmN0aW9uLmFkZEV2ZW50U291cmNlKFxuICAgICAgICBuZXcgbGFtYmRhRXZlbnRTb3VyY2VzLlNxc0V2ZW50U291cmNlKFxuICAgICAgICAgIHRoaXMuc3FzUXVldWUsXG4gICAgICAgICAgY29uc3VtZXIuY29uc3VtZXJQcm9wc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdW1lciA9IGNvbnN1bWVyIGFzIEZ1bmN0aW9uRGVmaW5pdGlvbjtcbiAgICAgIHRoaXMuY29uc3VtZXJGdW5jdGlvbiA9IEZuLmZyb21EZWZpbml0aW9uKHNjb3BlLCBgQ29uc3VtZXJgLCBjb25zdW1lcik7XG4gICAgICB0aGlzLmNvbnN1bWVyRnVuY3Rpb24uYWRkRXZlbnRTb3VyY2UoXG4gICAgICAgIG5ldyBsYW1iZGFFdmVudFNvdXJjZXMuU3FzRXZlbnRTb3VyY2UodGhpcy5zcXNRdWV1ZSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gYXR0YWNoIHBlcm1pc3Npb25zXG4gICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsQ29uc3VtZXJzLmZvckVhY2goKHBlcm1pc3Npb25zKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25zdW1lckZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuY29uc3VtZXJGdW5jdGlvbi5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9uczogUGVybWlzc2lvbnMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb25zdW1lckZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLmNvbnN1bWVyRnVuY3Rpb24uYXR0YWNoUGVybWlzc2lvbnMocGVybWlzc2lvbnMpO1xuICAgIH1cblxuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbENvbnN1bWVycy5wdXNoKHBlcm1pc3Npb25zKTtcbiAgfVxufVxuIl19