"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const sns = __importStar(require("@aws-cdk/aws-sns"));
const snsSubscriptions = __importStar(require("@aws-cdk/aws-sns-subscriptions"));
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
class Topic extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { 
        // Topic props
        snsTopic, 
        // Function props
        subscribers, } = props || {};
        this.subscriberFunctions = [];
        this.permissionsAttachedForAllSubscribers = [];
        ////////////////////
        // Create Topic
        ////////////////////
        if (cdk.Construct.isConstruct(snsTopic)) {
            this.snsTopic = snsTopic;
        }
        else {
            const snsTopicProps = (snsTopic || {});
            this.snsTopic = new sns.Topic(this, "Topic", Object.assign({ topicName: root.logicalPrefixedName(id) }, snsTopicProps));
        }
        ///////////////////////////
        // Create Subscribers
        ///////////////////////////
        this.addSubscribers(this, subscribers || []);
    }
    addSubscriber(scope, subscriber) {
        let fn;
        const i = this.subscriberFunctions.length;
        // subscriber is props
        if (subscriber.function) {
            subscriber = subscriber;
            fn = Function_1.Function.fromDefinition(scope, `Subscriber_${i}`, subscriber.function);
            this.snsTopic.addSubscription(new snsSubscriptions.LambdaSubscription(fn, subscriber.subscriberProps));
            this.subscriberFunctions.push(fn);
        }
        // subscriber is function
        else {
            subscriber = subscriber;
            fn = Function_1.Function.fromDefinition(scope, `Subscriber_${i}`, subscriber);
            this.snsTopic.addSubscription(new snsSubscriptions.LambdaSubscription(fn));
            this.subscriberFunctions.push(fn);
        }
        return fn;
    }
    addSubscribers(scope, subscribers) {
        subscribers.forEach((subscriber) => {
            // add subscriber
            const fn = this.addSubscriber(scope, subscriber);
            // attached existing permissions
            this.permissionsAttachedForAllSubscribers.forEach((permissions) => fn.attachPermissions(permissions));
        });
    }
    attachPermissions(permissions) {
        this.subscriberFunctions.forEach((subscriber) => subscriber.attachPermissions(permissions));
        this.permissionsAttachedForAllSubscribers.push(permissions);
    }
    attachPermissionsToSubscriber(index, permissions) {
        this.subscriberFunctions[index].attachPermissions(permissions);
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9waWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVG9waWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1EQUFxQztBQUNyQyxzREFBd0M7QUFDeEMsaUZBQW1FO0FBRW5FLHlDQUFnRTtBQWlCaEUscUJBQXFCO0FBQ3JCLFlBQVk7QUFDWixxQkFBcUI7QUFFckIsTUFBYSxLQUFNLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFLdEMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBVyxDQUFDO1FBQ3BDLE1BQU07UUFDSixjQUFjO1FBQ2QsUUFBUTtRQUNSLGlCQUFpQjtRQUNqQixXQUFXLEdBQ1osR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLG9DQUFvQyxHQUFHLEVBQUUsQ0FBQztRQUUvQyxvQkFBb0I7UUFDcEIsZUFBZTtRQUNmLG9CQUFvQjtRQUVwQixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBcUIsQ0FBQztTQUN2QzthQUFNO1lBQ0wsTUFBTSxhQUFhLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFtQixDQUFDO1lBQ3pELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLGtCQUN6QyxTQUFTLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxJQUNwQyxhQUFhLEVBQ2hCLENBQUM7U0FDSjtRQUVELDJCQUEyQjtRQUMzQixxQkFBcUI7UUFDckIsMkJBQTJCO1FBRTNCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsYUFBYSxDQUNYLEtBQW9CLEVBQ3BCLFVBQXFEO1FBRXJELElBQUksRUFBRSxDQUFDO1FBQ1AsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztRQUUxQyxzQkFBc0I7UUFDdEIsSUFBSyxVQUFtQyxDQUFDLFFBQVEsRUFBRTtZQUNqRCxVQUFVLEdBQUcsVUFBa0MsQ0FBQztZQUVoRCxFQUFFLEdBQUcsbUJBQUUsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUMzQixJQUFJLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsZUFBZSxDQUFDLENBQ3hFLENBQUM7WUFDRixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ25DO1FBQ0QseUJBQXlCO2FBQ3BCO1lBQ0gsVUFBVSxHQUFHLFVBQWdDLENBQUM7WUFFOUMsRUFBRSxHQUFHLG1CQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUMzQixJQUFJLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUM1QyxDQUFDO1lBQ0YsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELGNBQWMsQ0FDWixLQUFvQixFQUNwQixXQUEwRDtRQUUxRCxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDakMsaUJBQWlCO1lBQ2pCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRWpELGdDQUFnQztZQUNoQyxJQUFJLENBQUMsb0NBQW9DLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FDaEUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUNsQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsV0FBd0I7UUFDeEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQzlDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FDMUMsQ0FBQztRQUNGLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELDZCQUE2QixDQUFDLEtBQWEsRUFBRSxXQUF3QjtRQUNuRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNGO0FBL0ZELHNCQStGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0ICogYXMgc25zIGZyb20gXCJAYXdzLWNkay9hd3Mtc25zXCI7XG5pbXBvcnQgKiBhcyBzbnNTdWJzY3JpcHRpb25zIGZyb20gXCJAYXdzLWNkay9hd3Mtc25zLXN1YnNjcmlwdGlvbnNcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0IHsgRnVuY3Rpb24gYXMgRm4sIEZ1bmN0aW9uRGVmaW5pdGlvbiB9IGZyb20gXCIuL0Z1bmN0aW9uXCI7XG5pbXBvcnQgeyBQZXJtaXNzaW9ucyB9IGZyb20gXCIuL3V0aWwvcGVybWlzc2lvblwiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEludGVyZmFjZXNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljUHJvcHMge1xuICByZWFkb25seSBzbnNUb3BpYz86IHNucy5JVG9waWMgfCBzbnMuVG9waWNQcm9wcztcbiAgcmVhZG9ubHkgc3Vic2NyaWJlcnM/OiAoRnVuY3Rpb25EZWZpbml0aW9uIHwgVG9waWNTdWJzY3JpYmVyUHJvcHMpW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9waWNTdWJzY3JpYmVyUHJvcHMge1xuICByZWFkb25seSBmdW5jdGlvbjogRnVuY3Rpb25EZWZpbml0aW9uO1xuICByZWFkb25seSBzdWJzY3JpYmVyUHJvcHM/OiBzbnNTdWJzY3JpcHRpb25zLkxhbWJkYVN1YnNjcmlwdGlvblByb3BzO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENvbnN0cnVjdFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBjbGFzcyBUb3BpYyBleHRlbmRzIGNkay5Db25zdHJ1Y3Qge1xuICBwdWJsaWMgcmVhZG9ubHkgc25zVG9waWM6IHNucy5Ub3BpYztcbiAgcHVibGljIHJlYWRvbmx5IHN1YnNjcmliZXJGdW5jdGlvbnM6IEZuW107XG4gIHByaXZhdGUgcmVhZG9ubHkgcGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbFN1YnNjcmliZXJzOiBQZXJtaXNzaW9uc1tdO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFRvcGljUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qgcm9vdCA9IHNjb3BlLm5vZGUucm9vdCBhcyBBcHA7XG4gICAgY29uc3Qge1xuICAgICAgLy8gVG9waWMgcHJvcHNcbiAgICAgIHNuc1RvcGljLFxuICAgICAgLy8gRnVuY3Rpb24gcHJvcHNcbiAgICAgIHN1YnNjcmliZXJzLFxuICAgIH0gPSBwcm9wcyB8fCB7fTtcbiAgICB0aGlzLnN1YnNjcmliZXJGdW5jdGlvbnMgPSBbXTtcbiAgICB0aGlzLnBlcm1pc3Npb25zQXR0YWNoZWRGb3JBbGxTdWJzY3JpYmVycyA9IFtdO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDcmVhdGUgVG9waWNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgaWYgKGNkay5Db25zdHJ1Y3QuaXNDb25zdHJ1Y3Qoc25zVG9waWMpKSB7XG4gICAgICB0aGlzLnNuc1RvcGljID0gc25zVG9waWMgYXMgc25zLlRvcGljO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzbnNUb3BpY1Byb3BzID0gKHNuc1RvcGljIHx8IHt9KSBhcyBzbnMuVG9waWNQcm9wcztcbiAgICAgIHRoaXMuc25zVG9waWMgPSBuZXcgc25zLlRvcGljKHRoaXMsIFwiVG9waWNcIiwge1xuICAgICAgICB0b3BpY05hbWU6IHJvb3QubG9naWNhbFByZWZpeGVkTmFtZShpZCksXG4gICAgICAgIC4uLnNuc1RvcGljUHJvcHMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDcmVhdGUgU3Vic2NyaWJlcnNcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHRoaXMuYWRkU3Vic2NyaWJlcnModGhpcywgc3Vic2NyaWJlcnMgfHwgW10pO1xuICB9XG5cbiAgYWRkU3Vic2NyaWJlcihcbiAgICBzY29wZTogY2RrLkNvbnN0cnVjdCxcbiAgICBzdWJzY3JpYmVyOiBGdW5jdGlvbkRlZmluaXRpb24gfCBUb3BpY1N1YnNjcmliZXJQcm9wc1xuICApOiBGbiB7XG4gICAgbGV0IGZuO1xuICAgIGNvbnN0IGkgPSB0aGlzLnN1YnNjcmliZXJGdW5jdGlvbnMubGVuZ3RoO1xuXG4gICAgLy8gc3Vic2NyaWJlciBpcyBwcm9wc1xuICAgIGlmICgoc3Vic2NyaWJlciBhcyBUb3BpY1N1YnNjcmliZXJQcm9wcykuZnVuY3Rpb24pIHtcbiAgICAgIHN1YnNjcmliZXIgPSBzdWJzY3JpYmVyIGFzIFRvcGljU3Vic2NyaWJlclByb3BzO1xuXG4gICAgICBmbiA9IEZuLmZyb21EZWZpbml0aW9uKHNjb3BlLCBgU3Vic2NyaWJlcl8ke2l9YCwgc3Vic2NyaWJlci5mdW5jdGlvbik7XG4gICAgICB0aGlzLnNuc1RvcGljLmFkZFN1YnNjcmlwdGlvbihcbiAgICAgICAgbmV3IHNuc1N1YnNjcmlwdGlvbnMuTGFtYmRhU3Vic2NyaXB0aW9uKGZuLCBzdWJzY3JpYmVyLnN1YnNjcmliZXJQcm9wcylcbiAgICAgICk7XG4gICAgICB0aGlzLnN1YnNjcmliZXJGdW5jdGlvbnMucHVzaChmbik7XG4gICAgfVxuICAgIC8vIHN1YnNjcmliZXIgaXMgZnVuY3Rpb25cbiAgICBlbHNlIHtcbiAgICAgIHN1YnNjcmliZXIgPSBzdWJzY3JpYmVyIGFzIEZ1bmN0aW9uRGVmaW5pdGlvbjtcblxuICAgICAgZm4gPSBGbi5mcm9tRGVmaW5pdGlvbihzY29wZSwgYFN1YnNjcmliZXJfJHtpfWAsIHN1YnNjcmliZXIpO1xuICAgICAgdGhpcy5zbnNUb3BpYy5hZGRTdWJzY3JpcHRpb24oXG4gICAgICAgIG5ldyBzbnNTdWJzY3JpcHRpb25zLkxhbWJkYVN1YnNjcmlwdGlvbihmbilcbiAgICAgICk7XG4gICAgICB0aGlzLnN1YnNjcmliZXJGdW5jdGlvbnMucHVzaChmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgYWRkU3Vic2NyaWJlcnMoXG4gICAgc2NvcGU6IGNkay5Db25zdHJ1Y3QsXG4gICAgc3Vic2NyaWJlcnM6IChGdW5jdGlvbkRlZmluaXRpb24gfCBUb3BpY1N1YnNjcmliZXJQcm9wcylbXVxuICApOiB2b2lkIHtcbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiB7XG4gICAgICAvLyBhZGQgc3Vic2NyaWJlclxuICAgICAgY29uc3QgZm4gPSB0aGlzLmFkZFN1YnNjcmliZXIoc2NvcGUsIHN1YnNjcmliZXIpO1xuXG4gICAgICAvLyBhdHRhY2hlZCBleGlzdGluZyBwZXJtaXNzaW9uc1xuICAgICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsU3Vic2NyaWJlcnMuZm9yRWFjaCgocGVybWlzc2lvbnMpID0+XG4gICAgICAgIGZuLmF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIGF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zOiBQZXJtaXNzaW9ucyk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaWJlckZ1bmN0aW9ucy5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PlxuICAgICAgc3Vic2NyaWJlci5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucylcbiAgICApO1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbFN1YnNjcmliZXJzLnB1c2gocGVybWlzc2lvbnMpO1xuICB9XG5cbiAgYXR0YWNoUGVybWlzc2lvbnNUb1N1YnNjcmliZXIoaW5kZXg6IG51bWJlciwgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpYmVyRnVuY3Rpb25zW2luZGV4XS5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucyk7XG4gIH1cbn1cbiJdfQ==