"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const iam = __importStar(require("@aws-cdk/aws-iam"));
const cognito = __importStar(require("@aws-cdk/aws-cognito"));
const permission_1 = require("./util/permission");
class Auth extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { cognito: cognitoProps, cognitoUserPool, cognitoUserPoolClient, auth0, amazon, apple, facebook, google, twitter, } = props;
        ////////////////////
        // Handle Cognito Identity Providers (ie. User Pool)
        ////////////////////
        const cognitoIdentityProviders = [];
        // Validate input
        if (cognitoProps !== undefined && cognitoUserPool !== undefined) {
            throw new Error(`Cannot define both cognito and cognitoUserPool`);
        }
        if (cognitoProps !== undefined && cognitoUserPoolClient !== undefined) {
            throw new Error(`Cannot define both cognito and cognitoUserPoolClient`);
        }
        if ((cognitoUserPool === undefined && cognitoUserPoolClient !== undefined) ||
            (cognitoUserPool !== undefined && cognitoUserPoolClient === undefined)) {
            throw new Error(`Have to define both cognitoUserPool and cognitoUserPoolClient`);
        }
        if (cognitoProps) {
            if (!cognitoProps.signInAliases) {
                throw new Error(`No signInAliases defined for cognito in sst.Auth`);
            }
            // Create User Pool
            this.cognitoUserPool = new cognito.UserPool(this, "UserPool", {
                userPoolName: root.logicalPrefixedName(id),
                selfSignUpEnabled: true,
                signInAliases: cognitoProps.signInAliases,
                signInCaseSensitive: false,
            });
            // Create User Pool Client
            this.cognitoUserPoolClient = new cognito.UserPoolClient(this, "UserPoolClient", {
                userPool: this.cognitoUserPool,
            });
        }
        else if (cognitoUserPool) {
            this.cognitoUserPool = cognitoUserPool;
            this.cognitoUserPoolClient = cognitoUserPoolClient;
        }
        // Set cognito providers
        if (this.cognitoUserPool && this.cognitoUserPoolClient) {
            cognitoIdentityProviders.push({
                providerName: this.cognitoUserPool.userPoolProviderName,
                clientId: this.cognitoUserPoolClient.userPoolClientId,
            });
        }
        ////////////////////
        // Handle OpenId Connect Providers (ie. Auth0)
        ////////////////////
        const openIdConnectProviderArns = [];
        if (auth0) {
            if (!auth0.domain) {
                throw new Error(`No Auth0 domain defined for the "${id}" Auth`);
            }
            if (!auth0.clientId) {
                throw new Error(`No Auth0 clientId defined for the "${id}" Auth`);
            }
            const provider = new iam.OpenIdConnectProvider(this, "Auth0Provider", {
                url: auth0.domain.startsWith("https://")
                    ? auth0.domain
                    : `https://${auth0.domain}`,
                clientIds: [auth0.clientId],
            });
            openIdConnectProviderArns.push(provider.openIdConnectProviderArn);
        }
        ////////////////////
        // Handle Social Identity Providers
        ////////////////////
        const supportedLoginProviders = {};
        if (amazon) {
            if (!amazon.appId) {
                throw new Error(`No Amazon appId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["www.amazon.com"] = amazon.appId;
        }
        if (facebook) {
            if (!facebook.appId) {
                throw new Error(`No Facebook appId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["graph.facebook.com"] = facebook.appId;
        }
        if (google) {
            if (!google.clientId) {
                throw new Error(`No Google appId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["accounts.google.com"] = google.clientId;
        }
        if (twitter) {
            if (!twitter.consumerKey) {
                throw new Error(`No Twitter consumer key defined for the "${id}" Auth`);
            }
            if (!twitter.consumerSecret) {
                throw new Error(`No Twitter consumer secret defined for the "${id}" Auth`);
            }
            supportedLoginProviders["api.twitter.com"] = `${twitter.consumerKey};${twitter.consumerSecret}`;
        }
        if (apple) {
            if (!apple.servicesId) {
                throw new Error(`No Apple servicesId defined for the "${id}" Auth`);
            }
            supportedLoginProviders["appleid.apple.com"] = apple.servicesId;
        }
        ////////////////////
        // Create Identity Pool
        ////////////////////
        // Create Cognito Identity Pool
        this.cognitoCfnIdentityPool = new cognito.CfnIdentityPool(this, "IdentityPool", {
            identityPoolName: root.logicalPrefixedName(id),
            allowUnauthenticatedIdentities: true,
            cognitoIdentityProviders,
            supportedLoginProviders,
            openIdConnectProviderArns,
        });
        this.iamAuthRole = this.createAuthRole(this.cognitoCfnIdentityPool);
        this.iamUnauthRole = this.createUnauthRole(this.cognitoCfnIdentityPool);
        // Attach roles to Identity Pool
        new cognito.CfnIdentityPoolRoleAttachment(this, "IdentityPoolRoleAttachment", {
            identityPoolId: this.cognitoCfnIdentityPool.ref,
            roles: {
                authenticated: this.iamAuthRole.roleArn,
                unauthenticated: this.iamUnauthRole.roleArn,
            },
        });
    }
    createAuthRole(identityPool) {
        const role = new iam.Role(this, "IdentityPoolAuthRole", {
            assumedBy: new iam.FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": identityPool.ref,
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated",
                },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        role.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*",
            ],
            resources: ["*"],
        }));
        return role;
    }
    createUnauthRole(identityPool) {
        const role = new iam.Role(this, "IdentityPoolUnauthRole", {
            assumedBy: new iam.FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": identityPool.ref,
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        role.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ["mobileanalytics:PutEvents", "cognito-sync:*"],
            resources: ["*"],
        }));
        return role;
    }
    attachPermissionsForAuthUsers(permissions) {
        permission_1.attachPermissionsToRole(this.iamAuthRole, permissions);
    }
    attachPermissionsForUnauthUsers(permissions) {
        permission_1.attachPermissionsToRole(this.iamUnauthRole, permissions);
    }
}
exports.Auth = Auth;
//# sourceMappingURL=data:application/json;base64,