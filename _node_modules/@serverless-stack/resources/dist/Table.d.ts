import * as cdk from "@aws-cdk/core";
import * as dynamodb from "@aws-cdk/aws-dynamodb";
export declare enum TableFieldType {
    BINARY = "B",
    NUMBER = "N",
    STRING = "S"
}
export interface TableProps {
    readonly fields?: {
        [key: string]: TableFieldType;
    };
    readonly primaryIndex?: TableIndexProps;
    readonly secondaryIndexes?: {
        [key: string]: TableIndexProps;
    };
    readonly dynamodbTable?: dynamodb.ITable | TableCdkProps;
}
export interface TableIndexProps {
    readonly partitionKey: string;
    readonly sortKey?: string;
    readonly indexProps?: TableCdkIndexProps;
}
export declare type TableCdkProps = Omit<dynamodb.TableProps, "partitionKey" | "sortKey">;
export declare type TableCdkIndexProps = Omit<dynamodb.GlobalSecondaryIndexProps, "indexName" | "partitionKey" | "sortKey">;
export declare class Table extends cdk.Construct {
    readonly dynamodbTable: dynamodb.Table;
    constructor(scope: cdk.Construct, id: string, props: TableProps);
    validateFieldsAndIndexes(id: string, props: TableProps): void;
    buildAttribute(fields: {
        [key: string]: TableFieldType;
    }, name: string): dynamodb.Attribute;
    convertTableFieldTypeToAttributeType(fieldType: TableFieldType): dynamodb.AttributeType;
}
