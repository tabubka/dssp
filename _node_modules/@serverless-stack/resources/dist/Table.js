"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.TableFieldType = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const dynamodb = __importStar(require("@aws-cdk/aws-dynamodb"));
var TableFieldType;
(function (TableFieldType) {
    TableFieldType["BINARY"] = "B";
    TableFieldType["NUMBER"] = "N";
    TableFieldType["STRING"] = "S";
})(TableFieldType = exports.TableFieldType || (exports.TableFieldType = {}));
/////////////////////
// Construct
/////////////////////
class Table extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { fields, primaryIndex, secondaryIndexes, dynamodbTable } = props;
        ////////////////////
        // Create Table
        ////////////////////
        this.validateFieldsAndIndexes(id, props);
        if (cdk.Construct.isConstruct(dynamodbTable)) {
            // Validate "fields" is not configured
            if (fields !== undefined) {
                throw new Error(`Cannot configure the "fields" when "dynamodbTable" is a construct in the "${id}" Table`);
            }
            this.dynamodbTable = dynamodbTable;
        }
        else {
            let dynamodbTableProps = (dynamodbTable || {});
            // Validate "fields" is configured
            if (fields === undefined) {
                throw new Error(`Missing "fields" in the "${id}" Table`);
            }
            // Validate dynamodbTableProps does not contain "partitionKey" and "sortKey"
            if (dynamodbTableProps.partitionKey) {
                throw new Error(`Cannot configure the "dynamodbTableProps.partitionKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.sortKey) {
                throw new Error(`Cannot configure the "dynamodbTableProps.sortKey" in the "${id}" Table`);
            }
            if (fields && primaryIndex) {
                dynamodbTableProps = Object.assign(Object.assign({}, dynamodbTableProps), { partitionKey: this.buildAttribute(fields, primaryIndex.partitionKey), sortKey: primaryIndex.sortKey
                        ? this.buildAttribute(fields, primaryIndex.sortKey)
                        : undefined });
            }
            this.dynamodbTable = new dynamodb.Table(this, "Table", Object.assign({ tableName: root.logicalPrefixedName(id), pointInTimeRecovery: true, billingMode: dynamodb.BillingMode.PAY_PER_REQUEST }, dynamodbTableProps));
        }
        //////////////////////////////
        // Create Secondary Indexes
        //////////////////////////////
        if (fields && secondaryIndexes) {
            Object.keys(secondaryIndexes).forEach((indexName) => {
                const { partitionKey, sortKey, indexProps = {} } = secondaryIndexes[indexName];
                // Validate indexProps does not contain "indexName", "partitionKey" and "sortKey"
                if (indexProps.indexName) {
                    throw new Error(`Cannot configure the "indexProps.indexName" in the "${indexName}" index of the "${id}" Table`);
                }
                if (indexProps.partitionKey) {
                    throw new Error(`Cannot configure the "indexProps.partitionKey" in the "${indexName}" index of the "${id}" Table`);
                }
                if (indexProps.sortKey) {
                    throw new Error(`Cannot configure the "indexProps.sortKey" in the "${indexName}" index of the "${id}" Table`);
                }
                this.dynamodbTable.addGlobalSecondaryIndex(Object.assign({ indexName, partitionKey: this.buildAttribute(fields, partitionKey), sortKey: sortKey ? this.buildAttribute(fields, sortKey) : undefined }, indexProps));
            });
        }
    }
    validateFieldsAndIndexes(id, props) {
        const { fields, primaryIndex, secondaryIndexes } = props;
        // Validate "fields"
        if (fields && Object.keys(fields).length === 0) {
            throw new Error(`No fields defined for the "${id}" Table`);
        }
        // Validate "primaryIndex"
        if (primaryIndex && !primaryIndex.partitionKey) {
            throw new Error(`Missing "partitionKey" in primary index for the "${id}" Table`);
        }
        // Validate "fields" and "primaryIndex" co-exists
        if (fields) {
            if (!primaryIndex) {
                throw new Error(`Missing "primaryIndex" in "${id}" Table`);
            }
        }
        else {
            if (primaryIndex) {
                throw new Error(`Cannot configure the "primaryIndex" without setting the "fields" in "${id}" Table`);
            }
            if (secondaryIndexes) {
                throw new Error(`Cannot configure the "secondaryIndexes" without setting the "fields" in "${id}" Table`);
            }
        }
    }
    buildAttribute(fields, name) {
        return {
            name,
            type: this.convertTableFieldTypeToAttributeType(fields[name]),
        };
    }
    convertTableFieldTypeToAttributeType(fieldType) {
        if (fieldType === TableFieldType.BINARY) {
            return dynamodb.AttributeType.BINARY;
        }
        else if (fieldType === TableFieldType.NUMBER) {
            return dynamodb.AttributeType.NUMBER;
        }
        else {
            return dynamodb.AttributeType.STRING;
        }
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,