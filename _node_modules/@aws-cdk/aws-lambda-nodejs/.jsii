{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-lambda": "1.93.0",
    "@aws-cdk/core": "1.93.0",
    "constructs": "^3.2.0"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS Lambda in Node.js",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.24.0 (build b722f66)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "lambda"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "@aws-cdk/aws-lambda-nodejs",
  "readme": {
    "markdown": "# Amazon Lambda Node.js Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis library provides constructs for Node.js Lambda functions.\n\nTo use this module, you will need to have Docker installed.\n\n## Node.js Function\n\nDefine a `NodejsFunction`:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler');\n```\n\nBy default, the construct will use the name of the defining file and the construct's id to look\nup the entry file:\n\n```plaintext\n.\n├── stack.ts # defines a 'NodejsFunction' with 'my-handler' as id\n├── stack.my-handler.ts # exports a function named 'handler'\n```\n\nThis file is used as \"entry\" for [esbuild](https://esbuild.github.io/). This means that your code is automatically transpiled and bundled whether it's written in JavaScript or TypeScript.\n\nAlternatively, an entry file and handler can be specified:\n\n```ts\nnew lambda.NodejsFunction(this, 'MyFunction', {\n  entry: '/path/to/my/file.ts', // accepts .js, .jsx, .ts and .tsx files\n  handler: 'myExportedFunc'\n});\n```\n\nAll other properties of `lambda.Function` are supported, see also the [AWS Lambda construct library](https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda).\n\nThe `NodejsFunction` construct automatically [reuses existing connections](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html)\nwhen working with the AWS SDK for JavaScript. Set the `awsSdkConnectionReuse` prop to `false` to disable it.\n\n## Lock file\n\nThe `NodejsFunction` requires a dependencies lock file (`yarn.lock` or\n`package-lock.json`). When bundling in a Docker container, the path containing this\nlock file is used as the source (`/asset-input`) for the volume mounted in the\ncontainer.\n\nBy default, the construct will try to automatically determine your project lock file.\nAlternatively, you can specify the `depsLockFilePath` prop manually. In this\ncase you need to ensure that this path includes `entry` and any module/dependencies\nused by your function. Otherwise bundling will fail.\n\n## Local bundling\n\nIf `esbuild` is available it will be used to bundle your code in your environment. Otherwise,\nbundling will happen in a [Lambda compatible Docker container](https://hub.docker.com/r/amazon/aws-sam-cli-build-image-nodejs12.x).\n\nFor macOS the recommendend approach is to install `esbuild` as Docker volume performance is really poor.\n\n`esbuild` can be installed with:\n\n```console\n$ npm install --save-dev esbuild@0\n```\n\nOR\n\n```console\n$ yarn add --dev esbuild@0\n```\n\nTo force bundling in a Docker container even if `esbuild` is available in your environment,\nset `bundling.forceDockerBundling` to `true`. This is useful if your function relies on node\nmodules that should be installed (`nodeModules` prop, see [below](#install-modules)) in a Lambda\ncompatible environment. This is usually the case with modules using native dependencies.\n\n## Working with modules\n\n### Externals\n\nBy default, all node modules are bundled except for `aws-sdk`. This can be configured by specifying\n`bundling.externalModules`:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    externalModules: [\n      'aws-sdk', // Use the 'aws-sdk' available in the Lambda runtime\n      'cool-module', // 'cool-module' is already available in a Layer\n    ],\n  },\n});\n```\n\n### Install modules\n\nBy default, all node modules referenced in your Lambda code will be bundled by `esbuild`.\nUse the `nodeModules` prop under `bundling` to specify a list of modules that should not be\nbundled but instead included in the `node_modules` folder of the Lambda package. This is useful\nwhen working with native dependencies or when `esbuild` fails to bundle a module.\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    nodeModules: ['native-module', 'other-module'],\n  },\n});\n```\n\nThe modules listed in `nodeModules` must be present in the `package.json`'s dependencies or\ninstalled. The same version will be used for installation. The lock file (`yarn.lock` or\n`package-lock.json`) will be used along with the right installer (`yarn` or `npm`).\n\nWhen working with `nodeModules` using native dependencies, you might want to force bundling in a\nDocker container even if `esbuild` is available in your environment. This can be done by setting\n`bundling.forceDockerBundling` to `true`.\n\n## Configuring `esbuild`\n\nThe `NodejsFunction` construct exposes some [esbuild options](https://esbuild.github.io/api/#build-api)\nvia properties under `bundling`:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n    },\n    logLevel: LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json' // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner : '/* comments */', // by default no comments are passed\n    footer : '/* comments */', // by default no comments are passed\n  },\n});\n```\n\n## Command hooks\n\nIt is possible to run additional commands by specifying the `commandHooks` prop:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler-with-commands', {\n  bundling: {\n    commandHooks: {\n      // Copy a file so that it will be included in the bundled asset\n      afterBundling(inputDir: string, outputDir: string): string[] {\n        return [`cp ${inputDir}/my-binary.node ${outputDir}`];\n      }\n      // ...\n    }\n    // ...\n  }\n\n});\n```\n\nThe following hooks are available:\n\n- `beforeBundling`: runs before all bundling commands\n- `beforeInstall`: runs before node modules installation\n- `afterBundling`: runs after all bundling commands\n\nThey all receive the directory containing the lock file (`inputDir`) and the\ndirectory where the bundled asset will be output (`outputDir`). They must return\nan array of commands to run. Commands are chained with `&&`.\n\nThe commands will run in the environment in which bundling occurs: inside the\ncontainer for Docker bundling or on the host OS for local bundling.\n\n## Customizing Docker bundling\n\nUse `bundling.environment` to define environments variables when `esbuild` runs:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    environment: {\n      NODE_ENV: 'production',\n    },\n  },\n});\n```\n\nUse `bundling.buildArgs` to pass build arguments when building the Docker bundling image:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n      buildArgs: {\n        HTTPS_PROXY: 'https://127.0.0.1:3001',\n      },\n  }\n});\n```\n\nUse `bundling.dockerImage` to use a custom Docker bundling image:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: cdk.DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});\n```\n\nThis image should have `esbuild` installed **globally**. If you plan to use `nodeModules` it\nshould also have `npm` or `yarn` depending on the lock file you're using.\n\nUse the [default image provided by `@aws-cdk/aws-lambda-nodejs`](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-lambda-nodejs/lib/Dockerfile)\nas a source of inspiration.\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-lambda-nodejs",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Lambda.Nodejs",
      "packageId": "Amazon.CDK.AWS.Lambda.Nodejs"
    },
    "java": {
      "maven": {
        "artifactId": "lambda-nodejs",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.lambda.nodejs"
    },
    "js": {
      "npm": "@aws-cdk/aws-lambda-nodejs"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-lambda-nodejs",
      "module": "aws_cdk.aws_lambda_nodejs"
    }
  },
  "types": {
    "@aws-cdk/aws-lambda-nodejs.BundlingOptions": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Bundling options."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.BundlingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 6
      },
      "name": "BundlingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "-  no comments are passed",
            "remarks": "This is similar to footer which inserts at the end instead of the beginning.\n\nThis is commonly used to insert comments:",
            "stability": "experimental",
            "summary": "Use this to insert an arbitrary string at the beginning of generated JavaScript files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 121
          },
          "name": "banner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no build arguments are passed",
            "stability": "experimental",
            "summary": "Build arguments to pass when building the bundling image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 180
          },
          "name": "buildArgs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- do not run additional commands",
            "stability": "experimental",
            "summary": "Command hooks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 210
          },
          "name": "commandHooks",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.ICommandHooks"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no replacements are made",
            "example": "{ 'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx') }",
            "stability": "experimental",
            "summary": "Replace global identifiers with constant expressions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 149
          },
          "name": "define",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "aws-cdk": "/aws-lambda-nodejs"
            },
            "default": "- use the Docker image provided by",
            "remarks": "This image should have esbuild installed globally. If you plan to use `nodeModules`\nit should also have `npm` or `yarn` depending on the lock file you're using.\n\nSee https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-lambda-nodejs/lib/Dockerfile\nfor the default image provided by @aws-cdk/aws-lambda-nodejs.",
            "stability": "experimental",
            "summary": "A custom bundling Docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 203
          },
          "name": "dockerImage",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.BundlingDockerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables are defined.",
            "stability": "experimental",
            "summary": "Environment variables defined when bundling runs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 139
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- latest v0",
            "stability": "experimental",
            "summary": "The version of esbuild to use when running in a Docker container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 173
          },
          "name": "esbuildVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['aws-sdk']",
            "stability": "experimental",
            "summary": "A list of modules that should be considered as externals (already available in the runtime)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 157
          },
          "name": "externalModules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-  no comments are passed",
            "remarks": "This is similar to banner which inserts at the beginning instead of the end.\n\nThis is commonly used to insert comments",
            "stability": "experimental",
            "summary": "Use this to insert an arbitrary string at the end of generated JavaScript files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 132
          },
          "name": "footer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This is useful if your function relies on node modules\nthat should be installed (`nodeModules`) in a Lambda compatible\nenvironment.",
            "stability": "experimental",
            "summary": "Force bundling in a Docker container even if local bundling is possible."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 190
          },
          "name": "forceDockerBundling",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "In JavaScript the `name` property on functions and classes defaults to a\nnearby identifier in the source code.\n\nHowever, minification renames symbols to reduce code size and bundling\nsometimes need to rename symbols to avoid collisions. That changes value of\nthe `name` property for many of these cases. This is usually fine because\nthe `name` property is normally only used for debugging. However, some\nframeworks rely on the `name` property for registration and binding purposes.\nIf this is the case, you can enable this option to preserve the original\n`name` values even in minified code.",
            "stability": "experimental",
            "summary": "Whether to preserve the original `name` values even in minified code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 67
          },
          "name": "keepNames",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use esbuild default loaders",
            "example": "{ '.png': 'dataurl' }",
            "remarks": "Configuring a loader for a given file type lets you load that file type with\nan `import` statement or a `require` call.",
            "see": "https://esbuild.github.io/api/#loader",
            "stability": "experimental",
            "summary": "Use loaders to change how a given input file is interpreted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 42
          },
          "name": "loader",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LogLevel.WARNING",
            "stability": "experimental",
            "summary": "Log level for esbuild."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 49
          },
          "name": "logLevel",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.LogLevel"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "The metadata in this JSON file follows this schema (specified using TypeScript syntax):\n\n```typescript\n  {\n     outputs: {\n          [path: string]: {\n            bytes: number\n            inputs: {\n              [path: string]: { bytesInOutput: number }\n            }\n            imports: { path: string }[]\n            exports: string[]\n          }\n        }\n     }\n}\n```\nThis data can then be analyzed by other tools. For example,\nbundle buddy can consume esbuild's metadata format and generates a treemap visualization\nof the modules in your bundle and how much space each one takes up.",
            "see": "https://esbuild.github.io/api/#metafile",
            "stability": "experimental",
            "summary": "This option tells esbuild to write out a JSON file relative to output directory with metadata about the build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 110
          },
          "name": "metafile",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to minify files when bundling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 12
          },
          "name": "minify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all modules are bundled",
            "remarks": "Modules are\ninstalled in a Lambda compatible environment only when bundling runs in\nDocker.",
            "stability": "experimental",
            "summary": "A list of modules that should be installed instead of bundled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 166
          },
          "name": "nodeModules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to include source maps when bundling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 19
          },
          "name": "sourceMap",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the node version of the runtime",
            "see": "https://esbuild.github.io/api/#target",
            "stability": "experimental",
            "summary": "Target environment for the generated JavaScript code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 28
          },
          "name": "target",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- automatically discovered by `esbuild`",
            "example": "{ 'tsconfig': 'path/custom.tsconfig.json' }",
            "remarks": "However, you can also configure a custom `tsconfig.json` file to use instead.\n\nThis is similar to entry path, you need to provide path to your custom `tsconfig.json`.\n\nThis can be useful if you need to do multiple builds of the same code with different settings.",
            "stability": "experimental",
            "summary": "Normally the esbuild automatically discovers `tsconfig.json` files and reads their contents during a build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 82
          },
          "name": "tsconfig",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-lambda-nodejs.ICommandHooks": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "example": "{\n  // Copy a file from the input directory to the output directory\n  // to include it in the bundled asset\n  afterBundling(inputDir: string, outputDir: string): string[] {\n    return [`cp ${inputDir}/my-binary.node ${outputDir}`];\n  }\n  // ...\n}",
        "remarks": "These commands will run in the environment in which bundling occurs: inside\nthe container for Docker bundling or on the host OS for local bundling.\n\nCommands are chained with `&&`.",
        "stability": "experimental",
        "summary": "Command hooks."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.ICommandHooks",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 231
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Commands are chained with `&&`.",
            "stability": "experimental",
            "summary": "Returns commands to run after bundling."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 253
          },
          "name": "afterBundling",
          "parameters": [
            {
              "name": "inputDir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "outputDir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Commands are chained with `&&`.",
            "stability": "experimental",
            "summary": "Returns commands to run before bundling."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 237
          },
          "name": "beforeBundling",
          "parameters": [
            {
              "name": "inputDir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "outputDir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This hook only runs when node modules are installed.\n\nCommands are chained with `&&`.",
            "stability": "experimental",
            "summary": "Returns commands to run before installing node modules."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 246
          },
          "name": "beforeInstall",
          "parameters": [
            {
              "name": "inputDir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "outputDir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "ICommandHooks"
    },
    "@aws-cdk/aws-lambda-nodejs.LogLevel": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "stability": "experimental",
        "summary": "Log level for esbuild."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.LogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 259
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Show everything."
          },
          "name": "INFO"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Show warnings and errors."
          },
          "name": "WARNING"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Show errors only."
          },
          "name": "ERROR"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Show nothing."
          },
          "name": "SILENT"
        }
      ],
      "name": "LogLevel"
    },
    "@aws-cdk/aws-lambda-nodejs.NodejsFunction": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "base": "@aws-cdk/aws-lambda.Function",
      "docs": {
        "stability": "experimental",
        "summary": "A Node.js Lambda function bundled using esbuild."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.NodejsFunction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/function.ts",
          "line": 82
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/function.ts",
        "line": 81
      },
      "name": "NodejsFunction"
    },
    "@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for a NodejsFunction."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps",
      "interfaces": [
        "@aws-cdk/aws-lambda.FunctionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/function.ts",
        "line": 15
      },
      "name": "NodejsFunctionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This sets the `AWS_NODEJS_CONNECTION_REUSE_ENABLED` environment variable\nto `1`.",
            "see": "https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html",
            "stability": "experimental",
            "summary": "Whether to automatically reuse TCP connections when working with the AWS SDK for JavaScript."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 53
          },
          "name": "awsSdkConnectionReuse",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use default bundling options: no minify, no sourcemap, all\nmodules are bundled.",
            "stability": "experimental",
            "summary": "Bundling options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 75
          },
          "name": "bundling",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.BundlingOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the path is found by walking up parent directories searching for\na `yarn.lock` or `package-lock.json` file",
            "remarks": "This will be used as the source for the volume mounted in the Docker\ncontainer.\n\nModules specified in `nodeModules` will be installed using the right\ninstaller (`npm` or `yarn`) along with this lock file.",
            "stability": "experimental",
            "summary": "The path to the dependencies lock file (`yarn.lock` or `package-lock.json`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 67
          },
          "name": "depsLockFilePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Derived from the name of the defining file and the construct's id.\nIf the `NodejsFunction` is defined in `stack.ts` with `my-handler` as id\n(`new NodejsFunction(this, 'my-handler')`), the construct will look at `stack.my-handler.ts`\nand `stack.my-handler.js`.",
            "stability": "experimental",
            "summary": "Path to the entry file (JavaScript or TypeScript)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 24
          },
          "name": "entry",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "handler",
            "stability": "experimental",
            "summary": "The name of the exported handler in the entry file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 31
          },
          "name": "handler",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- `NODEJS_12_X` if `process.versions.node` >= '12.0.0',\n`NODEJS_10_X` otherwise.",
            "remarks": "Only runtimes of the Node.js family are\nsupported.",
            "stability": "experimental",
            "summary": "The runtime environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 40
          },
          "name": "runtime",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda.Runtime"
          }
        }
      ]
    }
  },
  "version": "1.93.0",
  "fingerprint": "OBvUa3C3FVRpW3izFvmsSWPLKzvbMuR5tlvDAyBidGI="
}
