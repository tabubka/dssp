{
  "author": {
    "email": "benisrae@amazon.com",
    "name": "Elad Ben-Israel",
    "roles": [
      "author"
    ]
  },
  "bin": {
    "projen": "bin/projen"
  },
  "bundled": {
    "@iarna/toml": "^2.2.5",
    "chalk": "^4.1.0",
    "decamelize": "^4.0.0",
    "fs-extra": "^9.0.1",
    "glob": "^7",
    "inquirer": "^7.3.3",
    "semver": "^7.3.2",
    "xmlbuilder2": "^2.4.0",
    "yaml": "^1.10.0",
    "yargs": "^16.2.0"
  },
  "description": "A new generation of project generators",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/projen/projen.git",
  "jsiiVersion": "1.24.0 (build b722f66)",
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "projen",
  "readme": {
    "markdown": "[![License](https://img.shields.io/badge/License-Apache%202.0-yellowgreen.svg)](https://opensource.org/licenses/Apache-2.0)\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-37-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/projen/projen)\n![Build](https://github.com/projen/projen/workflows/Build/badge.svg)\n![Release](https://github.com/projen/projen/workflows/Release/badge.svg)\n\n# projen\n\n![projen logo](/logo/projen.svg)\n\nDefine and maintain complex project configuration through code.\n\n> JOIN THE [#TemplatesAreEvil] MOVEMENT!\n\n[#TemplatesAreEvil]: https://twitter.com/search?q=%23TemplatesAreEvil\n\n*projen* synthesizes project configuration files such as `package.json`,\n`tsconfig.json`, `.gitignore`, GitHub Workflows, eslint, jest, etc from a\nwell-typed definition written in JavaScript.\n\nCheck out [this talk](https://youtu.be/SOWMPzXtTCw) about projen.\n\nAs opposed to existing templating/scaffolding tools, *projen* is not a one-off\ngenerator. Synthesized files should never be manually edited (in fact, projen\nenforces that). To modify your project setup, users interact with rich\nstrongly-typed class and execute `projen` to update their project configuration\nfiles.\n\n## Getting Started\n\nTo create a new project, run the following command and follow the instructions:\n\n```console\n$ mkdir my-project\n$ cd my-project\n$ git init\n$ npx projen new PROJECT-TYPE\nü§ñ Synthesizing project...\n...\n```\n\nCurrently supported project types (use `npx projen new` without a type for a\nlist):\n\n<!-- <macro exec=\"node ./scripts/readme-projects.js\"> -->\n* [awscdk-app-ts](https://github.com/projen/projen/blob/master/API.md#projen-awscdktypescriptapp) - AWS CDK app in TypeScript.\n* [awscdk-construct](https://github.com/projen/projen/blob/master/API.md#projen-awscdkconstructlibrary) - AWS CDK construct library project.\n* [cdk8s-construct](https://github.com/projen/projen/blob/master/API.md#projen-constructlibrarycdk8s) - CDK8s construct library project.\n* [java](https://github.com/projen/projen/blob/master/API.md#projen-java.javaproject) - Java project.\n* [jsii](https://github.com/projen/projen/blob/master/API.md#projen-jsiiproject) - Multi-language jsii library project.\n* [nextjs](https://github.com/projen/projen/blob/master/API.md#projen-web.nextjsproject) - Next.js project without TypeScript.\n* [nextjs-ts](https://github.com/projen/projen/blob/master/API.md#projen-web.nextjstypescriptproject) - Next.js project with TypeScript.\n* [node](https://github.com/projen/projen/blob/master/API.md#projen-nodeproject) - Node.js project.\n* [project](https://github.com/projen/projen/blob/master/API.md#projen-project) - Base project.\n* [python](https://github.com/projen/projen/blob/master/API.md#projen-python.pythonproject) - Python project.\n* [react](https://github.com/projen/projen/blob/master/API.md#projen-web.reactproject) - React project without TypeScript.\n* [react-ts](https://github.com/projen/projen/blob/master/API.md#projen-web.reacttypescriptproject) - React project with TypeScript.\n* [typescript](https://github.com/projen/projen/blob/master/API.md#projen-typescriptproject) - TypeScript project.\n* [typescript-app](https://github.com/projen/projen/blob/master/API.md#projen-typescriptappproject) - TypeScript app.\n<!-- </macro> -->\n\n> Use `npx projen new PROJECT-TYPE --help` to view a list of command line\n> switches that allows you to specify most project options during bootstrapping.\n> For example: `npx projen new jsii --author-name \"Jerry Berry\"`.\n\nThe `new` command will create a `.projenrc.js` file which looks like this for\n`jsii` projects:\n\n```js\nconst { JsiiProject } = require('projen');\n\nconst project = new JsiiProject({\n  authorAddress: \"elad.benisrael@gmail.com\",\n  authorName: \"Elad Ben-Israel\",\n  name: \"foobar\",\n  repository: \"https://github.com/eladn/foobar.git\",\n});\n\nproject.synth();\n```\n\nThis program instantiates the project type with minimal setup, and then calls\n`synth()` to synthesize the project files. By default, the `new` command will\nalso execute this program, which will result in a fully working project.\n\nOnce your project is created, you can configure your project by editing\n`.projenrc.js` and re-running `npx projen` to synthesize again.\n\n> The files generated by _projen_ are considered an \"implementation detail\" and\n> _projen_ protects them from being manually edited (most files are marked\n> read-only, and an \"anti tamper\" check is configured in the CI build workflow\n> to ensure that files are not updated during build).\n\nFor example, to setup PyPI publishing in `jsii` projects, you can use\n[`python option`](https://github.com/eladb/projen/blob/master/API.md#projen-jsiipythontarget):\n\n```js\nconst project = new JsiiProject({\n  // ...\n  python: {\n    distName: \"mydist\",\n    module: \"my_module\",\n  }\n});\n```\n\nRun:\n\n```shell\nnpx projen\n```\n\nAnd you'll notice that your `package.json` file now contains a `python` section in\nit's `jsii` config and the GitHub `release.yml` workflow includes a PyPI\npublishing step.\n\nWe recommend to put this in your shell profile, so you can simply run `pj` every\ntime you update `.projenrc.js`:\n\n```bash\nalias pj='npx projen'\n```\n\nMost projects support a `start` command which displays a menu of workflow\nactivities:\n\n```shell\n$ yarn start\n? Scripts: (Use arrow keys)\n\n  BUILD\n‚ùØ compile          Only compile\n  watch            Watch & compile in the background\n  build            Full release build (test+compile)\n\n  TEST\n  test             Run tests\n  test:watch       Run jest in watch mode\n  eslint           Runs eslint against the codebase\n\n  ...\n```\n\nThe `build` command is the same command that's executed in your CI builds. It\ntypically compiles, lints, tests and packages your module for distribution.\n\n## Features\n\nSome examples for features built-in to project types:\n\n* Fully synthesize `package.json`\n* Standard npm scripts like `compile`, `build`, `test`, `package`\n* eslint\n* Jest\n* jsii: compile, package, api compatibility checks, API.md\n* Bump & release scripts with CHANGELOG generation based on Conventional Commits\n* Automated PR builds\n* Automated releases to npm, maven, NuGet and PyPI\n* Mergify configuration\n* LICENSE file generation\n* gitignore + npmignore management\n* Node \"engines\" support with coupling to CI build environment and @types/node\n* Anti-tamper: CI builds will fail if a synthesized file is modified manually\n\n## API Reference\n\nSee [API Reference](./API.md) for API details.\n\nIn addition, several projen components and project types are explained with examples in [/docs](./docs) (currently a work in progress!).\n\n## Ecosystem\n\n_projen_ takes a \"batteries included\" approach and aims to offer dozens of different project types out of\nthe box (we are just getting started). Think `projen new react`, `projen new angular`, `projen new java-maven`,\n`projen new awscdk-typescript`, `projen new cdk8s-python` (nothing in projen is tied to javascript or npm!)...\n\nAdding new project types is as simple as submitting a pull request to this repo and exporting a class that\nextends `projen.Project` (or one of it's derivatives). Projen automatically discovers project types so your\ntype will immediately be available in `projen new`.\n\n### Projects in external modules\n\n_projen_ is bundled with many project types out of the box, but it can also work\nwith project types and components defined in external jsii modules (the reason\nwe need jsii is because projen uses the jsii metadata to discover project types\n& options in projen new).\n\nSay we have a module in npm called `projen-vuejs` which includes a single project\ntype for vue.js:\n\n```bash\n$ npx projen new --from projen-vuejs\n```\n\nIf the referenced module includes multiple project types, the type is required.\nSwitches can also be used to specify initial values based on the project type\nAPIs. You can also use any package syntax supported by [yarn\nadd](https://classic.yarnpkg.com/en/docs/cli/add#toc-adding-dependencies) like\n`projen-vuejs@1.2.3`, `file:/path/to/local/folder`,\n`git@github.com/awesome/projen-vuejs#1.2.3`, etc.\n\n```bash\n$ npx projen new --from projen-vuejs@^2 vuejs-ts --description \"my awesome vue project\"\n```\n\nUnder the hood, `projen new` will install the `projen-vuejs` module from npm\n(version 2.0.0 and above), discover the project types in it and bootstrap the\n`vuejs-ts` project type. It will assign the value `\"my awesome vue project\"` to\nthe `description` field. If you examine your `.projenrc.js` file, you'll see\nthat `projen-vuejs` is defined as a dev dependency:\n\n```javascript\nconst { VueJsProject } = require('projen-vuejs');\n\nconst project = new VueJsProject({\n  name: 'my-vuejs-sample',\n  description: \"my awesome vue project\",\n  // ...\n  devDeps: [\n    'projen-vuejs'\n  ]\n});\n\nproject.synth();\n```\n\n## Roadmap\n\nSee [Vision](./VISION.md).\n\n## Contributions\n\nContributions of all kinds are welcome! Check out our [contributor's\nguide](./CONTRIBUTING.md) and our [code of conduct](./CODE_OF_CONDUCT.md).\n\nFor a quick start, check out a development environment:\n\n```bash\n$ git clone git@github.com:projen/projen\n$ cd projen\n$ yarn\n$ yarn watch # compile in the background\n```\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"http://eladb.github.com/\"><img src=\"https://avatars3.githubusercontent.com/u/598796?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elad Ben-Israel</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=eladb\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://rybicki.io/\"><img src=\"https://avatars2.githubusercontent.com/u/5008987?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Christopher Rybicki</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=Chriscbr\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"http://p6m7g8.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/34295?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip M. Gollucci</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=pgollucci\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/hoegertn\"><img src=\"https://avatars2.githubusercontent.com/u/1287829?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Thorsten Hoeger</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=hoegertn\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kcwinner\"><img src=\"https://avatars3.githubusercontent.com/u/2728868?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenneth Winner</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=kcwinner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/JordanSinko\"><img src=\"https://avatars2.githubusercontent.com/u/10212966?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jordan Sinko</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=JordanSinko\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/misterjoshua\"><img src=\"https://avatars2.githubusercontent.com/u/644092?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Kellendonk</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=misterjoshua\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/andrestone\"><img src=\"https://avatars1.githubusercontent.com/u/7958086?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>andrestone</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=andrestone\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://pallares.io/\"><img src=\"https://avatars3.githubusercontent.com/u/1077520?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Cristian Pallar√©s</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=skyrpex\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jogold\"><img src=\"https://avatars2.githubusercontent.com/u/12623249?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jonathan Goldwasser</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=jogold\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"http://www.matthewbonig.com/\"><img src=\"https://avatars2.githubusercontent.com/u/1559437?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Bonig</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=mbonig\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/pahud\"><img src=\"https://avatars3.githubusercontent.com/u/278432?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Pahud Hsieh</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=pahud\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/adamelmore\"><img src=\"https://avatars2.githubusercontent.com/u/2363879?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Elmore</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=adamelmore\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/abelmokadem\"><img src=\"https://avatars0.githubusercontent.com/u/9717944?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ash</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=abelmokadem\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/jmourelos\"><img src=\"https://avatars3.githubusercontent.com/u/3878434?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jacob</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=jmourelos\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/bigkraig\"><img src=\"https://avatars1.githubusercontent.com/u/508403?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kraig Amador</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=bigkraig\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mmuller88\"><img src=\"https://avatars0.githubusercontent.com/u/18393842?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Martin Muller</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=mmuller88\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://tlakomy.com/\"><img src=\"https://avatars2.githubusercontent.com/u/16646517?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tomasz ≈Åakomy</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=tlakomy\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/john-tipper\"><img src=\"https://avatars2.githubusercontent.com/u/9730398?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>john-tipper</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=john-tipper\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/henrysachs\"><img src=\"https://avatars0.githubusercontent.com/u/17173951?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Henry Sachs</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=henrysachs\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/eganjs\"><img src=\"https://avatars3.githubusercontent.com/u/6639482?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Joseph Egan</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=eganjs\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://skorfmann.com/\"><img src=\"https://avatars1.githubusercontent.com/u/136789?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sebastian Korfmann</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=skorfmann\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"http://www.callant.net/\"><img src=\"https://avatars1.githubusercontent.com/u/5915843?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Bart Callant</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=bartcallant\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/campionfellin\"><img src=\"https://avatars3.githubusercontent.com/u/11984923?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Campion Fellin</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=campionfellin\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gradybarrett\"><img src=\"https://avatars1.githubusercontent.com/u/1140074?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Grady Barrett</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=gradybarrett\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/HassanMahmud\"><img src=\"https://avatars3.githubusercontent.com/u/58504381?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hassan Mahmud</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=HassanMahmud\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://dk.linkedin.com/in/hassanmahmud93\"><img src=\"https://avatars1.githubusercontent.com/u/7426703?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hassan Mahmud</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=hass123uk\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"http://joapy.com/\"><img src=\"https://avatars3.githubusercontent.com/u/325306?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jake Pearson</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=jakepearson\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/JeremyJonas\"><img src=\"https://avatars1.githubusercontent.com/u/464119?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Jonas</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=JeremyJonas\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://dev.to/martzcodes\"><img src=\"https://avatars1.githubusercontent.com/u/978362?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matt Martz</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=martzcodes\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fongie\"><img src=\"https://avatars1.githubusercontent.com/u/19932622?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Max K√∂rlinge</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=fongie\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://blog.neilkuan.dev/\"><img src=\"https://avatars2.githubusercontent.com/u/46012524?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Neil Kuan</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=guan840912\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://dynobase.dev/\"><img src=\"https://avatars3.githubusercontent.com/u/3391616?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rafal Wilinski</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=RafalWilinski\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://keybase.io/romainmuller\"><img src=\"https://avatars2.githubusercontent.com/u/411689?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Romain Marcadier</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=RomainMuller\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/thomasklinger1234\"><img src=\"https://avatars1.githubusercontent.com/u/39558817?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Thomas Klinger</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=thomasklinger1234\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/gwriss\"><img src=\"https://avatars2.githubusercontent.com/u/1842089?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=gwriss\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/flyingImer\"><img src=\"https://avatars0.githubusercontent.com/u/1973868?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>flyingImer</b></sub></a><br /><a href=\"https://github.com/projen/projen/commits?author=flyingImer\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## License\n\nDistributed under the [Apache-2.0](./LICENSE) license.\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/projen/projen.git"
  },
  "schema": "jsii/0.10.0",
  "submodules": {
    "projen.deps": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 39
      }
    },
    "projen.github": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 37
      }
    },
    "projen.java": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 40
      }
    },
    "projen.python": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 41
      }
    },
    "projen.tasks": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 35
      }
    },
    "projen.vscode": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 38
      }
    },
    "projen.web": {
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 36
      }
    }
  },
  "targets": {
    "java": {
      "maven": {
        "artifactId": "projen",
        "groupId": "com.github.eladb"
      },
      "package": "org.projen"
    },
    "js": {
      "npm": "projen"
    },
    "python": {
      "distName": "projen",
      "module": "projen"
    }
  },
  "types": {
    "projen.AutoRelease": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Automatic bump modes."
      },
      "fqn": "projen.AutoRelease",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 274
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Automatically bump & release a new version for every commit to \"main\"."
          },
          "name": "EVERY_COMMIT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Automatically bump & release a new version on a daily basis."
          },
          "name": "DAILY"
        }
      ],
      "name": "AutoRelease"
    },
    "projen.AwsCdkConstructLibrary": {
      "assembly": "projen",
      "base": "projen.ConstructLibrary",
      "docs": {
        "custom": {
          "pjid": "awscdk-construct"
        },
        "remarks": "A multi-language (jsii) construct library which vends constructs designed to\nuse within the AWS CDK with a friendly workflow and automatic publishing to\nthe construct catalog.\n\n```ts\nconst project = new ConstructLibraryAws({\n   name: 'cdk-watchful',\n   description: 'Watching your CDK apps since 2019',\n   jsiiVersion: Semver.caret('1.7.0'),\n   authorName: 'Elad Ben-Israel',\n   authorEmail: 'elad.benisrael@gmail.com',\n   repository: 'https://github.com/eladb/cdk-watchful.git',\n   keywords: [\n     \"cloudwatch\",\n     \"monitoring\"\n   ],\n\n   catalog: {\n     twitter: 'emeshbi'\n   },\n\n   // creates PRs for projen upgrades\n   projenUpgradeSecret: 'PROJEN_GITHUB_TOKEN',\n\n   cdkVersion: '1.54.0',\n   cdkDependencies: [\n     \"@aws-cdk/aws-apigateway\",\n     \"@aws-cdk/aws-cloudwatch\",\n     \"@aws-cdk/aws-cloudwatch-actions\",\n     \"@aws-cdk/aws-dynamodb\",\n     \"@aws-cdk/aws-ecs\",\n     \"@aws-cdk/aws-ecs-patterns\",\n     \"@aws-cdk/aws-elasticloadbalancingv2\",\n     \"@aws-cdk/aws-events\",\n     \"@aws-cdk/aws-events-targets\",\n     \"@aws-cdk/aws-lambda\",\n     \"@aws-cdk/aws-rds\",\n     \"@aws-cdk/aws-sns\",\n     \"@aws-cdk/aws-sns-subscriptions\",\n     \"@aws-cdk/aws-sqs\",\n     \"@aws-cdk/core\"\n   ],\n   devDependencies: {\n     \"aws-sdk\": Semver.caret(\"2.708.0\")\n   },\n\n   // jsii publishing\n\n   java: {\n     javaPackage: 'com.github.eladb.watchful',\n     mavenGroupId: 'com.github.eladb',\n     mavenArtifactId: 'cdk-watchful'\n   },\n   python: {\n     distName: 'cdk-watchful',\n     module: 'cdk_watchful'\n   }\n});\n\nproject.synth();\n```",
        "stability": "experimental",
        "summary": "AWS CDK construct library project."
      },
      "fqn": "projen.AwsCdkConstructLibrary",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/awscdk-construct.ts",
          "line": 133
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.AwsCdkConstructLibraryOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 122
      },
      "methods": [
        {
          "docs": {
            "remarks": "Modules are currently by default added with a caret CDK version both as \"dependencies\"\nand \"peerDependencies\". This is because currently npm would not\nautomatically install peer dependencies that are not declared as concerete\ndependencies by the consumer, so this is a little npm \"hack\" so that\nconsumers will not need to depend on them directly if they don't interact\nwith them.\nSee `cdkDependenciesAsDeps` for changing the default behavior.",
            "stability": "experimental",
            "summary": "Adds CDK modules as runtime dependencies."
          },
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 167
          },
          "name": "addCdkDependencies",
          "parameters": [
            {
              "docs": {
                "summary": "names of cdk modules (e.g. `@aws-cdk/aws-lambda`)."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds CDK modules as test dependencies."
          },
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 183
          },
          "name": "addCdkTestDependencies",
          "parameters": [
            {
              "docs": {
                "summary": "names of cdk modules (e.g. `@aws-cdk/aws-lambda`)."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "AwsCdkConstructLibrary",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Whether CDK dependencies are added as normal dependencies (and peer dependencies)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 131
          },
          "name": "cdkDependenciesAsDeps",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The target CDK version for this library."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 126
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.AwsCdkConstructLibraryOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for the construct-lib-aws project."
      },
      "fqn": "projen.AwsCdkConstructLibraryOptions",
      "interfaces": [
        "projen.ConstructLibraryOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 6
      },
      "name": "AwsCdkConstructLibraryOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.73.0\"",
            "stability": "experimental",
            "summary": "Minimum target version this library is tested against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 12
          },
          "name": "cdkVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Install the @aws-cdk/assert library?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 47
          },
          "name": "cdkAssert",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Which AWS CDK modules (those that start with \"@aws-cdk/\") does this library require when consumed?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 28
          },
          "name": "cdkDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This is to ensure that downstream consumers actually have your CDK dependencies installed\nwhen using npm < 7 or yarn, where peer dependencies are not automatically installed.\nIf this is disabled, `cdkDependencies` will be added to `devDependencies` to ensure\nthey are present during development.",
            "stability": "experimental",
            "summary": "If this is enabled (default), all modules declared in `cdkDependencies` will be also added as normal `dependencies` (as well as `peerDependencies`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 41
          },
          "name": "cdkDependenciesAsDeps",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "AWS CDK modules required for testing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 52
          },
          "name": "cdkTestDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "You can use this to prevent yarn to mix versions for your CDK dependencies and to prevent auto-updates.\nIf you use experimental features this will let you define the moment you include breaking changes.",
            "stability": "experimental",
            "summary": "Use pinned version instead of caret version for CDK."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-construct.ts",
            "line": 22
          },
          "name": "cdkVersionPinning",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.AwsCdkTypeScriptApp": {
      "assembly": "projen",
      "base": "projen.TypeScriptAppProject",
      "docs": {
        "custom": {
          "pjid": "awscdk-app-ts"
        },
        "stability": "experimental",
        "summary": "AWS CDK app in TypeScript."
      },
      "fqn": "projen.AwsCdkTypeScriptApp",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/awscdk-app-ts.ts",
          "line": 89
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.AwsCdkTypeScriptAppOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/awscdk-app-ts.ts",
        "line": 73
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an AWS CDK module dependencies."
          },
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 186
          },
          "name": "addCdkDependency",
          "parameters": [
            {
              "docs": {
                "summary": "The list of modules to depend on."
              },
              "name": "modules",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "AwsCdkTypeScriptApp",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The CDK app entrypoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 87
          },
          "name": "appEntrypoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Contents of `cdk.json`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 82
          },
          "name": "cdkConfig",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The CDK version this app is using."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 77
          },
          "name": "cdkVersion",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.AwsCdkTypeScriptAppOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.AwsCdkTypeScriptAppOptions",
      "interfaces": [
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/awscdk-app-ts.ts",
        "line": 22
      },
      "name": "AwsCdkTypeScriptAppOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.73.0\"",
            "stability": "experimental",
            "summary": "AWS CDK version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 28
          },
          "name": "cdkVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"main.ts\"",
            "stability": "experimental",
            "summary": "The CDK app's entrypoint (relative to the source directory, which is \"src\" by default)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 56
          },
          "name": "appEntrypoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Which AWS CDK modules (those that start with \"@aws-cdk/\") this app uses."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 43
          },
          "name": "cdkDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "You can use this to prevent yarn to mix versions for your CDK dependencies and to prevent auto-updates.\nIf you use experimental features this will let you define the moment you include breaking changes.",
            "stability": "experimental",
            "summary": "Use pinned version instead of caret version for CDK."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 38
          },
          "name": "cdkVersionPinning",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional context to include in `cdk.json`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 48
          },
          "name": "context",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CdkApprovalLevel.BROADENING",
            "stability": "experimental",
            "summary": "To protect you against unintended changes that affect your security posture, the AWS CDK Toolkit prompts you to approve security-related changes before deploying them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/awscdk-app-ts.ts",
            "line": 64
          },
          "name": "requireApproval",
          "optional": true,
          "type": {
            "fqn": "projen.CdkApprovalLevel"
          }
        }
      ]
    },
    "projen.Catalog": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Catalog",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/construct-lib.ts",
        "line": 24
      },
      "name": "Catalog",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Should we announce new versions?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/construct-lib.ts",
            "line": 34
          },
          "name": "announce",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Twitter account to @mention in announcement tweet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/construct-lib.ts",
            "line": 28
          },
          "name": "twitter",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.CdkApprovalLevel": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.CdkApprovalLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/awscdk-app-ts.ts",
        "line": 8
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Approval is never required."
          },
          "name": "NEVER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Requires approval on any IAM or security-group-related change."
          },
          "name": "ANY_CHANGE"
        },
        {
          "docs": {
            "remarks": "removals don't require approval",
            "stability": "experimental",
            "summary": "Requires approval when IAM statements or traffic rules are added;"
          },
          "name": "BROADENING"
        }
      ],
      "name": "CdkApprovalLevel"
    },
    "projen.Component": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a project component."
      },
      "fqn": "projen.Component",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/component.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/component.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after synthesis."
          },
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 24
          },
          "name": "postSynthesize"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called before synthesis."
          },
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 14
          },
          "name": "preSynthesize"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes files to the project output directory."
          },
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 19
          },
          "name": "synthesize"
        }
      ],
      "name": "Component",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/component.ts",
            "line": 7
          },
          "name": "project",
          "type": {
            "fqn": "projen.Project"
          }
        }
      ]
    },
    "projen.ConstructLibrary": {
      "abstract": true,
      "assembly": "projen",
      "base": "projen.JsiiProject",
      "docs": {
        "stability": "experimental",
        "summary": "A multi-language library for CDK constructs."
      },
      "fqn": "projen.ConstructLibrary",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/construct-lib.ts",
          "line": 41
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.ConstructLibraryOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/construct-lib.ts",
        "line": 40
      },
      "name": "ConstructLibrary"
    },
    "projen.ConstructLibraryAws": {
      "assembly": "projen",
      "base": "projen.AwsCdkConstructLibrary",
      "docs": {
        "deprecated": "use `AwsCdkConstructLibrary`",
        "stability": "deprecated"
      },
      "fqn": "projen.ConstructLibraryAws",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/awscdk-construct.ts",
          "line": 133
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.AwsCdkConstructLibraryOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 196
      },
      "name": "ConstructLibraryAws"
    },
    "projen.ConstructLibraryAwsOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "deprecated": "use `AwsCdkConstructLibraryOptions`",
        "stability": "deprecated"
      },
      "fqn": "projen.ConstructLibraryAwsOptions",
      "interfaces": [
        "projen.AwsCdkConstructLibraryOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/awscdk-construct.ts",
        "line": 193
      },
      "name": "ConstructLibraryAwsOptions"
    },
    "projen.ConstructLibraryCdk8s": {
      "assembly": "projen",
      "base": "projen.ConstructLibrary",
      "docs": {
        "custom": {
          "pjid": "cdk8s-construct"
        },
        "remarks": "A multi-language (jsii) construct library which vends constructs designed to\nuse within the CDK for Kubernetes (CDK8s), with a friendly workflow and\nautomatic publishing to the construct catalog.",
        "stability": "experimental",
        "summary": "CDK8s construct library project."
      },
      "fqn": "projen.ConstructLibraryCdk8s",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/cdk8s-construct.ts",
          "line": 22
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.ConstructLibraryCdk8sOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/cdk8s-construct.ts",
        "line": 21
      },
      "name": "ConstructLibraryCdk8s"
    },
    "projen.ConstructLibraryCdk8sOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.ConstructLibraryCdk8sOptions",
      "interfaces": [
        "projen.ConstructLibraryOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/cdk8s-construct.ts",
        "line": 3
      },
      "name": "ConstructLibraryCdk8sOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.0.0-beta.3\"",
            "stability": "experimental",
            "summary": "Minimum target version this library is tested against."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/cdk8s-construct.ts",
            "line": 9
          },
          "name": "cdk8sVersion",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.ConstructLibraryOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.ConstructLibraryOptions",
      "interfaces": [
        "projen.JsiiProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/construct-lib.ts",
        "line": 3
      },
      "name": "ConstructLibraryOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- new version will be announced",
            "remarks": "https://awscdk.io/packages/[@SCOPE/]PACKAGE@VERSION\n\nThe catalog will also post a tweet to https://twitter.com/awscdkio with the\npackage name, description and the above link. You can disable these tweets\nthrough `{ announce: false }`.\n\nYou can also add a Twitter handle through `{ twitter: 'xx' }` which will be\nmentioned in the tweet.",
            "see": "https://github.com/construct-catalog/catalog",
            "stability": "experimental",
            "summary": "Libraries will be picked up by the construct catalog when they are published to npm as jsii modules and will be published under:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/construct-lib.ts",
            "line": 21
          },
          "name": "catalog",
          "optional": true,
          "type": {
            "fqn": "projen.Catalog"
          }
        }
      ]
    },
    "projen.CoverageThreshold": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.CoverageThreshold",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 517
      },
      "name": "CoverageThreshold",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 518
          },
          "name": "branches",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 519
          },
          "name": "functions",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 520
          },
          "name": "lines",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 521
          },
          "name": "statements",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "projen.DevEnvironmentDockerImage": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Options for specifying the Docker image of the container."
      },
      "fqn": "projen.DevEnvironmentDockerImage",
      "kind": "class",
      "locationInModule": {
        "filename": "src/dev-env.ts",
        "line": 32
      },
      "methods": [
        {
          "docs": {
            "example": "'.gitpod.Docker'",
            "stability": "experimental",
            "summary": "The relative path of a Dockerfile that defines the container contents."
          },
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 47
          },
          "name": "fromFile",
          "parameters": [
            {
              "docs": {
                "summary": "a relative path."
              },
              "name": "dockerFile",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DevEnvironmentDockerImage"
            }
          },
          "static": true
        },
        {
          "docs": {
            "example": "'ubuntu:latest'",
            "stability": "experimental",
            "summary": "A publicly available Docker image."
          },
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 38
          },
          "name": "fromImage",
          "parameters": [
            {
              "docs": {
                "summary": "a Docker image."
              },
              "name": "image",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DevEnvironmentDockerImage"
            }
          },
          "static": true
        }
      ],
      "name": "DevEnvironmentDockerImage",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The relative path of a Dockerfile that defines the container contents."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 59
          },
          "name": "dockerFile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A publicly available Docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 54
          },
          "name": "image",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.DevEnvironmentOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Base options for configuring a container-based development environemnt."
      },
      "fqn": "projen.DevEnvironmentOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/dev-env.ts",
        "line": 6
      },
      "name": "DevEnvironmentOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A Docker image or Dockerfile for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 10
          },
          "name": "dockerImage",
          "optional": true,
          "type": {
            "fqn": "projen.DevEnvironmentDockerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An array of ports that should be exposed from the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 20
          },
          "name": "ports",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An array of tasks that should be run when the container starts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 15
          },
          "name": "tasks",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.Task"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An array of extension IDs that specify the extensions that should be installed inside the container when it is created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 26
          },
          "name": "vscodeExtensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.DockerCompose": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Create a docker-compose YAML file."
      },
      "fqn": "projen.DockerCompose",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/docker-compose.ts",
          "line": 113
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "projen.DockerComposeProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 43
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a bind volume that binds a host path to the target path in the container."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 75
          },
          "name": "bindVolume",
          "parameters": [
            {
              "docs": {
                "summary": "Host path name."
              },
              "name": "sourcePath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Target path name."
              },
              "name": "targetPath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.IDockerComposeVolumeBinding"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "If you use this\nnamed volume in several services, the volume will be shared. In this\ncase, the volume configuration of the first-provided options are used.",
            "stability": "experimental",
            "summary": "Create a named volume and mount it to the target path."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 96
          },
          "name": "namedVolume",
          "parameters": [
            {
              "docs": {
                "summary": "Name of the volume."
              },
              "name": "volumeName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Target path."
              },
              "name": "targetPath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "volume configuration (default: docker compose defaults)."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.DockerComposeVolumeConfig"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.IDockerComposeVolumeBinding"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a port mapping."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 59
          },
          "name": "portMapping",
          "parameters": [
            {
              "docs": {
                "summary": "Published port number."
              },
              "name": "publishedPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Container's port number."
              },
              "name": "targetPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Port mapping options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.DockerComposePortMappingOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DockerComposeServicePort"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Depends on a service name."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 47
          },
          "name": "serviceName",
          "parameters": [
            {
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.IDockerComposeServiceName"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a service to the docker-compose file."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 141
          },
          "name": "addService",
          "parameters": [
            {
              "docs": {
                "summary": "name of the service."
              },
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "a service description."
              },
              "name": "description",
              "type": {
                "fqn": "projen.DockerComposeServiceDescription"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DockerComposeService"
            }
          }
        }
      ],
      "name": "DockerCompose"
    },
    "projen.DockerComposeBuild": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Build arguments for creating a docker image."
      },
      "fqn": "projen.DockerComposeBuild",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 359
      },
      "name": "DockerComposeBuild",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Docker build context directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 363
          },
          "name": "context",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none are provided",
            "stability": "experimental",
            "summary": "Build args."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 375
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"Dockerfile\"",
            "stability": "experimental",
            "summary": "A dockerfile to build from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 369
          },
          "name": "dockerfile",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.DockerComposePortMappingOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for port mappings."
      },
      "fqn": "projen.DockerComposePortMappingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 32
      },
      "name": "DockerComposePortMappingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "DockerComposeProtocol.TCP",
            "stability": "experimental",
            "summary": "Port mapping protocol."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 37
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "projen.DockerComposeProtocol"
          }
        }
      ]
    },
    "projen.DockerComposeProps": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for DockerCompose."
      },
      "fqn": "projen.DockerComposeProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 9
      },
      "name": "DockerComposeProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no name is added",
            "example": "'myname' yields 'docker-compose.myname.yml'",
            "stability": "experimental",
            "summary": "A name to add to the docker-compose.yml filename."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 15
          },
          "name": "nameSuffix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3.3",
            "stability": "experimental",
            "summary": "Docker Compose schema version do be used."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 21
          },
          "name": "schemaVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Service descriptions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 26
          },
          "name": "services",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.DockerComposeServiceDescription"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.DockerComposeProtocol": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Network protocol for port mapping."
      },
      "fqn": "projen.DockerComposeProtocol",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 344
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "TCP protocol."
          },
          "name": "TCP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "UDP protocol."
          },
          "name": "UDP"
        }
      ],
      "name": "DockerComposeProtocol"
    },
    "projen.DockerComposeService": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "A docker-compose service."
      },
      "fqn": "projen.DockerComposeService",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/docker-compose.ts",
          "line": 264
        },
        "parameters": [
          {
            "name": "serviceName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "serviceDescription",
            "type": {
              "fqn": "projen.DockerComposeServiceDescription"
            }
          }
        ]
      },
      "interfaces": [
        "projen.IDockerComposeServiceName"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 223
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make the service depend on another service."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 303
          },
          "name": "addDependsOn",
          "parameters": [
            {
              "name": "serviceName",
              "type": {
                "fqn": "projen.IDockerComposeServiceName"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an environment variable."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 295
          },
          "name": "addEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "environment variable name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "value of the environment variable."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a port mapping."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 286
          },
          "name": "addPort",
          "parameters": [
            {
              "docs": {
                "summary": "Published port number."
              },
              "name": "publishedPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Container's port number."
              },
              "name": "targetPort",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "summary": "Port mapping options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.DockerComposePortMappingOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a volume to the service."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 311
          },
          "name": "addVolume",
          "parameters": [
            {
              "name": "volume",
              "type": {
                "fqn": "projen.IDockerComposeVolumeBinding"
              }
            }
          ]
        }
      ],
      "name": "DockerComposeService",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Other services that this service depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 247
          },
          "name": "dependsOn",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeServiceName"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 262
          },
          "name": "environment",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Published ports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 257
          },
          "name": "ports",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.DockerComposeServicePort"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 227
          },
          "name": "serviceName",
          "overrides": "projen.IDockerComposeServiceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Volumes mounted in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 252
          },
          "name": "volumes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeVolumeBinding"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Command to run in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 242
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 232
          },
          "name": "image",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Docker image build instructions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 237
          },
          "name": "imageBuild",
          "optional": true,
          "type": {
            "fqn": "projen.DockerComposeBuild"
          }
        }
      ]
    },
    "projen.DockerComposeServiceDescription": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Description of a docker-compose.yml service."
      },
      "fqn": "projen.DockerComposeServiceDescription",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 172
      },
      "name": "DockerComposeServiceDescription",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- use the container's default command",
            "stability": "experimental",
            "summary": "Provide a command to the docker container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 191
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no dependencies",
            "stability": "experimental",
            "summary": "Names of other services this service depends on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 197
          },
          "name": "dependsOn",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeServiceName"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables are provided",
            "stability": "experimental",
            "summary": "Add environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 217
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note: You must specify either `build` or `image` key.",
            "see": "imageBuild",
            "stability": "experimental",
            "summary": "Use a docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 178
          },
          "name": "image",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Note: You must specify either `imageBuild` or `image` key.",
            "see": "image",
            "stability": "experimental",
            "summary": "Build a docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 185
          },
          "name": "imageBuild",
          "optional": true,
          "type": {
            "fqn": "projen.DockerComposeBuild"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no ports are mapped",
            "stability": "experimental",
            "summary": "Map some ports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 211
          },
          "name": "ports",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.DockerComposeServicePort"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Use one of the following to create volumes:",
            "see": "DockerCompose.namedVolume() to create & mount a named volume",
            "stability": "experimental",
            "summary": "Mount some volumes into the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 205
          },
          "name": "volumes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.IDockerComposeVolumeBinding"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.DockerComposeServicePort": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A service port mapping."
      },
      "fqn": "projen.DockerComposeServicePort",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 319
      },
      "name": "DockerComposeServicePort",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Port mapping mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 338
          },
          "name": "mode",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Network protocol."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 333
          },
          "name": "protocol",
          "type": {
            "fqn": "projen.DockerComposeProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Published port number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 323
          },
          "name": "published",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Target port number."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 328
          },
          "name": "target",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "projen.DockerComposeVolumeConfig": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Volume configuration."
      },
      "fqn": "projen.DockerComposeVolumeConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 381
      },
      "name": "DockerComposeVolumeConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- value is not provided",
            "stability": "experimental",
            "summary": "Driver to use for the volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 386
          },
          "name": "driver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Options to provide to the driver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 391
          },
          "name": "driverOpts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- unset, indicating that docker-compose creates the volume",
            "stability": "experimental",
            "summary": "Set to true to indicate that the volume is externally created."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 397
          },
          "name": "external",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- unset, indicating that docker-compose creates volumes as usual",
            "stability": "experimental",
            "summary": "Name of the volume for when the volume name isn't going to work in YAML."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 403
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.DockerComposeVolumeMount": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Service volume mounting information."
      },
      "fqn": "projen.DockerComposeVolumeMount",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 434
      },
      "name": "DockerComposeVolumeMount",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Volume source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 443
          },
          "name": "source",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Volume target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 448
          },
          "name": "target",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Type of volume."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 438
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Eslint": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Eslint",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/eslint.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.EslintOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/eslint.ts",
        "line": 62
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Do not lint these files."
          },
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 309
          },
          "name": "addIgnorePattern",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an eslint override."
          },
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 302
          },
          "name": "addOverride",
          "parameters": [
            {
              "name": "override",
              "type": {
                "fqn": "projen.EslintOverride"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add an eslint rule."
          },
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 293
          },
          "name": "addRules",
          "parameters": [
            {
              "name": "rules",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        }
      ],
      "name": "Eslint",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Direct access to the eslint configuration (escape hatch)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 76
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "File patterns that should not be linted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 81
          },
          "name": "ignorePatterns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "eslint overrides."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 71
          },
          "name": "overrides",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.EslintOverride"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "eslint rules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 66
          },
          "name": "rules",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.EslintOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.EslintOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/eslint.ts",
        "line": 7
      },
      "name": "EslintOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Directories with source files to lint (e.g. [ \"src\" ])."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 17
          },
          "name": "dirs",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "These\nsources are linted but may also import packages from `devDependencies`.",
            "stability": "experimental",
            "summary": "Directories with source files that include tests and build tools."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 24
          },
          "name": "devdirs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[\".ts\"]",
            "stability": "experimental",
            "summary": "File types that should be linted (e.g. [ \".js\", \".ts\" ])."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 30
          },
          "name": "fileExtensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ '*.js', '*.d.ts', 'node_modules/', '*.generated.ts', 'coverage' ]",
            "stability": "experimental",
            "summary": "List of file patterns that should not be linted, using the same syntax as .gitignore patterns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 38
          },
          "name": "ignorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Should we lint .projenrc.js."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 44
          },
          "name": "lintProjenRc",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"./tsconfig.json\"",
            "stability": "experimental",
            "summary": "Path to `tsconfig.json` which should be used by eslint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 12
          },
          "name": "tsconfigPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.EslintOverride": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "eslint rules override."
      },
      "fqn": "projen.EslintOverride",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/eslint.ts",
        "line": 50
      },
      "name": "EslintOverride",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Files or file patterns on which to apply the override."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 54
          },
          "name": "files",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The overriden rules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/eslint.ts",
            "line": 59
          },
          "name": "rules",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.FileBase": {
      "abstract": true,
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.FileBase",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/file.ts",
          "line": 66
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.FileBaseOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 39
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Writes the file to the project's output directory."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 109
          },
          "name": "synthesize",
          "overrides": "projen.Component"
        },
        {
          "abstract": true,
          "docs": {
            "returns": "the content to synthesize or undefined to skip the file",
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 104
          },
          "name": "synthesizeContent",
          "parameters": [
            {
              "docs": {
                "summary": "Call `resolver.resolve(obj)` on any objects in order to resolve token functions."
              },
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "FileBase",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "This marker is used to prune these files before synthesis.",
            "stability": "experimental",
            "summary": "The marker to embed in files in order to identify them as projen files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 44
          },
          "name": "PROJEN_MARKER",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The absolute path of this file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 64
          },
          "name": "absolutePath",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The file path, relative to the project root."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 49
          },
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if the file should be marked as executable."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 59
          },
          "name": "executable",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if the file should be read-only or read-write."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 54
          },
          "name": "readonly",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.FileBaseOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.FileBaseOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 8
      },
      "name": "FileBaseOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "By\ndefault, all generated files are committed and anti-tamper is used to\nprotect against manual modifications.",
            "stability": "experimental",
            "summary": "Indicates whether this file should be committed to git or ignored."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 16
          },
          "name": "committed",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Update the project's .gitignore file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 22
          },
          "name": "editGitignore",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether the generated file should be marked as executable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 36
          },
          "name": "executable",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Whether the generated file should be readonly."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 29
          },
          "name": "readonly",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Gitpod": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "The Gitpod component which emits .gitpod.yml."
      },
      "fqn": "projen.Gitpod",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/gitpod.ts",
          "line": 283
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.GitpodOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.IDevEnvironment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 271
      },
      "methods": [
        {
          "docs": {
            "remarks": "By default, all tasks will be run in parallel. To run tasks in sequence,\ncreate a new `Task` and set the other tasks as subtasks.",
            "stability": "experimental",
            "summary": "Add a task with more granular options."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 354
          },
          "name": "addCustomTask",
          "parameters": [
            {
              "docs": {
                "summary": "The task parameters."
              },
              "name": "options",
              "type": {
                "fqn": "projen.GitpodTask"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a custom Docker image or Dockerfile for the container."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 316
          },
          "name": "addDockerImage",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The Docker image."
              },
              "name": "image",
              "type": {
                "fqn": "projen.DevEnvironmentDockerImage"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add ports that should be exposed (forwarded) from the container."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 371
          },
          "name": "addPorts",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The new ports."
              },
              "name": "ports",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a prebuilds configuration for the Gitpod App."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 342
          },
          "name": "addPrebuilds",
          "parameters": [
            {
              "docs": {
                "summary": "The configuration."
              },
              "name": "config",
              "type": {
                "fqn": "projen.GitpodPrebuilds"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "By default, all tasks will be run in parallel. To run tasks in sequence,\ncreate a new `Task` and specify the other tasks as subtasks.",
            "stability": "experimental",
            "summary": "Add tasks to run when gitpod starts."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 331
          },
          "name": "addTasks",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The new tasks."
              },
              "name": "tasks",
              "type": {
                "fqn": "projen.tasks.Task"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "example": "'scala-lang.scala@0.3.9:O5XmjwY5Gz+0oDZAmqneJw=='",
            "remarks": "These must be in the format defined in the Open VSX registry.",
            "see": "https://www.gitpod.io/docs/vscode-extensions/",
            "stability": "experimental",
            "summary": "Add a list of VSCode extensions that should be automatically installed in the container."
          },
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 385
          },
          "name": "addVscodeExtensions",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The extension IDs."
              },
              "name": "extensions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "Gitpod",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Direct access to the gitpod configuration (escape hatch)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 281
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.GitpodOnOpen": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "What to do when a service on a port is detected."
      },
      "fqn": "projen.GitpodOnOpen",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 131
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Open a new browser tab."
          },
          "name": "OPEN_BROWSER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Open a preview on the right side of the IDE."
          },
          "name": "OPEN_PREVIEW"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Show a notification asking the user what to do (default)."
          },
          "name": "NOTIFY"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Do nothing."
          },
          "name": "IGNORE"
        }
      ],
      "name": "GitpodOnOpen"
    },
    "projen.GitpodOpenIn": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Configure where in the IDE the terminal should be opened."
      },
      "fqn": "projen.GitpodOpenIn",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 52
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the bottom panel (default)."
          },
          "name": "BOTTOM"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the left panel."
          },
          "name": "LEFT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the right panel."
          },
          "name": "RIGHT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the main editor area."
          },
          "name": "MAIN"
        }
      ],
      "name": "GitpodOpenIn"
    },
    "projen.GitpodOpenMode": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Configure how the terminal should be opened relative to the previous task."
      },
      "fqn": "projen.GitpodOpenMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 22
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Opens in the same tab group right after the previous tab."
          },
          "name": "TAB_AFTER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Opens in the same tab group left before the previous tab."
          },
          "name": "TAB_BEFORE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the right."
          },
          "name": "SPLIT_RIGHT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the left."
          },
          "name": "SPLIT_LEFT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the top."
          },
          "name": "SPLIT_TOP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Splits and adds the terminal to the bottom."
          },
          "name": "SPLIT_BOTTOM"
        }
      ],
      "name": "GitpodOpenMode"
    },
    "projen.GitpodOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "By default, Gitpod uses the 'gitpod/workspace-full' docker image.",
        "see": "https://github.com/gitpod-io/workspace-images/blob/master/full/Dockerfile\n\nBy default, all tasks will be run in parallel. To run the tasks in sequence,\ncreate a new task and specify the other tasks as subtasks.",
        "stability": "experimental",
        "summary": "Constructor options for the Gitpod component."
      },
      "fqn": "projen.GitpodOptions",
      "interfaces": [
        "projen.DevEnvironmentOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 258
      },
      "name": "GitpodOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "Optional Gitpod's Github App integration for prebuilds If this is not set and Gitpod's Github App is installed, then Gitpod will apply these defaults: https://www.gitpod.io/docs/prebuilds/#configure-the-github-app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 265
          },
          "name": "prebuilds",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodPrebuilds"
          }
        }
      ]
    },
    "projen.GitpodPort": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for an exposed port on Gitpod."
      },
      "fqn": "projen.GitpodPort",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 171
      },
      "name": "GitpodPort",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "GitpodOnOpen.NOTIFY",
            "stability": "experimental",
            "summary": "What to do when a service on a port is detected."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 184
          },
          "name": "onOpen",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodOnOpen"
          }
        },
        {
          "abstract": true,
          "docs": {
            "example": "\"8080\"",
            "stability": "experimental",
            "summary": "A port that should be exposed (forwarded) from the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 177
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GitpodPortVisibility.PUBLIC",
            "stability": "experimental",
            "summary": "Whether the port visibility should be private or public."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 191
          },
          "name": "visibility",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodPortVisibility"
          }
        }
      ]
    },
    "projen.GitpodPortVisibility": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Whether the port visibility should be private or public."
      },
      "fqn": "projen.GitpodPortVisibility",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 156
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows everyone with the port URL to access the port (default)."
          },
          "name": "PUBLIC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Only allows users with workspace access to access the port."
          },
          "name": "PRIVATE"
        }
      ],
      "name": "GitpodPortVisibility"
    },
    "projen.GitpodPrebuilds": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "Currently only GitHub is supported.",
        "see": "https://www.gitpod.io/docs/prebuilds/",
        "stability": "experimental",
        "summary": "Configure the Gitpod App for prebuilds."
      },
      "fqn": "projen.GitpodPrebuilds",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 199
      },
      "name": "GitpodPrebuilds",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Add a \"Review in Gitpod\" button to the pull request's description."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 240
          },
          "name": "addBadge",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Add a check to pull requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 228
          },
          "name": "addCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Add a \"Review in Gitpod\" button as a comment to pull requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 234
          },
          "name": "addComment",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Add a label once the prebuild is ready to pull requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 246
          },
          "name": "addLabel",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Enable for all branches in this repo."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 210
          },
          "name": "branches",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Enable for the master/default branch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 204
          },
          "name": "master",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Enable for pull requests coming from this repo."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 216
          },
          "name": "pullRequests",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Enable for pull requests coming from forks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 222
          },
          "name": "pullRequestsFromForks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.GitpodTask": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "Start Mode         | Execution\nFresh Workspace    | before && init && command\nRestart Workspace  | before && command\nSnapshot           | before && command\nPrebuild           | before && init && prebuild",
        "stability": "experimental",
        "summary": "Configure options for a task to be run when opening a Gitpod workspace (e.g. running tests, or starting a dev server)."
      },
      "fqn": "projen.GitpodTask",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/gitpod.ts",
        "line": 81
      },
      "name": "GitpodTask",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The shell command to run",
            "stability": "experimental",
            "summary": "Required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 85
          },
          "name": "command",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "",
            "stability": "experimental",
            "summary": "In case you need to run something even before init, that is a requirement for both init and command, you can use the before property."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 110
          },
          "name": "before",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "",
            "remarks": "Such tasks are usually builds or downloading\ndependencies. Anything you only want to do once but not when you restart a workspace or start a snapshot.",
            "stability": "experimental",
            "summary": "The init property can be used to specify shell commands that should only be executed after a workspace was freshly cloned and needs to be initialized somehow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 118
          },
          "name": "init",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- task names are omitted when blank",
            "stability": "experimental",
            "summary": "A name for this task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 91
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GitpodOpenIn.BOTTOM",
            "stability": "experimental",
            "summary": "You can configure where in the IDE the terminal should be opened."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 103
          },
          "name": "openIn",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodOpenIn"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "GitpodOpenMode.TAB_AFTER",
            "stability": "experimental",
            "summary": "You can configure how the terminal should be opened relative to the previous task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 97
          },
          "name": "openMode",
          "optional": true,
          "type": {
            "fqn": "projen.GitpodOpenMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "",
            "remarks": "It is meant to run additional long running\nprocesses that could be useful, e.g. running test suites.",
            "stability": "experimental",
            "summary": "The optional prebuild command will be executed during prebuilds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/gitpod.ts",
            "line": 125
          },
          "name": "prebuild",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.HasteConfig": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.HasteConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 524
      },
      "name": "HasteConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 525
          },
          "name": "computeSha1",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 526
          },
          "name": "defaultPlatform",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 527
          },
          "name": "hasteImplModulePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 528
          },
          "name": "platforms",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 529
          },
          "name": "throwOnModuleCollision",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.IDevEnvironment": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Abstract interface for container-based development environments, such as Gitpod and GitHub Codespaces."
      },
      "fqn": "projen.IDevEnvironment",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/dev-env.ts",
        "line": 68
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a custom Docker image or Dockerfile for the container."
          },
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 74
          },
          "name": "addDockerImage",
          "parameters": [
            {
              "docs": {
                "summary": "The Docker image."
              },
              "name": "image",
              "type": {
                "fqn": "projen.DevEnvironmentDockerImage"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds ports that should be exposed (forwarded) from the container."
          },
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 88
          },
          "name": "addPorts",
          "parameters": [
            {
              "docs": {
                "summary": "The new ports."
              },
              "name": "ports",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds tasks to run when the container starts."
          },
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 81
          },
          "name": "addTasks",
          "parameters": [
            {
              "docs": {
                "summary": "The new tasks."
              },
              "name": "tasks",
              "type": {
                "fqn": "projen.tasks.Task"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds a list of VSCode extensions that should be automatically installed in the container."
          },
          "locationInModule": {
            "filename": "src/dev-env.ts",
            "line": 96
          },
          "name": "addVscodeExtensions",
          "parameters": [
            {
              "docs": {
                "summary": "The extension IDs."
              },
              "name": "extensions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "IDevEnvironment"
    },
    "projen.IDockerComposeServiceName": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "An interface providing the name of a docker compose service."
      },
      "fqn": "projen.IDockerComposeServiceName",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 162
      },
      "name": "IDockerComposeServiceName",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the docker compose service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 166
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.IDockerComposeVolumeBinding": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Volume binding information."
      },
      "fqn": "projen.IDockerComposeVolumeBinding",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 409
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "mounting instructions for the service.",
            "stability": "experimental",
            "summary": "Binds the requested volume to the docker-compose volume configuration and provide mounting instructions for synthesis."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 416
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "the volume configuration."
              },
              "name": "volumeConfig",
              "type": {
                "fqn": "projen.IDockerComposeVolumeConfig"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.DockerComposeVolumeMount"
            }
          }
        }
      ],
      "name": "IDockerComposeVolumeBinding"
    },
    "projen.IDockerComposeVolumeConfig": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Storage for volume configuration."
      },
      "fqn": "projen.IDockerComposeVolumeConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/docker-compose.ts",
        "line": 422
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add volume configuration to the repository."
          },
          "locationInModule": {
            "filename": "src/docker-compose.ts",
            "line": 428
          },
          "name": "addVolumeConfiguration",
          "parameters": [
            {
              "name": "volumeName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "configuration",
              "type": {
                "fqn": "projen.DockerComposeVolumeConfig"
              }
            }
          ]
        }
      ],
      "name": "IDockerComposeVolumeConfig"
    },
    "projen.IMarkableFile": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Files that may include the Projen marker."
      },
      "fqn": "projen.IMarkableFile",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/markable-file.ts",
        "line": 16
      },
      "name": "IMarkableFile",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Adds the projen marker to the file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/markable-file.ts",
            "line": 22
          },
          "name": "marker",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.IResolver": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "API for resolving tokens when synthesizing file content."
      },
      "fqn": "projen.IResolver",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 127
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "package": "options Resolve options"
            },
            "stability": "experimental",
            "summary": "Given a value (object/string/array/whatever, looks up any functions inside the object and returns an object where all functions are called."
          },
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 134
          },
          "name": "resolve",
          "parameters": [
            {
              "docs": {
                "summary": "The value to resolve."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.ResolveOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "IResolver"
    },
    "projen.IgnoreFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.IgnoreFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/ignore-file.ts",
          "line": 9
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/ignore-file.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "remarks": "Files that match this pattern will be ignored. If the\npattern starts with a negation mark `!`, files that match will _not_ be\nignored.\n\nComment lines (start with `#`) are ignored.",
            "stability": "experimental",
            "summary": "Add ignore patterns."
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 22
          },
          "name": "addPatterns",
          "parameters": [
            {
              "docs": {
                "summary": "Ignore patterns."
              },
              "name": "patterns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Ignore the files that match these patterns."
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 55
          },
          "name": "exclude",
          "parameters": [
            {
              "docs": {
                "summary": "The patterns to match."
              },
              "name": "patterns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Always include the specified file patterns."
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 63
          },
          "name": "include",
          "parameters": [
            {
              "docs": {
                "summary": "Patterns to include in git commits."
              },
              "name": "patterns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "If `addPattern()` is called after this, the pattern will be added again.",
            "stability": "experimental",
            "summary": "Removes patterns previously added from the ignore file."
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 44
          },
          "name": "removePatterns",
          "parameters": [
            {
              "docs": {
                "summary": "patters to remove."
              },
              "name": "patterns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/ignore-file.ts",
            "line": 73
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "IgnoreFile"
    },
    "projen.Jest": {
      "assembly": "projen",
      "docs": {
        "remarks": "- `test` will run `jest --passWithNoTests`\n- `test:watch` will run `jest --watch`\n- `test:update` will run `jest -u`",
        "stability": "experimental",
        "summary": "Installs the following npm scripts:."
      },
      "fqn": "projen.Jest",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/jest.ts",
          "line": 558
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.JestOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 542
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 657
          },
          "name": "addIgnorePattern",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 661
          },
          "name": "addReporter",
          "parameters": [
            {
              "name": "reporter",
              "type": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "json"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 665
          },
          "name": "addSnapshotResolver",
          "parameters": [
            {
              "name": "file",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a test match pattern."
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 645
          },
          "name": "addTestMatch",
          "parameters": [
            {
              "docs": {
                "summary": "glob pattern to match for tests."
              },
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a watch ignore pattern."
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 653
          },
          "name": "addWatchIgnorePattern",
          "parameters": [
            {
              "docs": {
                "summary": "The pattern (regular expression)."
              },
              "name": "pattern",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Merges passed in typescript config options with jest configured typescript options from .projenrc Add Jest config settings for typescript options."
          },
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 674
          },
          "name": "generateTypescriptConfig",
          "parameters": [
            {
              "docs": {
                "summary": "TypescriptConfigOptions."
              },
              "name": "options",
              "type": {
                "fqn": "projen.TypescriptConfigOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.TypescriptConfig"
            }
          }
        }
      ],
      "name": "Jest",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Escape hatch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 546
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.JestConfigOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JestConfigOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 10
      },
      "name": "JestConfigOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "All modules used in your tests will have a replacement implementation, keeping the API surface",
            "stability": "experimental",
            "summary": "This option tells Jest that all imported modules in your tests should be mocked automatically."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 16
          },
          "name": "automock",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0",
            "remarks": "The bail config option can be used here to have Jest stop running tests after n failures.\nSetting bail to true is the same as setting bail to 1.",
            "stability": "experimental",
            "summary": "By default, Jest runs all tests and produces all errors into the console upon completion."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 24
          },
          "name": "bail",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "primitive": "boolean"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"/tmp/<path>\"",
            "stability": "experimental",
            "summary": "The directory where Jest should store its cached dependency information."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 30
          },
          "name": "cacheDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Equivalent to calling jest.clearAllMocks() before each test.\nThis does not remove any mock implementation that may have been provided",
            "stability": "experimental",
            "summary": "Automatically clear mock calls and instances before every test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 38
          },
          "name": "clearMocks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Because this retrofits all executed files with coverage collection statements,\nit may significantly slow down your tests",
            "stability": "experimental",
            "summary": "Indicates whether the coverage information should be collected while executing the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 46
          },
          "name": "collectCoverage",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "An array of glob patterns indicating a set of files for which coverage information should be collected."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 52
          },
          "name": "collectCoverageFrom",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"coverage\"",
            "stability": "experimental",
            "summary": "The directory where Jest should output its coverage files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 58
          },
          "name": "coverageDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"/node_modules/\"",
            "remarks": "If the file path matches any of the patterns, coverage information will be skipped",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all file paths before executing the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 65
          },
          "name": "coveragePathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"babel\"",
            "remarks": "Allowed values are babel (default) or v8",
            "stability": "experimental",
            "summary": "Indicates which provider should be used to instrument code for coverage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 72
          },
          "name": "coverageProvider",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"json\", \"lcov\", \"text\", \"clover\"]",
            "remarks": "Any istanbul reporter can be used",
            "stability": "experimental",
            "summary": "A list of reporter names that Jest uses when writing coverage reports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 78
          },
          "name": "coverageReporters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This will be used to configure minimum threshold enforcement\nfor coverage results. Thresholds can be specified as global, as a glob, and as a directory or file path.\nIf thresholds aren't met, jest will fail.",
            "stability": "experimental",
            "summary": "Specify the global coverage thresholds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 86
          },
          "name": "coverageThreshold",
          "optional": true,
          "type": {
            "fqn": "projen.CoverageThreshold"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "It must be a node module that exports an object with an extract function",
            "stability": "experimental",
            "summary": "This option allows the use of a custom dependency extractor."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 93
          },
          "name": "dependencyExtractor",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "Allows for a label to be printed alongside a test while it is running."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 99
          },
          "name": "displayName",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Useful for easing the upgrade process.",
            "stability": "experimental",
            "summary": "Make calling deprecated APIs throw helpful error messages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 105
          },
          "name": "errorOnDeprecated",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "Test files run inside a vm, which slows calls to global context properties (e.g. Math). With this option you can specify extra properties to be defined inside the vm for faster lookups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 112
          },
          "name": "extraGlobals",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- ['']",
            "remarks": "With this option, you can overwrite this behavior and include otherwise ignored files in code coverage.",
            "stability": "experimental",
            "summary": "Test files are normally ignored from collecting code coverage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 119
          },
          "name": "forceCoverageMatch",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {}",
            "stability": "experimental",
            "summary": "A set of global variables that need to be available in all test environments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 125
          },
          "name": "globals",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This function gets Jest's globalConfig object as a parameter.",
            "stability": "experimental",
            "summary": "This option allows the use of a custom global setup module which exports an async function that is triggered once before all test suites."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 132
          },
          "name": "globalSetup",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This function gets Jest's globalConfig object as a parameter.",
            "stability": "experimental",
            "summary": "This option allows the use of a custom global teardown module which exports an async function that is triggered once after all test suites."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 139
          },
          "name": "globalTeardown",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {}",
            "stability": "experimental",
            "summary": "This will be used to configure the behavior of jest-haste-map, Jest's internal file crawler/cache system."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 145
          },
          "name": "haste",
          "optional": true,
          "type": {
            "fqn": "projen.HasteConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true",
            "stability": "experimental",
            "summary": "Insert Jest's globals (expect, test, describe, beforeEach etc.) into the global environment. If you set this to false, you should import from @jest/globals."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 152
          },
          "name": "injectGlobals",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 5",
            "stability": "experimental",
            "summary": "A number limiting the number of tests that are allowed to run at the same time when using test.concurrent. Any test above this limit will be queued and executed once a slot is released."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 159
          },
          "name": "maxConcurrency",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"node_modules\"]",
            "remarks": "Setting this option will override the default, if you wish to still search node_modules for packages\ninclude it along with any other options: [\"node_modules\", \"bower_components\"]",
            "stability": "experimental",
            "summary": "An array of directory names to be searched recursively up from the requiring module's location."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 167
          },
          "name": "moduleDirectories",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"js\", \"json\", \"jsx\", \"ts\", \"tsx\", \"node\"]",
            "remarks": "If you require modules without specifying a file extension,\nthese are the extensions Jest will look for, in left-to-right order.",
            "stability": "experimental",
            "summary": "An array of file extensions your modules use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 174
          },
          "name": "moduleFileExtensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- null",
            "stability": "experimental",
            "summary": "A map from regular expressions to module names or to arrays of module names that allow to stub out resources, like images or styles with a single module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 181
          },
          "name": "moduleNameMapper",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "string"
                        },
                        "kind": "array"
                      }
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "If a given module's path matches any of the patterns,\nit will not be require()-able in the test environment.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all module paths before those paths are to be considered 'visible' to the module loader."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 189
          },
          "name": "modulePathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Use the <rootDir> string token to include\nthe path to your project's root directory. Example: [\"<rootDir>/app/\"].",
            "stability": "experimental",
            "summary": "An alternative API to setting the NODE_PATH env variable, modulePaths is an array of absolute paths to additional locations to search when resolving modules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 197
          },
          "name": "modulePaths",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Activates notifications for test results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 203
          },
          "name": "notify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- failure-change",
            "remarks": "Requires notify: true",
            "stability": "experimental",
            "summary": "Specifies notification mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 209
          },
          "name": "notifyMode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "A preset should point to an npm module\nthat has a jest-preset.json or jest-preset.js file at the root.",
            "stability": "experimental",
            "summary": "A preset that is used as a base for Jest's configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 216
          },
          "name": "preset",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"prettier\"",
            "stability": "experimental",
            "summary": "Sets the path to the prettier node module used to update inline snapshots."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 222
          },
          "name": "prettierPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This is great for monorepos or\nwhen working on multiple projects at the same time.",
            "stability": "experimental",
            "summary": "When the projects configuration is provided with an array of paths or glob patterns, Jest will run tests in all of the specified projects at the same time."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 230
          },
          "name": "projects",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "collection": {
                        "elementtype": {
                          "primitive": "any"
                        },
                        "kind": "map"
                      }
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "A custom reporter is a class\nthat implements onRunStart, onTestStart, onTestResult, onRunComplete methods that will be\ncalled when any of those events occurs.",
            "stability": "experimental",
            "summary": "Use this configuration option to add custom reporters to Jest."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 238
          },
          "name": "reporters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "json"
                    }
                  ]
                }
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Equivalent to calling jest.resetAllMocks()\nbefore each test. This will lead to any mocks having their fake implementations removed but\ndoes not restore their initial implementation.",
            "stability": "experimental",
            "summary": "Automatically reset mock state before every test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 246
          },
          "name": "resetMocks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Enabling resetModules\ngoes a step further and resets the module registry before running each individual test.",
            "stability": "experimental",
            "summary": "By default, each test file gets its own independent module registry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 253
          },
          "name": "resetModules",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "https://jestjs.io/docs/en/configuration#resolver-string",
            "stability": "experimental",
            "summary": "This option allows the use of a custom resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 260
          },
          "name": "resolver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "Equivalent to calling jest.restoreAllMocks()\nbefore each test. This will lead to any mocks having their fake implementations removed and\nrestores their initial implementation.",
            "stability": "experimental",
            "summary": "Automatically restore mock state before every test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 268
          },
          "name": "restoreMocks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- directory of the package.json",
            "remarks": "If you put your Jest\nconfig inside your package.json and want the root directory to be the root of your repo, the\nvalue for this config param will default to the directory of the package.json.",
            "stability": "experimental",
            "summary": "The root directory that Jest should scan for tests and modules within."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 276
          },
          "name": "rootDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"<rootDir>\"]",
            "stability": "experimental",
            "summary": "A list of paths to directories that Jest should use to search for files in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 282
          },
          "name": "roots",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"jest-runner\"",
            "stability": "experimental",
            "summary": "This option allows you to use a custom runner instead of Jest's default test runner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 288
          },
          "name": "runner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Each setupFile will be run once per test file. Since every test runs in its own environment,\nthese scripts will be executed in the testing environment immediately before executing the\ntest code itself.",
            "stability": "experimental",
            "summary": "A list of paths to modules that run some code to configure or set up the testing environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 297
          },
          "name": "setupFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "Since setupFiles executes before the test\nframework is installed in the environment, this script file presents you the opportunity of\nrunning some code immediately after the test framework has been installed in the environment.",
            "stability": "experimental",
            "summary": "A list of paths to modules that run some code to configure or set up the testing framework before each test file in the suite is executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 306
          },
          "name": "setupFilesAfterEnv",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 5",
            "stability": "experimental",
            "summary": "The number of seconds after which a test is considered as slow and reported as such in the results."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 312
          },
          "name": "slowTestThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "remarks": "This config option lets you customize\nwhere Jest stores snapshot files on disk.",
            "stability": "experimental",
            "summary": "The path to a module that can resolve test<->snapshot path."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 319
          },
          "name": "snapshotResolver",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "= []",
            "stability": "experimental",
            "summary": "A list of paths to snapshot serializer modules Jest should use for snapshot testing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 325
          },
          "name": "snapshotSerializers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"jsdom\"",
            "remarks": "The default environment in Jest is a\nbrowser-like environment through jsdom. If you are building a node service, you can use the node\noption to use a node-like environment instead.",
            "stability": "experimental",
            "summary": "The test environment that will be used for testing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 333
          },
          "name": "testEnvironment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {}",
            "remarks": "The relevant options depend on the environment.",
            "stability": "experimental",
            "summary": "Test environment options that will be passed to the testEnvironment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 340
          },
          "name": "testEnvironmentOptions",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 1",
            "stability": "experimental",
            "summary": "The exit code Jest returns on test failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 346
          },
          "name": "testFailureExitCode",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['**\\/__tests__/**\\/*.[jt]s?(x)', '**\\/?(*.)+(spec|test).[tj]s?(x)']",
            "remarks": "By default it looks for .js, .jsx, .ts and .tsx\nfiles inside of __tests__ folders, as well as any files with a suffix of .test or .spec\n(e.g. Component.test.js or Component.spec.js). It will also find files called test.js or spec.js.",
            "stability": "experimental",
            "summary": "The glob patterns Jest uses to detect test files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 354
          },
          "name": "testMatch",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"/node_modules/\"]",
            "remarks": "If the test path matches any of the patterns, it will be skipped.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all test paths before executing the test."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 361
          },
          "name": "testPathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- (/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$",
            "remarks": "By default it looks for .js, .jsx, .ts and .tsx\nfiles inside of __tests__ folders, as well as any files with a suffix of .test or .spec\n(e.g. Component.test.js or Component.spec.js). It will also find files called test.js or spec.js.",
            "stability": "experimental",
            "summary": "The pattern or patterns Jest uses to detect test files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 369
          },
          "name": "testRegex",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "string"
                },
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "experimental",
            "summary": "This option allows the use of a custom results processor."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 375
          },
          "name": "testResultsProcessor",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"jasmine2\"",
            "remarks": "The default is jasmine2. A custom test runner\ncan be provided by specifying a path to a test runner implementation.",
            "stability": "experimental",
            "summary": "This option allows the use of a custom test runner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 382
          },
          "name": "testRunner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "jest": "/test-sequencer\""
            },
            "default": "- \"",
            "remarks": "Sort may optionally return a Promise.",
            "stability": "experimental",
            "summary": "This option allows you to use a custom sequencer instead of Jest's default."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 389
          },
          "name": "testSequencer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 5000",
            "stability": "experimental",
            "summary": "Default timeout of a test in milliseconds."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 395
          },
          "name": "testTimeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"http://localhost\"",
            "remarks": "It is reflected in properties such as location.href.",
            "stability": "experimental",
            "summary": "This option sets the URL for the jsdom environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 401
          },
          "name": "testURL",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"real\"",
            "remarks": "Fake timers are useful when a piece of code sets a long timeout that we don't want to wait for in a test.",
            "stability": "experimental",
            "summary": "Setting this value to legacy or fake allows the use of fake timers for functions such as setTimeout."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 408
          },
          "name": "timers",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- {\"\\\\.[jt]sx?$\": \"babel-jest\"}",
            "remarks": "A transformer is a module that provides a\nsynchronous function for transforming source files.",
            "stability": "experimental",
            "summary": "A map from regular expressions to paths to transformers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 415
          },
          "name": "transform",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "json"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [\"/node_modules/\", \"\\\\.pnp\\\\.[^\\\\\\/]+$\"]",
            "remarks": "If the test path matches any of the patterns, it will not be transformed.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all source file paths before transformation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 422
          },
          "name": "transformIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "If a module's path matches any of the patterns in this list, it\nwill not be automatically mocked by the module loader.",
            "stability": "experimental",
            "summary": "An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 430
          },
          "name": "unmockedModulePathPatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "remarks": "All errors will also\nstill be shown on the bottom after execution. Note that if there is only one test file being run\nit will default to true.",
            "stability": "experimental",
            "summary": "Indicates whether each individual test should be reported during the run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 438
          },
          "name": "verbose",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true",
            "stability": "experimental",
            "summary": "Whether to use watchman for file crawling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 458
          },
          "name": "watchman",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- []",
            "remarks": "If the file path matches any of the patterns, when it is updated, it will not trigger\na re-run of tests.",
            "stability": "experimental",
            "summary": "An array of RegExp patterns that are matched against all source file paths before re-running tests in watch mode."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 446
          },
          "name": "watchPathIgnorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 452
          },
          "name": "watchPlugins",
          "optional": true,
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "projen.JestOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JestOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jest.ts",
        "line": 466
      },
      "name": "JestOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "deprecated": "use jestConfig.collectCoverage",
            "remarks": "Deprecated",
            "stability": "deprecated",
            "summary": "Collect coverage."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 472
          },
          "name": "coverage",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include the `text` coverage reporter, which means that coverage summary is printed at the end of the jest execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 480
          },
          "name": "coverageText",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[\"/node_modules/\"]",
            "deprecated": "use jestConfig.coveragePathIgnorePatterns or jestConfig.testPathIgnorePatterns respectively",
            "stability": "deprecated",
            "summary": "Defines `testPathIgnorePatterns` and `coveragePathIgnorePatterns`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 487
          },
          "name": "ignorePatterns",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 512
          },
          "name": "jestConfig",
          "optional": true,
          "type": {
            "fqn": "projen.JestConfigOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- installs the latest jest version",
            "stability": "experimental",
            "summary": "The version of jest to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 510
          },
          "name": "jestVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Output directory is `test-reports/`.",
            "stability": "experimental",
            "summary": "Result processing with jest-junit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 496
          },
          "name": "junitReporting",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Preserve the default Jest reporter when additional reporters are added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 503
          },
          "name": "preserveDefaultReporters",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jest.ts",
            "line": 514
          },
          "name": "typescriptConfig",
          "optional": true,
          "type": {
            "fqn": "projen.TypescriptConfigOptions"
          }
        }
      ]
    },
    "projen.JsiiDotNetTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiDotNetTarget",
      "interfaces": [
        "projen.JsiiReleaseNuget"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 140
      },
      "name": "JsiiDotNetTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 141
          },
          "name": "dotNetNamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 142
          },
          "name": "packageId",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiGoTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Go target configuration."
      },
      "fqn": "projen.JsiiGoTarget",
      "interfaces": [
        "projen.JsiiReleaseGo"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 148
      },
      "name": "JsiiGoTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "github.com/owner/repo/subdir",
            "stability": "experimental",
            "summary": "The name of the target go module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 155
          },
          "name": "moduleName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiJavaTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiJavaTarget",
      "interfaces": [
        "projen.JsiiReleaseMaven"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 129
      },
      "name": "JsiiJavaTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 130
          },
          "name": "javaPackage",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 132
          },
          "name": "mavenArtifactId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 131
          },
          "name": "mavenGroupId",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptProject",
      "docs": {
        "stability": "experimental",
        "summary": "Multi-language jsii library project."
      },
      "fqn": "projen.JsiiProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/jsii-project.ts",
          "line": 165
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.JsiiProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 162
      },
      "name": "JsiiProject",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 163
          },
          "name": "eslint",
          "optional": true,
          "overrides": "projen.TypeScriptProject",
          "type": {
            "fqn": "projen.Eslint"
          }
        }
      ]
    },
    "projen.JsiiProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiProjectOptions",
      "interfaces": [
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 13
      },
      "name": "JsiiProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_USER_NAME",
            "stability": "experimental",
            "summary": "The name of the library author."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 29
          },
          "name": "author",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_USER_EMAIL",
            "stability": "experimental",
            "summary": "Email or URL of the library author."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 35
          },
          "name": "authorAddress",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_REMOTE",
            "stability": "experimental",
            "summary": "Git repository URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 23
          },
          "name": "repositoryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "- You can manually run compatibility tests using `yarn compat` if this feature is disabled.\n- You can ignore compatibility failures by adding lines to a \".compatignore\" file.",
            "stability": "experimental",
            "summary": "Automatically run API compatibility test against the latest version published to npm after compilation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 104
          },
          "name": "compat",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\".compatignore\"",
            "stability": "experimental",
            "summary": "Name of the ignore file for API compatibility tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 111
          },
          "name": "compatIgnore",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically generate API.md from jsii."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 94
          },
          "name": "docgen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `publishToNuget`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 69
          },
          "name": "dotnet",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiDotNetTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Install eslint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 76
          },
          "name": "eslint",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- opinionated default options",
            "stability": "experimental",
            "summary": "Eslint options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 82
          },
          "name": "eslintOptions",
          "optional": true,
          "type": {
            "fqn": "projen.EslintOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Files matching any of those patterns will be excluded from the TypeScript compiler input.\n\nBy default, jsii will include all *.ts files (except .d.ts files) in the TypeScript compiler input.\nThis can be problematic for example when the package's build or test procedure generates .ts files\nthat cannot be compiled with jsii's compiler settings.",
            "stability": "experimental",
            "summary": "Accepts a list of glob patterns."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 120
          },
          "name": "excludeTypescript",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no publishing",
            "stability": "experimental",
            "summary": "Publish Go bindings to a git repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 53
          },
          "name": "publishToGo",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiGoTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no publishing",
            "stability": "experimental",
            "summary": "Publish to maven."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 41
          },
          "name": "publishToMaven",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiJavaTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no publishing",
            "stability": "experimental",
            "summary": "Publish to NuGet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 64
          },
          "name": "publishToNuget",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiDotNetTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no publishing",
            "stability": "experimental",
            "summary": "Publish to pypi."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 47
          },
          "name": "publishToPypi",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiPythonTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `publishToPyPi`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 58
          },
          "name": "python",
          "optional": true,
          "type": {
            "fqn": "projen.JsiiPythonTarget"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\".\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 17
          },
          "name": "rootdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `src/` and `test/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 88
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.JsiiPythonTarget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.JsiiPythonTarget",
      "interfaces": [
        "projen.JsiiReleasePyPi"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 135
      },
      "name": "JsiiPythonTarget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 136
          },
          "name": "distName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/jsii-project.ts",
            "line": 137
          },
          "name": "module",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiReleaseGo": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Go releases."
      },
      "fqn": "projen.JsiiReleaseGo",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 396
      },
      "name": "JsiiReleaseGo",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"main\"",
            "stability": "experimental",
            "summary": "Branch to push to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 417
          },
          "name": "gitBranch",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"chore(release): $VERSION\"",
            "stability": "experimental",
            "summary": "The commit message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 436
          },
          "name": "gitCommitMessage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- derived from `moduleName`",
            "stability": "experimental",
            "summary": "GitHub repository to push to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 410
          },
          "name": "githubRepo",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"GO_GITHUB_TOKEN\"",
            "stability": "experimental",
            "summary": "The name of the secret that includes a personal GitHub access token used to push to the GitHub repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 403
          },
          "name": "githubTokenSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "github": ".com\""
            },
            "default": "\"github-actions",
            "stability": "experimental",
            "summary": "The email to use in the release git commit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 429
          },
          "name": "gitUserEmail",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"GitHub Actions\"",
            "stability": "experimental",
            "summary": "The user name to use for the release git commit."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 423
          },
          "name": "gitUserName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiReleaseMaven": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Maven releases."
      },
      "fqn": "projen.JsiiReleaseMaven",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 313
      },
      "name": "JsiiReleaseMaven",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"https://oss.sonatype.org\"",
            "remarks": "if not set, defaults to https://oss.sonatype.org",
            "stability": "experimental",
            "summary": "URL of Nexus repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 319
          },
          "name": "mavenEndpoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"MAVEN_GPG_PRIVATE_KEY_PASSPHRASE\"",
            "remarks": "This is used to sign your Maven packages. See instructions.",
            "see": "https://github.com/aws/jsii-release#maven",
            "stability": "experimental",
            "summary": "GitHub secret name which contains the GPG private key or file that includes it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 351
          },
          "name": "mavenGpgPrivateKeyPassphrase",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"MAVEN_GPG_PRIVATE_KEY\"",
            "remarks": "This is used to sign your Maven\npackages. See instructions.",
            "see": "https://github.com/aws/jsii-release#maven",
            "stability": "experimental",
            "summary": "GitHub secret name which contains the GPG private key or file that includes it."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 342
          },
          "name": "mavenGpgPrivateKeySecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"MAVEN_PASSWORD\"",
            "remarks": "For Maven Central, you will need to Create JIRA account and then request a\nnew project (see links).",
            "see": "https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134",
            "stability": "experimental",
            "summary": "GitHub secret name which contains the Password for maven repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 379
          },
          "name": "mavenPassword",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- not set",
            "stability": "experimental",
            "summary": "Deployment repository when not deploying to Maven Central."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 332
          },
          "name": "mavenRepositoryUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"ossrh\" Defaults to Maven Central.",
            "stability": "experimental",
            "summary": "Used in maven settings for credential lookup (e.g. use github when publishing to GitHub)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 326
          },
          "name": "mavenServerId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"MAVEN_STAGING_PROFILE_ID\"",
            "stability": "experimental",
            "summary": "GitHub secret name which contains the Maven Central (sonatype) staging profile ID (e.g. 68a05363083174). Staging profile ID can be found in the URL of the \"Releases\" staging profile under \"Staging Profiles\" in https://oss.sonatype.org (e.g. https://oss.sonatype.org/#stagingProfiles;11a33451234521."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 390
          },
          "name": "mavenStagingProfileId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"MAVEN_USERNAME\"",
            "remarks": "For Maven Central, you will need to Create JIRA account and then request a\nnew project (see links).",
            "see": "https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134",
            "stability": "experimental",
            "summary": "GitHub secret name which contains the Username for maven repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 365
          },
          "name": "mavenUsername",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiReleaseNpm": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for npm release."
      },
      "fqn": "projen.JsiiReleaseNpm",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 241
      },
      "name": "JsiiReleaseNpm",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"latest\"",
            "remarks": "For example, a project might choose to have multiple streams of development\nand use a different tag for each stream, e.g., stable, beta, dev, canary.\n\nBy default, the `latest` tag is used by npm to identify the current version\nof a package, and `npm install <pkg>` (without any `@<version>` or `@<tag>`\nspecifier) installs the latest tag. Typically, projects only use the\n`latest` tag for stable release versions, and use other tags for unstable\nversions such as prereleases.\n\nThe `next` tag is used by some projects to identify the upcoming version.",
            "stability": "experimental",
            "summary": "Tags can be used to provide an alias instead of version numbers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 258
          },
          "name": "distTag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"NPM_TOKEN\"",
            "stability": "experimental",
            "summary": "GitHub secret which contains the NPM token to use when publishing packages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 271
          },
          "name": "npmTokenSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"registry.npmjs.org\"",
            "stability": "experimental",
            "summary": "The domain name of the npm package registry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 265
          },
          "name": "registry",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiReleaseNuget": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for NuGet releases."
      },
      "fqn": "projen.JsiiReleaseNuget",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 301
      },
      "name": "JsiiReleaseNuget",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"NUGET_API_KEY\"",
            "stability": "experimental",
            "summary": "GitHub secret which contains the API key for NuGet."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 307
          },
          "name": "nugetApiKeySecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsiiReleasePyPi": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for PyPI release."
      },
      "fqn": "projen.JsiiReleasePyPi",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 277
      },
      "name": "JsiiReleasePyPi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"TWINE_PASSWORD\"",
            "stability": "experimental",
            "summary": "The GitHub secret which contains PyPI password."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 295
          },
          "name": "twinePasswordSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- twine default",
            "stability": "experimental",
            "summary": "The registry url to use when releasing packages."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 283
          },
          "name": "twineRegistryUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"TWINE_USERNAME\"",
            "stability": "experimental",
            "summary": "The GitHub secret which contains PyPI user name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 289
          },
          "name": "twineUsernameSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.JsonFile": {
      "assembly": "projen",
      "base": "projen.ObjectFile",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a JSON file."
      },
      "fqn": "projen.JsonFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/json.ts",
          "line": 14
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.JsonFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/json.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/json.ts",
            "line": 22
          },
          "name": "synthesizeContent",
          "overrides": "projen.ObjectFile",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "JsonFile"
    },
    "projen.JsonFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `JsonFile`."
      },
      "fqn": "projen.JsonFileOptions",
      "interfaces": [
        "projen.ObjectFileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/json.ts",
        "line": 8
      },
      "name": "JsonFileOptions"
    },
    "projen.License": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.License",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/license.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "spdx",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.LicenseOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/license.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/license.ts",
            "line": 40
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "License"
    },
    "projen.LicenseOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.LicenseOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/license.ts",
        "line": 5
      },
      "name": "LicenseOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"\"",
            "stability": "experimental",
            "summary": "Copyright owner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/license.ts",
            "line": 11
          },
          "name": "copyrightOwner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- current year (e.g. \"2020\")",
            "stability": "experimental",
            "summary": "Period of license (e.g. \"1998-2023\")."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/license.ts",
            "line": 18
          },
          "name": "copyrightPeriod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.LogLevel": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Logging verbosity."
      },
      "fqn": "projen.LogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/logger.ts",
        "line": 122
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OFF"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "ERROR"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "WARN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "INFO"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DEBUG"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "VERBOSE"
        }
      ],
      "name": "LogLevel"
    },
    "projen.Logger": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Project-level logging utilities."
      },
      "fqn": "projen.Logger",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/logger.ts",
          "line": 33
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.LoggerOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/logger.ts",
        "line": 29
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Log a message to stderr with DEBUG severity."
          },
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 78
          },
          "name": "debug",
          "parameters": [
            {
              "docs": {
                "summary": "strings or objects to print."
              },
              "name": "text",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Log a message to stderr with ERROR severity."
          },
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 102
          },
          "name": "error",
          "parameters": [
            {
              "docs": {
                "summary": "strings or objects to print."
              },
              "name": "text",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Log a message to stderr with INFO severity."
          },
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 86
          },
          "name": "info",
          "parameters": [
            {
              "docs": {
                "summary": "strings or objects to print."
              },
              "name": "text",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "The message will be\nprinted as long as `logger.level` is set to the message's severity or higher.",
            "stability": "experimental",
            "summary": "Log a message to stderr with a given logging level."
          },
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 47
          },
          "name": "log",
          "parameters": [
            {
              "docs": {
                "summary": "Logging verbosity."
              },
              "name": "level",
              "type": {
                "fqn": "projen.LogLevel"
              }
            },
            {
              "docs": {
                "summary": "strings or objects to print."
              },
              "name": "text",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Log a message to stderr with VERBOSE severity."
          },
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 70
          },
          "name": "verbose",
          "parameters": [
            {
              "docs": {
                "summary": "strings or objects to print."
              },
              "name": "text",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Log a message to stderr with WARN severity."
          },
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 94
          },
          "name": "warn",
          "parameters": [
            {
              "docs": {
                "summary": "strings or objects to print."
              },
              "name": "text",
              "type": {
                "primitive": "any"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "Logger"
    },
    "projen.LoggerOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for logging utilities."
      },
      "fqn": "projen.LoggerOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/logger.ts",
        "line": 9
      },
      "name": "LoggerOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "LogLevel.INFO",
            "remarks": "The levels available (in increasing verbosity) are\nOFF, ERROR, WARN, INFO, DEBUG, and VERBOSE.",
            "stability": "experimental",
            "summary": "The logging verbosity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 16
          },
          "name": "level",
          "optional": true,
          "type": {
            "fqn": "projen.LogLevel"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Include a prefix for all logging messages with the project name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/logger.ts",
            "line": 23
          },
          "name": "usePrefix",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Makefile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "Minimal Makefile."
      },
      "fqn": "projen.Makefile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/makefile.ts",
          "line": 72
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.MakefileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/makefile.ts",
        "line": 63
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a target to all."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 94
          },
          "name": "addAll",
          "parameters": [
            {
              "name": "target",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add multiple targets to all."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 102
          },
          "name": "addAlls",
          "parameters": [
            {
              "name": "targets",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a rule to the Makefile."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 110
          },
          "name": "addRule",
          "parameters": [
            {
              "name": "rule",
              "type": {
                "fqn": "projen.Rule"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add multiple rules to the Makefile."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 119
          },
          "name": "addRules",
          "parameters": [
            {
              "name": "rules",
              "type": {
                "fqn": "projen.Rule"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Makefile"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 130
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Makefile",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "List of rule definitions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 67
          },
          "name": "rules",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Rule"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.MakefileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Makefiles."
      },
      "fqn": "projen.MakefileOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/makefile.ts",
        "line": 44
      },
      "name": "MakefileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "List of targets to build when Make is invoked without specifying any targets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 50
          },
          "name": "all",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Rules to include in the Makefile."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 57
          },
          "name": "rules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Rule"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.MarkableFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for files that may include the Projen marker."
      },
      "fqn": "projen.MarkableFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/markable-file.ts",
        "line": 4
      },
      "name": "MarkableFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Adds the projen marker to the file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/markable-file.ts",
            "line": 10
          },
          "name": "marker",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.NodePackage": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the npm `package.json` file."
      },
      "fqn": "projen.NodePackage",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/node-package.ts",
          "line": 369
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.NodePackageOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/node-package.ts",
        "line": 288
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 539
          },
          "name": "addBin",
          "parameters": [
            {
              "name": "bins",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Bundled dependencies will be added as normal dependencies as well as to the\n`bundledDependencies` section of your `package.json`.",
            "stability": "experimental",
            "summary": "Defines bundled dependencies."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 510
          },
          "name": "addBundledDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines normal dependencies."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 453
          },
          "name": "addDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines development/test dependencies."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 468
          },
          "name": "addDevDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an `engines` requirement to your package."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 525
          },
          "name": "addEngine",
          "parameters": [
            {
              "docs": {
                "summary": "The engine (e.g. `node`)."
              },
              "name": "engine",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The semantic version requirement (e.g. `^10`)."
              },
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "custom": {
              "escape": "true"
            },
            "stability": "experimental",
            "summary": "Directly set fields in `package.json`."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 578
          },
          "name": "addField",
          "parameters": [
            {
              "docs": {
                "summary": "field name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "field value."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds keywords to package.json (deduplicated)."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 533
          },
          "name": "addKeywords",
          "parameters": [
            {
              "docs": {
                "summary": "The keywords to add."
              },
              "name": "keywords",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "When adding peer dependencies, a devDependency will also be added on the\npinned version of the declared peer. This will ensure that you are testing\nyour code against the minimum version required from your consumers.",
            "stability": "experimental",
            "summary": "Defines peer dependencies."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 488
          },
          "name": "addPeerDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Sets the package version."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 586
          },
          "name": "addVersion",
          "parameters": [
            {
              "docs": {
                "summary": "Package version."
              },
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if a script by the name name is defined."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 568
          },
          "name": "hasScript",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the script."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after synthesis."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 604
          },
          "name": "postSynthesize",
          "overrides": "projen.Component"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called before synthesis."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 599
          },
          "name": "preSynthesize",
          "overrides": "projen.Component"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Removes the npm script (always successful)."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 559
          },
          "name": "removeScript",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the script."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Replaces the contents of an npm package.json script."
          },
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 551
          },
          "name": "setScript",
          "parameters": [
            {
              "docs": {
                "summary": "The script name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The command to execute."
              },
              "name": "command",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "NodePackage",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allow project to take library dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 313
          },
          "name": "allowLibraryDependencies",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The module's entrypoint (e.g. `lib/index.js`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 298
          },
          "name": "entrypoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the command to execute in order to install all dependencies (always frozen)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 593
          },
          "name": "installCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "deprecated": "use `addField(x, y)`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 323
          },
          "name": "manifest",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "npm package access level."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 360
          },
          "name": "npmAccess",
          "type": {
            "fqn": "projen.NpmAccess"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "npm distribution tag."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 345
          },
          "name": "npmDistTag",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The npm registry host (e.g. `registry.npmjs.org`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 355
          },
          "name": "npmRegistry",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "npm registry (e.g. `https://registry.npmjs.org`). Use `npmRegistryHost` to get just the host name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 350
          },
          "name": "npmRegistryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Determines how tasks are executed when invoked as npm scripts (yarn/npm/pnpm run xyz)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 303
          },
          "name": "npmTaskExecution",
          "type": {
            "fqn": "projen.NpmTaskExecution"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The package manager to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 318
          },
          "name": "packageManager",
          "type": {
            "fqn": "projen.NodePackageManager"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the npm package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 293
          },
          "name": "packageName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command to use in order to run the projen CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 308
          },
          "name": "projenCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "`undefined` if this package is not licensed.",
            "stability": "experimental",
            "summary": "The SPDX license of this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 340
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- no maximum.",
            "stability": "experimental",
            "summary": "Maximum node version required by this pacakge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 335
          },
          "name": "maxNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "default": "- no minimum",
            "stability": "experimental",
            "summary": "Minimum node.js version required by this package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 329
          },
          "name": "minNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.NodePackageManager": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "The node package manager to use."
      },
      "fqn": "projen.NodePackageManager",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-package.ts",
        "line": 964
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use `yarn` as the package manager."
          },
          "name": "YARN"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use `npm` as the package manager."
          },
          "name": "NPM"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Use `pnpm` as the package manager."
          },
          "name": "PNPM"
        }
      ],
      "name": "NodePackageManager"
    },
    "projen.NodePackageOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NodePackageOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-package.ts",
        "line": 17
      },
      "name": "NodePackageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This is normally only allowed for libraries. For apps, there's no meaning\nfor specifying these.",
            "stability": "experimental",
            "summary": "Allow the project to include `peerDependencies` and `bundledDependencies`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 107
          },
          "name": "allowLibraryDependencies",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's e-mail."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 191
          },
          "name": "authorEmail",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 186
          },
          "name": "authorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's Organization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 201
          },
          "name": "authorOrganization",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's URL / Website."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 196
          },
          "name": "authorUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically add all executables under the `bin` directory to your `package.json` file under the `bin` section."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 139
          },
          "name": "autoDetectBin",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "You can use this option to add/customize how binaries are represented in\nyour `package.json`, but unless `autoDetectBin` is `false`, every\nexecutable file under `bin` will automatically be added to this section.",
            "stability": "experimental",
            "summary": "Binary programs vended with your module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 131
          },
          "name": "bin",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "These modules will be\nadded both to the `dependencies` section and `peerDependencies` section of\nyour `package.json`.\n\nThe recommendation is to only specify the module name here (e.g.\n`express`). This will behave similar to `yarn add` or `npm install` in the\nsense that it will add the module as a dependency to your `package.json`\nfile with the latest version (`^`). You can specify semver requirements in\nthe same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and\nthis will be what you `package.json` will eventually include.",
            "stability": "experimental",
            "summary": "List of dependencies to bundle into this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 93
          },
          "name": "bundledDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "example": "[ 'express', 'lodash', 'foo@^2' ]",
            "remarks": "The recommendation is to only specify the module name here (e.g.\n`express`). This will behave similar to `yarn add` or `npm install` in the\nsense that it will add the module as a dependency to your `package.json`\nfile with the latest version (`^`). You can specify semver requirements in\nthe same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and\nthis will be what you `package.json` will eventually include.",
            "stability": "experimental",
            "summary": "Runtime dependencies of this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 43
          },
          "name": "deps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "It can be used when searching for packages in a package manager as well.\nSee https://classic.yarnpkg.com/en/docs/package-json/#toc-description",
            "stability": "experimental",
            "summary": "The description is just a string that helps people understand the purpose of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 28
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "example": "[ 'typescript', '@types/express' ]",
            "remarks": "These dependencies will only be\navailable in your build environment but will not be fetched when this\nmodule is consumed.\n\nThe recommendation is to only specify the module name here (e.g.\n`express`). This will behave similar to `yarn add` or `npm install` in the\nsense that it will add the module as a dependency to your `package.json`\nfile with the latest version (`^`). You can specify semver requirements in\nthe same syntax passed to `npm i` or `yarn add` (e.g. `express@^2`) and\nthis will be what you `package.json` will eventually include.",
            "stability": "experimental",
            "summary": "Build dependencies for this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 60
          },
          "name": "devDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"lib/index.js\"",
            "remarks": "Set to an empty string to not include `main` in your package.json",
            "stability": "experimental",
            "summary": "Module entrypoint (`main` in `package.json`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 121
          },
          "name": "entrypoint",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Package's Homepage / Website."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 206
          },
          "name": "homepage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Keywords to include in `package.json`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 112
          },
          "name": "keywords",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"Apache-2.0\"",
            "remarks": "See https://github.com/projen/projen/tree/master/license-text for a list of supported licenses.",
            "stability": "experimental",
            "summary": "License's SPDX identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 232
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Indicates if a license should be added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 239
          },
          "name": "licensed",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no max",
            "stability": "experimental",
            "summary": "Minimum node.js version to require via `engines` (inclusive)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 225
          },
          "name": "maxNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no \"engines\" specified",
            "stability": "experimental",
            "summary": "Minimum Node.js version to require via package.json `engines` (inclusive)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 218
          },
          "name": "minNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- for scoped packages (e.g. `foo@bar`), the default is\n`NpmAccess.RESTRICTED`, for non-scoped packages, the default is\n`NpmAccess.PUBLIC`.",
            "stability": "experimental",
            "summary": "Access level of the npm package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 282
          },
          "name": "npmAccess",
          "optional": true,
          "type": {
            "fqn": "projen.NpmAccess"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"latest\"",
            "remarks": "For example, a project might choose to have multiple streams of development\nand use a different tag for each stream, e.g., stable, beta, dev, canary.\n\nBy default, the `latest` tag is used by npm to identify the current version\nof a package, and `npm install <pkg>` (without any `@<version>` or `@<tag>`\nspecifier) installs the latest tag. Typically, projects only use the\n`latest` tag for stable release versions, and use other tags for unstable\nversions such as prereleases.\n\nThe `next` tag is used by some projects to identify the upcoming version.",
            "stability": "experimental",
            "summary": "Tags can be used to provide an alias instead of version numbers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 257
          },
          "name": "npmDistTag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "use `npmRegistryUrl` instead",
            "remarks": "Cannot be set together with `npmRegistryUrl`.",
            "stability": "deprecated",
            "summary": "The host name of the npm registry to publish to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 273
          },
          "name": "npmRegistry",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"https://registry.npmjs.org\"",
            "remarks": "Must be a URL (e.g. start with \"https://\" or \"http://\")",
            "stability": "experimental",
            "summary": "The base URL of the npm package registry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 266
          },
          "name": "npmRegistryUrl",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "NpmTaskExecution.PROJEN",
            "stability": "experimental",
            "summary": "Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 153
          },
          "name": "npmTaskExecution",
          "optional": true,
          "type": {
            "fqn": "projen.NpmTaskExecution"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "NodePackageManager.YARN",
            "stability": "experimental",
            "summary": "The Node Package Manager used to execute scripts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 169
          },
          "name": "packageManager",
          "optional": true,
          "type": {
            "fqn": "projen.NodePackageManager"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to project name",
            "stability": "experimental",
            "summary": "The \"name\" in package.json."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 22
          },
          "name": "packageName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Options for `peerDeps`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 98
          },
          "name": "peerDependencyOptions",
          "optional": true,
          "type": {
            "fqn": "projen.PeerDependencyOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies listed here are required to\nbe installed (and satisfied) by the _consumer_ of this library. Using peer\ndependencies allows you to ensure that only a single module of a certain\nlibrary exists in the `node_modules` tree of your consumers.\n\nNote that prior to npm@7, peer dependencies are _not_ automatically\ninstalled, which means that adding peer dependencies to a library will be a\nbreaking change for your customers.\n\nUnless `peerDependencyOptions.pinnedDevDependency` is disabled (it is\nenabled by default), projen will automatically add a dev dependency with a\npinned version for each peer dependency. This will ensure that you build &\ntest your module against the lowest peer version required.",
            "stability": "experimental",
            "summary": "Peer dependencies for this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 79
          },
          "name": "peerDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"npx projen\"",
            "remarks": "Can be used to customize in special environments.",
            "stability": "experimental",
            "summary": "The shell command to use in order to run the projen CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 162
          },
          "name": "projenCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "See https://classic.yarnpkg.com/en/docs/package-json/#toc-repository",
            "stability": "experimental",
            "summary": "The repository is the location where the actual code for your package lives."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 175
          },
          "name": "repository",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 181
          },
          "name": "repositoryDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "remarks": "If a script has the same name as a standard script,\nthe standard script will be overwritten.",
            "stability": "experimental",
            "summary": "npm scripts to include."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 147
          },
          "name": "scripts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Package's Stability."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 211
          },
          "name": "stability",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.NodeProject": {
      "assembly": "projen",
      "base": "projen.Project",
      "docs": {
        "stability": "experimental",
        "summary": "Node.js project."
      },
      "fqn": "projen.NodeProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/node-project.ts",
          "line": 417
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.NodeProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 289
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 628
          },
          "name": "addBins",
          "parameters": [
            {
              "name": "bins",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "deprecated": "use `project.buildTask.exec()`",
            "stability": "deprecated",
            "summary": "DEPRECATED."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 682
          },
          "name": "addBuildCommand",
          "parameters": [
            {
              "name": "commands",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Bundled dependencies will be added as normal dependencies as well as to the\n`bundledDependencies` section of your `package.json`.",
            "stability": "experimental",
            "summary": "Defines bundled dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 785
          },
          "name": "addBundledDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `project.compileTask.exec()`",
            "stability": "deprecated",
            "summary": "DEPRECATED."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 662
          },
          "name": "addCompileCommand",
          "parameters": [
            {
              "name": "commands",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines normal dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 739
          },
          "name": "addDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Defines development/test dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 752
          },
          "name": "addDevDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Directly set fields in `package.json`."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 692
          },
          "name": "addFields",
          "parameters": [
            {
              "docs": {
                "summary": "The fields to set."
              },
              "name": "fields",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds keywords to package.json (deduplicated)."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 702
          },
          "name": "addKeywords",
          "parameters": [
            {
              "docs": {
                "summary": "The keywords to add."
              },
              "name": "keywords",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "When adding peer dependencies, a devDependency will also be added on the\npinned version of the declared peer. This will ensure that you are testing\nyour code against the minimum version required from your consumers.",
            "stability": "experimental",
            "summary": "Defines peer dependencies."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 769
          },
          "name": "addPeerDeps",
          "parameters": [
            {
              "docs": {
                "remarks": "By default, the the dependency will\nbe installed in the next `npx projen` run and the version will be recorded\nin your `package.json` file. You can upgrade manually or using `yarn\nadd/upgrade`. If you wish to specify a version range use this syntax:\n`module@^7`.",
                "summary": "Names modules to install."
              },
              "name": "deps",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "deprecated": "use `project.testTask.exec()`",
            "stability": "deprecated",
            "summary": "DEPRECATED."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 672
          },
          "name": "addTestCommand",
          "parameters": [
            {
              "name": "commands",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if a script by the name name is defined."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 654
          },
          "name": "hasScript",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the script."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Removes the npm script (always successful)."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 646
          },
          "name": "removeScript",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the script."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If\nnpmTaskExecution is set to PROJEN, the command will be `npx projen TASK`.\nIf it is set to SHELL, the command will be `yarn run TASK` (or `npm run\nTASK`).",
            "stability": "experimental",
            "summary": "Returns the shell command to execute in order to run a task."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1005
          },
          "name": "runTaskCommand",
          "parameters": [
            {
              "docs": {
                "summary": "The task for which the command is required."
              },
              "name": "task",
              "type": {
                "fqn": "projen.tasks.Task"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Replaces the contents of an npm package.json script."
          },
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 638
          },
          "name": "setScript",
          "parameters": [
            {
              "docs": {
                "summary": "The script name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The command to execute."
              },
              "name": "command",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "NodeProject",
      "properties": [
        {
          "docs": {
            "deprecated": "use `package.allowLibraryDependencies`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 303
          },
          "name": "allowLibraryDependencies",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if workflows have anti-tamper checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 369
          },
          "name": "antitamper",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "remarks": "It spawns: compile + test + release + package",
            "stability": "experimental",
            "summary": "The task responsible for a full release build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 328
          },
          "name": "buildTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "remarks": "By default for node.js projects this task is empty.",
            "stability": "experimental",
            "summary": "Compiles the code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 313
          },
          "name": "compileTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "deprecated": "use `package.entrypoint`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 308
          },
          "name": "entrypoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 706
          },
          "name": "installWorkflowSteps",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use `package.addField(x, y)`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 413
          },
          "name": "manifest",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "deprecated": "use `package.npmDistTag`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 374
          },
          "name": "npmDistTag",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "deprecated": "use `package.npmRegistry`",
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 379
          },
          "name": "npmRegistry",
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "deprecated": "use `package.npmTaskExecution`",
            "stability": "deprecated",
            "summary": "Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 403
          },
          "name": "npmTaskExecution",
          "type": {
            "fqn": "projen.NpmTaskExecution"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "API for managing the node package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 293
          },
          "name": "package",
          "type": {
            "fqn": "projen.NodePackage"
          }
        },
        {
          "docs": {
            "deprecated": "use `package.packageManager`",
            "stability": "deprecated",
            "summary": "The package manager to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 386
          },
          "name": "packageManager",
          "type": {
            "fqn": "projen.NodePackageManager"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command to use in order to run the projen CLI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 408
          },
          "name": "projenCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The command to use to run scripts (e.g. `yarn run` or `npm run` depends on the package manager)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 391
          },
          "name": "runScriptCommand",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Compiles the test code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 323
          },
          "name": "testCompileTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tests the code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 318
          },
          "name": "testTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Automatic PR merges."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 333
          },
          "name": "autoMerge",
          "optional": true,
          "type": {
            "fqn": "projen.github.AutoMerge"
          }
        },
        {
          "docs": {
            "remarks": "`undefined` if `buildWorkflow` is disabled.",
            "stability": "experimental",
            "summary": "The PR build GitHub workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 340
          },
          "name": "buildWorkflow",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "projen.github.GithubWorkflow"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 341
          },
          "name": "buildWorkflowJobId",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Jest configuration (if enabled)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 396
          },
          "name": "jest",
          "optional": true,
          "type": {
            "fqn": "projen.Jest"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Maximum node version required by this pacakge."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 362
          },
          "name": "maxNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Minimum node.js version required by this package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 357
          },
          "name": "minNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The .npmignore file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 298
          },
          "name": "npmignore",
          "optional": true,
          "type": {
            "fqn": "projen.IgnoreFile"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` if the project does not have a\nrelease workflow.",
            "stability": "experimental",
            "summary": "Package publisher."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 352
          },
          "name": "publisher",
          "optional": true,
          "type": {
            "fqn": "projen.Publisher"
          }
        },
        {
          "docs": {
            "remarks": "`undefined` if `releaseWorkflow` is disabled.",
            "stability": "experimental",
            "summary": "The release GitHub workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 346
          },
          "name": "releaseWorkflow",
          "optional": true,
          "type": {
            "fqn": "projen.github.GithubWorkflow"
          }
        }
      ]
    },
    "projen.NodeProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NodeProjectOptions",
      "interfaces": [
        "projen.ProjectOptions",
        "projen.NodePackageOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 19
      },
      "name": "NodeProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"main\"",
            "remarks": "NOTE: this field is temporarily required as we migrate the default value\nfrom \"master\" to \"main\". Shortly, it will be made optional with \"main\" as\nthe default.",
            "stability": "experimental",
            "summary": "The name of the main release branch."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 58
          },
          "name": "defaultReleaseBranch",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Checks that after build there are no modified files on git."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 135
          },
          "name": "antitamper",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"dist\"",
            "stability": "experimental",
            "summary": "A directory which will contain artifacts to be published to npm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 268
          },
          "name": "artifactsDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true if not a subproject",
            "stability": "experimental",
            "summary": "Define a GitHub workflow for building PRs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 64
          },
          "name": "buildWorkflow",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Define a GitHub workflow step for sending code coverage metrics to https://codecov.io/ Uses codecov/codecov-action@v1 A secret is required for private repos. Configured with @codeCovTokenSecret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 72
          },
          "name": "codeCov",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- if this option is not specified, only public repositories are supported",
            "stability": "experimental",
            "summary": "Define the secret name for a specified https://codecov.io/ token A secret is required to send coverage for private repositories."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 79
          },
          "name": "codeCovTokenSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to the value of authorName or \"\" if `authorName` is undefined.",
            "stability": "experimental",
            "summary": "License copyright owner."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 25
          },
          "name": "copyrightOwner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- current year",
            "stability": "experimental",
            "summary": "The copyright years to put in the LICENSE file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 32
          },
          "name": "copyrightPeriod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include dependabot configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 149
          },
          "name": "dependabot",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Options for dependabot."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 156
          },
          "name": "dependabotOptions",
          "optional": true,
          "type": {
            "fqn": "projen.github.DependabotOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional entries to .gitignore."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 243
          },
          "name": "gitignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Setup jest unit tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 249
          },
          "name": "jest",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Jest options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 255
          },
          "name": "jestOptions",
          "optional": true,
          "type": {
            "fqn": "projen.JestOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"latest\"",
            "stability": "experimental",
            "summary": "Version requirement of `jsii-release` which is used to publish modules to npm."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 261
          },
          "name": "jsiiReleaseVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Adds mergify configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 163
          },
          "name": "mergify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"auto-merge\"",
            "remarks": "To disable, set this value to an empty string.",
            "stability": "experimental",
            "summary": "Automatically merge PRs that build successfully and have this label."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 179
          },
          "name": "mergifyAutoMergeLabel",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Options for mergify."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 170
          },
          "name": "mergifyOptions",
          "optional": true,
          "type": {
            "fqn": "projen.github.MergifyOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional entries to .npmignore."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 224
          },
          "name": "npmignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Defines an .npmignore file. Normally this is only needed for libraries that are packaged as tarballs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 219
          },
          "name": "npmignoreEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Indicates of \"projen\" should be installed as a devDependency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 47
          },
          "name": "projenDevDependency",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- \"true\" if mergify auto-merge is enabled (default)",
            "remarks": "Applies the `mergifyAutoMergeLabel` to the PR if enabled.",
            "stability": "experimental",
            "summary": "Automatically merge projen upgrade PRs when build passes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 203
          },
          "name": "projenUpgradeAutoMerge",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ \"0 6 * * *\" ]",
            "stability": "experimental",
            "summary": "Customize the projenUpgrade schedule in cron expression."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 210
          },
          "name": "projenUpgradeSchedule",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no automatic projen upgrade pull requests",
            "remarks": "This setting is a GitHub secret name which contains a GitHub Access Token\nwith `repo` and `workflow` permissions.\n\nThis token is used to submit the upgrade pull request, which will likely\ninclude workflow updates.\n\nTo create a personal access token see https://github.com/settings/tokens",
            "stability": "experimental",
            "summary": "Periodically submits a pull request for projen upgrades (executes `yarn projen:upgrade`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 195
          },
          "name": "projenUpgradeSecret",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Semver.latest()",
            "stability": "experimental",
            "summary": "Version of projen to install."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 40
          },
          "name": "projenVersion",
          "optional": true,
          "type": {
            "fqn": "projen.Semver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include a GitHub pull request template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 231
          },
          "name": "pullRequestTemplate",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default content",
            "stability": "experimental",
            "summary": "The contents of the pull request template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 238
          },
          "name": "pullRequestTemplateContents",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ \"main\" ]",
            "remarks": "Default value is based on defaultReleaseBranch.",
            "stability": "experimental",
            "summary": "Branches which trigger a release."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 109
          },
          "name": "releaseBranches",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically release new versions every commit to one of branches in `releaseBranches`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 93
          },
          "name": "releaseEveryCommit",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no scheduled releases",
            "stability": "experimental",
            "summary": "CRON schedule to trigger new releases."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 100
          },
          "name": "releaseSchedule",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Automatically release to npm when new versions are introduced."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 129
          },
          "name": "releaseToNpm",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true if not a subproject",
            "remarks": "Requires that `version` will be undefined.",
            "stability": "experimental",
            "summary": "Define a GitHub workflow for releasing from \"main\" when new versions are bumped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 87
          },
          "name": "releaseWorkflow",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"yarn install --frozen-lockfile && yarn projen\"",
            "stability": "experimental",
            "summary": "Workflow steps to use in order to bootstrap this repo."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 116
          },
          "name": "workflowBootstrapSteps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default image",
            "stability": "experimental",
            "summary": "Container image to use for GitHub workflows."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 123
          },
          "name": "workflowContainerImage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- same as `minNodeVersion`",
            "stability": "experimental",
            "summary": "The node version to use in GitHub workflows."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 142
          },
          "name": "workflowNodeVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.NodeWorkflowSteps": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NodeWorkflowSteps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-project.ts",
        "line": 1085
      },
      "name": "NodeWorkflowSteps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1086
          },
          "name": "antitamper",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-project.ts",
            "line": 1087
          },
          "name": "install",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.NpmAccess": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Npm package access level."
      },
      "fqn": "projen.NpmAccess",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-package.ts",
        "line": 984
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Package is public."
          },
          "name": "PUBLIC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Package can only be accessed with credentials."
          },
          "name": "RESTRICTED"
        }
      ],
      "name": "NpmAccess"
    },
    "projen.NpmTaskExecution": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.NpmTaskExecution",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/node-package.ts",
        "line": 929
      },
      "members": [
        {
          "docs": {
            "example": "scripts: {\n  \"compile\": \"projen compile\"\n}",
            "stability": "experimental",
            "summary": "`package.json` scripts invoke to the projen CLI."
          },
          "name": "PROJEN"
        },
        {
          "docs": {
            "example": "scripts: {\n  \"compile\": \"tsc\"\n}",
            "stability": "experimental",
            "summary": "Task is implemented directly as a shell script within `package.json`."
          },
          "name": "SHELL"
        }
      ],
      "name": "NpmTaskExecution"
    },
    "projen.ObjectFile": {
      "abstract": true,
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an Object file."
      },
      "fqn": "projen.ObjectFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/object-file.ts",
          "line": 51
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.ObjectFileOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.IMarkableFile"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/object-file.ts",
        "line": 28
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Syntactic sugar for `addOverride(path, undefined)`."
          },
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 123
          },
          "name": "addDeletionOverride",
          "parameters": [
            {
              "docs": {
                "summary": "The path of the value to delete."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "If the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal `.` in the property name, prefix with a `\\`. In most\nprogramming languages you will need to write this as `\"\\\\.\"` because the\n`\\` itself will need to be escaped.\n\nFor example,\n```typescript\nproject.tsconfig.file.addOverride('compilerOptions.alwaysStrict', true);\nproject.tsconfig.file.addOverride('compilerOptions.lib', ['dom', 'dom.iterable', 'esnext']);\n```\nwould add the overrides\n```json\n\"compilerOptions\": {\n   \"alwaysStrict\": true,\n   \"lib\": [\n     \"dom\",\n     \"dom.iterable\",\n     \"esnext\"\n   ]\n   ...\n}\n...\n```",
            "stability": "experimental",
            "summary": "Adds an override to the synthesized object file."
          },
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 98
          },
          "name": "addOverride",
          "parameters": [
            {
              "docs": {
                "remarks": "Any intermediate keys\nwill be created as needed.",
                "summary": "- The path of the property, you can use dot notation to override values in complex types."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Could be primitive or complex.",
                "summary": "- The value."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 127
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ObjectFile",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if the projen marker JSON-comment will be added to the output object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 39
          },
          "name": "marker",
          "overrides": "projen.IMarkableFile",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Indicates if empty objects and arrays are omitted from the output object."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 49
          },
          "name": "omitEmpty",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.ObjectFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `ObjectFile`."
      },
      "fqn": "projen.ObjectFileOptions",
      "interfaces": [
        "projen.FileBaseOptions",
        "projen.MarkableFileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/object-file.ts",
        "line": 9
      },
      "name": "ObjectFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "{} an empty object (use `file.obj` to mutate).",
            "remarks": "You can modify the object's contents\nbefore synthesis.",
            "stability": "experimental",
            "summary": "The object that will be serialized."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 16
          },
          "name": "obj",
          "optional": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Omits empty objects and arrays."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/object-file.ts",
            "line": 22
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.PeerDependencyOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.PeerDependencyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/node-package.ts",
        "line": 953
      },
      "name": "PeerDependencyOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically add a pinned dev dependency."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/node-package.ts",
            "line": 958
          },
          "name": "pinnedDevDependency",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Project": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Base project."
      },
      "fqn": "projen.Project",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/project.ts",
          "line": 182
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.ProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/project.ts",
        "line": 95
      },
      "methods": [
        {
          "docs": {
            "remarks": "Can be used when, for example, some\nsource files include the projen marker and we don't want them to be erased during synth.",
            "stability": "experimental",
            "summary": "Exclude the matching files from pre-synth cleanup."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 344
          },
          "name": "addExcludeFromCleanup",
          "parameters": [
            {
              "docs": {
                "summary": "The glob patterns to match."
              },
              "name": "globs",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "This will fail if the project already has\na task with this name.",
            "stability": "experimental",
            "summary": "Adds a new task to this project."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 264
          },
          "name": "addTask",
          "parameters": [
            {
              "docs": {
                "summary": "The task name to add."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Task properties."
              },
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.tasks.Task"
            }
          }
        },
        {
          "docs": {
            "deprecated": "- use `project.logger.info(message)` to show messages during synthesis",
            "stability": "deprecated",
            "summary": "Prints a \"tip\" message during synthesis."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 334
          },
          "name": "addTip",
          "parameters": [
            {
              "docs": {
                "summary": "The message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 405
          },
          "name": "postSynthesize"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called before all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 400
          },
          "name": "preSynthesize"
        },
        {
          "docs": {
            "remarks": "1. Call \"this.preSynthesize()\"\n2. Delete all generated files\n3. Synthesize all sub-projects\n4. Synthesize all components of this project\n5. Call \"postSynthesize()\" for all components of this project\n6. Call \"this.postSynthesize()\"",
            "stability": "experimental",
            "summary": "Synthesize all project files into `outdir`."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 358
          },
          "name": "synth"
        },
        {
          "docs": {
            "returns": "a `FileBase` or undefined if there is no file in that path",
            "stability": "experimental",
            "summary": "Finds a file at the specified relative path within this project and all its subprojects."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 276
          },
          "name": "tryFindFile",
          "parameters": [
            {
              "docs": {
                "remarks": "If this path is relative, it will be resolved\nfrom the root of _this_ project.",
                "summary": "The file path."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.FileBase"
            }
          }
        },
        {
          "docs": {
            "deprecated": "use `tryFindObjectFile`",
            "stability": "deprecated",
            "summary": "Finds a json file by name."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 299
          },
          "name": "tryFindJsonFile",
          "parameters": [
            {
              "docs": {
                "summary": "The file path."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.JsonFile"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Finds an object file (like JsonFile, YamlFile, etc.) by name."
          },
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 316
          },
          "name": "tryFindObjectFile",
          "parameters": [
            {
              "docs": {
                "summary": "The file path."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.ObjectFile"
            }
          }
        }
      ],
      "name": "Project",
      "properties": [
        {
          "const": true,
          "docs": {
            "remarks": "Normally\nthis task should synthesize the project files.",
            "stability": "experimental",
            "summary": "The name of the default task (the task executed when `projen` is run without arguments)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 100
          },
          "name": "DEFAULT_TASK",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns all the components within this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 245
          },
          "name": "components",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.Component"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 165
          },
          "name": "deps",
          "type": {
            "fqn": "projen.deps.Dependencies"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All files in this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 252
          },
          "name": "files",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.FileBase"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": ".gitignore."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 110
          },
          "name": "gitignore",
          "type": {
            "fqn": "projen.IgnoreFile"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Logging utilities."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 170
          },
          "name": "logger",
          "type": {
            "fqn": "projen.Logger"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 105
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Absolute output directory of this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 120
          },
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 160
          },
          "name": "projectType",
          "type": {
            "fqn": "projen.ProjectType"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The root project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 125
          },
          "name": "root",
          "type": {
            "fqn": "projen.Project"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 141
          },
          "name": "tasks",
          "type": {
            "fqn": "projen.tasks.Tasks"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` if devContainer boolean is false",
            "stability": "experimental",
            "summary": "Access for .devcontainer.json (used for GitHub Codespaces)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 155
          },
          "name": "devContainer",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.DevContainer"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` for subprojects.",
            "stability": "experimental",
            "summary": "Access all github components."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 132
          },
          "name": "github",
          "optional": true,
          "type": {
            "fqn": "projen.github.GitHub"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` if gitpod boolean is false",
            "stability": "experimental",
            "summary": "Access for Gitpod."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 148
          },
          "name": "gitpod",
          "optional": true,
          "type": {
            "fqn": "projen.Gitpod"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The JSII FQN of the project type (if known)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 175
          },
          "name": "jsiiFqn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "If undefined, this is the root project.",
            "stability": "experimental",
            "summary": "A parent project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 115
          },
          "name": "parent",
          "optional": true,
          "type": {
            "fqn": "projen.Project"
          }
        },
        {
          "docs": {
            "remarks": "This will be `undefined` for subprojects.",
            "stability": "experimental",
            "summary": "Access all VSCode components."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 139
          },
          "name": "vscode",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.VsCode"
          }
        }
      ]
    },
    "projen.ProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.ProjectOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/project.ts",
        "line": 19
      },
      "name": "ProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "$BASEDIR",
            "stability": "experimental",
            "summary": "This is the name of your project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 25
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Add a `clobber` task which resets the repo to origin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 63
          },
          "name": "clobber",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Add a VSCode development environment (used for GitHub Codespaces)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 57
          },
          "name": "devContainer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Add a Gitpod development environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 50
          },
          "name": "gitpod",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "The JSII FQN (fully qualified name) of the project class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 89
          },
          "name": "jsiiFqn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "stability": "experimental",
            "summary": "Configure logging options such as verbosity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 83
          },
          "name": "logging",
          "optional": true,
          "type": {
            "fqn": "projen.LoggerOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\".\"",
            "remarks": "Relative to this directory, all files are synthesized.\n\nIf this project has a parent, this directory is relative to the parent\ndirectory and it cannot be the same as the parent or any of it's other\nsub-projects.",
            "stability": "experimental",
            "summary": "The root directory of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 43
          },
          "name": "outdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The parent project, if this project is part of a bigger project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 30
          },
          "name": "parent",
          "optional": true,
          "type": {
            "fqn": "projen.Project"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ProjectType.UNKNOWN",
            "stability": "experimental",
            "summary": "Which type of project this is (library/app)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 77
          },
          "name": "projectType",
          "optional": true,
          "type": {
            "fqn": "projen.ProjectType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- { filename: 'README.md', contents: '# replace this' }",
            "example": "\"{ filename: 'readme.md', contents: '# title' }\"",
            "stability": "experimental",
            "summary": "The README setup."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/project.ts",
            "line": 71
          },
          "name": "readme",
          "optional": true,
          "type": {
            "fqn": "projen.SampleReadmeProps"
          }
        }
      ]
    },
    "projen.ProjectType": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Which type of project this is."
      },
      "fqn": "projen.ProjectType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/project.ts",
        "line": 444
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "This module may be a either a library or an app."
          },
          "name": "UNKNOWN"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "This is a library, intended to be published to a package manager and consumed by other projects."
          },
          "name": "LIB"
        },
        {
          "docs": {
            "remarks": "Its artifacts are intended to\nbe deployed or published for end-user consumption.",
            "stability": "experimental",
            "summary": "This is an app (service, tool, website, etc)."
          },
          "name": "APP"
        }
      ],
      "name": "ProjectType"
    },
    "projen.Publisher": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "kw\nUnder the hood, it uses https://github.com/aws/jsii-release",
        "stability": "experimental",
        "summary": "Implements GitHub jobs for publishing modules to package managers."
      },
      "fqn": "projen.Publisher",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/publisher.ts",
          "line": 51
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.PublisherOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 45
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a go publishing job."
          },
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 193
          },
          "name": "publishToGo",
          "parameters": [
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "type": {
                "fqn": "projen.JsiiReleaseGo"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Publishes artifacts from `java/**` to Maven."
          },
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 122
          },
          "name": "publishToMaven",
          "parameters": [
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "type": {
                "fqn": "projen.JsiiReleaseMaven"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Publishes artifacts from `js/**` to npm."
          },
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 64
          },
          "name": "publishToNpm",
          "parameters": [
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "type": {
                "fqn": "projen.JsiiReleaseNpm"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Publishes artifacts from `dotnet/**` to NuGet Gallary."
          },
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 94
          },
          "name": "publishToNuget",
          "parameters": [
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "type": {
                "fqn": "projen.JsiiReleaseNuget"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Publishes wheel artifacts from `python` to PyPI."
          },
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 162
          },
          "name": "publishToPyPi",
          "parameters": [
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "type": {
                "fqn": "projen.JsiiReleasePyPi"
              }
            }
          ]
        }
      ],
      "name": "Publisher",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 48
          },
          "name": "artifactName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 47
          },
          "name": "buildJobId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 49
          },
          "name": "jsiiReleaseVersion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 46
          },
          "name": "workflow",
          "type": {
            "fqn": "projen.github.GithubWorkflow"
          }
        }
      ]
    },
    "projen.PublisherOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Publisher`."
      },
      "fqn": "projen.PublisherOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/publisher.ts",
        "line": 10
      },
      "name": "PublisherOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The artifact is expected to include a subdirectory for each release target:\n`go` (GitHub), `dotnet` (NuGet), `java` (Maven), `js` (npm), `python`\n(PyPI).",
            "see": "https://github.com/aws/jsii-release",
            "stability": "experimental",
            "summary": "The name of the artifact to download (e.g. `dist`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 30
          },
          "name": "artifactName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "All publish jobs will take a dependency on this job.",
            "stability": "experimental",
            "summary": "The job ID that produces the build artifacts."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 19
          },
          "name": "buildJobId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The github workflow to add release jobs to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 14
          },
          "name": "workflow",
          "type": {
            "fqn": "projen.github.GithubWorkflow"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"latest\"",
            "stability": "experimental",
            "summary": "Version requirement for `jsii-release`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/publisher.ts",
            "line": 37
          },
          "name": "jsiiReleaseVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.ResolveOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Resolve options."
      },
      "fqn": "projen.ResolveOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/file.ts",
        "line": 140
      },
      "name": "ResolveOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Context arguments."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 151
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Omits empty arrays and objects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/file.ts",
            "line": 145
          },
          "name": "omitEmpty",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.Rule": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "A Make rule."
      },
      "fqn": "projen.Rule",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/makefile.ts",
        "line": 7
      },
      "name": "Rule",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "If the rule is phony then instead this represents the command's name(s).",
            "stability": "experimental",
            "summary": "Files to be created or updated by this rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 13
          },
          "name": "targets",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Marks whether the target is phony."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 34
          },
          "name": "phony",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Files that are used as inputs to create a target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 20
          },
          "name": "prerequisites",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Commands that are run (using prerequisites as inputs) to create a target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/makefile.ts",
            "line": 27
          },
          "name": "recipe",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.SampleDir": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Use this to create sample code files",
        "stability": "experimental",
        "summary": "Renders the given files into the directory if the directory does not exist."
      },
      "fqn": "projen.SampleDir",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Create sample files in the given directory if the given directory does not exist."
        },
        "locationInModule": {
          "filename": "src/sample-file.ts",
          "line": 82
        },
        "parameters": [
          {
            "docs": {
              "summary": "Parent project to add files to."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "docs": {
              "remarks": "If directory already exists, nothing is added.",
              "summary": "directory to add files to."
            },
            "name": "dir",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "options for which files to create."
            },
            "name": "options",
            "type": {
              "fqn": "projen.SampleDirOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 72
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes files to the project output directory."
          },
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 88
          },
          "name": "synthesize",
          "overrides": "projen.Component"
        }
      ],
      "name": "SampleDir"
    },
    "projen.SampleDirOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "SampleDir options."
      },
      "fqn": "projen.SampleDirOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 62
      },
      "name": "SampleDirOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The files to render into the directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 66
          },
          "name": "files",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.SampleFile": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Use this for creating example code files or other resources.",
        "stability": "experimental",
        "summary": "Produces a file with the given contents but only once, if the file doesn't already exist."
      },
      "fqn": "projen.SampleFile",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Creates a new SampleFile object."
        },
        "locationInModule": {
          "filename": "src/sample-file.ts",
          "line": 31
        },
        "parameters": [
          {
            "docs": {
              "summary": "- the project to tie this file to."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "docs": {
              "summary": "- the relative path in the project o put the file."
            },
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- the options for the file."
            },
            "name": "options",
            "type": {
              "fqn": "projen.SampleFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 21
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Synthesizes files to the project output directory."
          },
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 37
          },
          "name": "synthesize",
          "overrides": "projen.Component"
        }
      ],
      "name": "SampleFile"
    },
    "projen.SampleFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for the SampleFile object."
      },
      "fqn": "projen.SampleFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/sample-file.ts",
        "line": 10
      },
      "name": "SampleFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The contents of the file to write."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/sample-file.ts",
            "line": 14
          },
          "name": "contents",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.SampleReadme": {
      "assembly": "projen",
      "base": "projen.SampleFile",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a README.md sample file. You are expected to manage this file after creation."
      },
      "fqn": "projen.SampleReadme",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/readme.ts",
          "line": 30
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "projen.SampleReadmeProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/readme.ts",
        "line": 29
      },
      "name": "SampleReadme"
    },
    "projen.SampleReadmeProps": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "SampleReadme Properties."
      },
      "fqn": "projen.SampleReadmeProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/readme.ts",
        "line": 7
      },
      "name": "SampleReadmeProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"# replace this\"",
            "stability": "experimental",
            "summary": "The contents."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/readme.ts",
            "line": 20
          },
          "name": "contents",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"README.md\"",
            "example": "\"readme.md\"",
            "stability": "experimental",
            "summary": "The name of the README.md file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/readme.ts",
            "line": 14
          },
          "name": "filename",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Semver": {
      "assembly": "projen",
      "docs": {
        "deprecated": "This class will be removed in upcoming releases. if you wish to\nspecify semver requirements in `deps`, `devDeps`, etc, specify them like so\n`express@^2.1`.",
        "stability": "deprecated"
      },
      "fqn": "projen.Semver",
      "kind": "class",
      "locationInModule": {
        "filename": "src/semver.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "remarks": ">= version\n< next major version",
            "stability": "deprecated",
            "summary": "Accept any minor version."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 28
          },
          "name": "caret",
          "parameters": [
            {
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Latest version."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 15
          },
          "name": "latest",
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 10
          },
          "name": "of",
          "parameters": [
            {
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "deprecated",
            "summary": "Accept only an exact version."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 20
          },
          "name": "pinned",
          "parameters": [
            {
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": ">= version\n< next minor version",
            "stability": "deprecated",
            "summary": "Accept patches."
          },
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 36
          },
          "name": "tilde",
          "parameters": [
            {
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.Semver"
            }
          },
          "static": true
        }
      ],
      "name": "Semver",
      "properties": [
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 40
          },
          "name": "spec",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 38
          },
          "name": "mode",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "deprecated"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/semver.ts",
            "line": 44
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.Stability": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Stability",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/jsii-project.ts",
        "line": 123
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "EXPERIMENTAL"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "STABLE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "DEPRECATED"
        }
      ],
      "name": "Stability"
    },
    "projen.TextFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "A text file."
      },
      "fqn": "projen.TextFile",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Defines a text file."
        },
        "locationInModule": {
          "filename": "src/textfile.ts",
          "line": 29
        },
        "parameters": [
          {
            "docs": {
              "summary": "The project."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "docs": {
              "summary": "File path."
            },
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "Options."
            },
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.TextFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/textfile.ts",
        "line": 19
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a line to the text file."
          },
          "locationInModule": {
            "filename": "src/textfile.ts",
            "line": 39
          },
          "name": "addLine",
          "parameters": [
            {
              "docs": {
                "summary": "the line to add (can use tokens)."
              },
              "name": "line",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/textfile.ts",
            "line": 43
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "TextFile"
    },
    "projen.TextFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `TextFile`."
      },
      "fqn": "projen.TextFileOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/textfile.ts",
        "line": 7
      },
      "name": "TextFileOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "[] empty file",
            "remarks": "You can use `addLine()` to append lines.",
            "stability": "experimental",
            "summary": "The contents of the text file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/textfile.ts",
            "line": 13
          },
          "name": "lines",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.TomlFile": {
      "assembly": "projen",
      "base": "projen.ObjectFile",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a TOML file."
      },
      "fqn": "projen.TomlFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/toml.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.TomlFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/toml.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/toml.ts",
            "line": 19
          },
          "name": "synthesizeContent",
          "overrides": "projen.ObjectFile",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "TomlFile"
    },
    "projen.TomlFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `TomlFile`."
      },
      "fqn": "projen.TomlFileOptions",
      "interfaces": [
        "projen.ObjectFileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/toml.ts",
        "line": 9
      },
      "name": "TomlFileOptions"
    },
    "projen.TypeScriptAppProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptProject",
      "docs": {
        "custom": {
          "pjid": "typescript-app"
        },
        "stability": "experimental",
        "summary": "TypeScript app."
      },
      "fqn": "projen.TypeScriptAppProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 771
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 770
      },
      "name": "TypeScriptAppProject"
    },
    "projen.TypeScriptCompilerOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypeScriptCompilerOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 462
      },
      "name": "TypeScriptCompilerOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Allow JavaScript files to be compiled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 468
          },
          "name": "allowJs",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This does not affect code emit, just typechecking.",
            "stability": "experimental",
            "summary": "Allow default imports from modules with no default export."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 700
          },
          "name": "allowSyntheticDefaultImports",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Ensures that your files are parsed in the ECMAScript strict mode, and emit ‚Äúuse strict‚Äù for each source file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 476
          },
          "name": "alwaysStrict",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "To be specified along with the above."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 488
          },
          "name": "declaration",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Offers a way to configure the root directory for where declaration files are emitted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 482
          },
          "name": "declarationDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Emit __importStar and __importDefault helpers for runtime babel ecosystem compatibility and enable --allowSyntheticDefaultImports for typesystem compatibility."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 497
          },
          "name": "esModuleInterop",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 504
          },
          "name": "experimentalDecorators",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Disallow inconsistently-cased references to the same file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 511
          },
          "name": "forceConsistentCasingInFileNames",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 519
          },
          "name": "inlineSourceMap",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 527
          },
          "name": "inlineSources",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Perform additional checks to ensure that separate compilation (such as with transpileModule or @babel/plugin-transform-typescript) would be safe."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 535
          },
          "name": "isolatedModules",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "stability": "experimental",
            "summary": "Support JSX in .tsx files: \"react\", \"preserve\", \"react-native\" etc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 542
          },
          "name": "jsx",
          "optional": true,
          "type": {
            "fqn": "projen.TypeScriptJsxMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[ \"es2018\" ]",
            "remarks": "ES2016, ES5, ES2018).",
            "stability": "experimental",
            "summary": "Reference for type definitions / libraries to use (eg."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 549
          },
          "name": "lib",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"CommonJS\"",
            "remarks": "See https://www.typescriptlang.org/docs/handbook/modules.html#ambient-modules.",
            "stability": "experimental",
            "summary": "Sets the module system for the program."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 557
          },
          "name": "module",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"node\"",
            "remarks": "Either \"Node\" for Node.js/io.js style resolution, or \"Classic\".",
            "stability": "experimental",
            "summary": "Determine how modules get resolved."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 564
          },
          "name": "moduleResolution",
          "optional": true,
          "type": {
            "fqn": "projen.TypeScriptModuleResolution"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Do not emit outputs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 571
          },
          "name": "noEmit",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 579
          },
          "name": "noEmitOnError",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Ensures that any non-empty\ncase inside a switch statement includes either break or return. This means you won‚Äôt\naccidentally ship a case fallthrough bug.",
            "stability": "experimental",
            "summary": "Report errors for fallthrough cases in switch statements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 588
          },
          "name": "noFallthroughCasesInSwitch",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 596
          },
          "name": "noImplicitAny",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When enabled, TypeScript will check all code paths in a function to ensure they return a value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 604
          },
          "name": "noImplicitReturns",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Raise error on ‚Äòthis‚Äô expressions with an implied ‚Äòany‚Äô type."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 610
          },
          "name": "noImplicitThis",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Report errors on unused local variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 617
          },
          "name": "noUnusedLocals",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Report errors on unused parameters in functions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 624
          },
          "name": "noUnusedParameters",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Output directory for the compiled files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 688
          },
          "name": "outDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Allows importing modules with a ‚Äò.json‚Äô extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 632
          },
          "name": "resolveJsonModule",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Only use to control the output directory structure with `outDir`.",
            "stability": "experimental",
            "summary": "Specifies the root directory of input files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 695
          },
          "name": "rootDir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Skip type checking of all declaration files (*.d.ts)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 639
          },
          "name": "skipLibCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "Turning this on is equivalent to enabling all of the strict mode family\noptions, which are outlined below. You can then turn off individual strict mode family checks as\nneeded.",
            "stability": "experimental",
            "summary": "The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 649
          },
          "name": "strict",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This can lead to unexpected errors at runtime.\nWhen strictNullChecks is true, null and undefined have their own distinct types and you‚Äôll\nget a type error if you try to use them where a concrete value is expected.",
            "stability": "experimental",
            "summary": "When strictNullChecks is false, null and undefined are effectively ignored by the language."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 659
          },
          "name": "strictNullChecks",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 667
          },
          "name": "strictPropertyInitialization",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Do not emit declarations for code that has an @internal annotation in it‚Äôs JSDoc comment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 674
          },
          "name": "stripInternal",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"ES2018\"",
            "remarks": "You might choose to set\na lower target if your code is deployed to older environments, or a higher target if your\ncode is guaranteed to run in newer environments.",
            "stability": "experimental",
            "summary": "Modern browsers support all ES6 features, so ES6 is a good choice."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 683
          },
          "name": "target",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.TypeScriptJsxMode": {
      "assembly": "projen",
      "docs": {
        "see": "https://www.typescriptlang.org/docs/handbook/jsx.html",
        "stability": "experimental",
        "summary": "Determines how JSX should get transformed into valid JavaScript."
      },
      "fqn": "projen.TypeScriptJsxMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 433
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Keeps the JSX as part of the output to be further consumed by another transform step (e.g. Babel)."
          },
          "name": "PRESERVE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Converts JSX syntax into React.createElement, does not need to go through a JSX transformation before use, and the output will have a .js file extension."
          },
          "name": "REACT"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Keeps all JSX like 'preserve' mode, but output will have a .js extension."
          },
          "name": "REACT_NATIVE"
        },
        {
          "docs": {
            "see": "https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#react-17-jsx-factories",
            "stability": "experimental",
            "summary": "Passes `key` separately from props and always passes `children` as props (since React 17)."
          },
          "name": "REACT_JSX"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Same as `REACT_JSX` with additional debug data."
          },
          "name": "REACT_JSXDEV"
        }
      ],
      "name": "TypeScriptJsxMode"
    },
    "projen.TypeScriptLibraryProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptProject",
      "docs": {
        "deprecated": "use `TypeScriptProject`",
        "stability": "deprecated"
      },
      "fqn": "projen.TypeScriptLibraryProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 153
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 785
      },
      "name": "TypeScriptLibraryProject"
    },
    "projen.TypeScriptLibraryProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "deprecated": "use TypeScriptProjectOptions",
        "stability": "deprecated"
      },
      "fqn": "projen.TypeScriptLibraryProjectOptions",
      "interfaces": [
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 791
      },
      "name": "TypeScriptLibraryProjectOptions"
    },
    "projen.TypeScriptModuleResolution": {
      "assembly": "projen",
      "docs": {
        "see": "https://www.typescriptlang.org/docs/handbook/module-resolution.html",
        "stability": "experimental",
        "summary": "Determines how modules get resolved."
      },
      "fqn": "projen.TypeScriptModuleResolution",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 412
      },
      "members": [
        {
          "docs": {
            "see": "https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic",
            "stability": "experimental",
            "summary": "TypeScript's former default resolution strategy."
          },
          "name": "CLASSIC"
        },
        {
          "docs": {
            "see": "https://www.typescriptlang.org/docs/handbook/module-resolution.html#node",
            "stability": "experimental",
            "summary": "Resolution strategy which attempts to mimic the Node.js module resolution strategy at runtime."
          },
          "name": "NODE"
        }
      ],
      "name": "TypeScriptModuleResolution"
    },
    "projen.TypeScriptProject": {
      "assembly": "projen",
      "base": "projen.NodeProject",
      "docs": {
        "custom": {
          "pjid": "typescript"
        },
        "stability": "experimental",
        "summary": "TypeScript project."
      },
      "fqn": "projen.TypeScriptProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 153
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 122
      },
      "name": "TypeScriptProject",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 124
          },
          "name": "docsDirectory",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which compiled .js files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 136
          },
          "name": "libdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which the .ts sources reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 131
          },
          "name": "srcdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which tests reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 141
          },
          "name": "testdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The \"watch\" task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 146
          },
          "name": "watchTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 123
          },
          "name": "docgen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 125
          },
          "name": "eslint",
          "optional": true,
          "type": {
            "fqn": "projen.Eslint"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The \"package\" task (or undefined if `package` is set to `false`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 151
          },
          "name": "packageTask",
          "optional": true,
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 126
          },
          "name": "tsconfig",
          "optional": true,
          "type": {
            "fqn": "projen.TypescriptConfig"
          }
        }
      ]
    },
    "projen.TypeScriptProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypeScriptProjectOptions",
      "interfaces": [
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 13
      },
      "name": "TypeScriptProjectOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- if `testdir` is under `src/**`, the default is `true`, otherwise the default is `false.",
            "stability": "experimental",
            "summary": "Compile the code before running tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 95
          },
          "name": "compileBeforeTest",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Do not generate a `tsconfig.json` file (used by jsii projects since tsconfig.json is generated by the jsii compiler)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 88
          },
          "name": "disableTsconfig",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Docgen by Typedoc."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 68
          },
          "name": "docgen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"docs\"",
            "stability": "experimental",
            "summary": "Docs directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 75
          },
          "name": "docsDirectory",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- .d.ts file derived from the project's entrypoint (usually lib/index.d.ts)",
            "stability": "experimental",
            "summary": "The .d.ts file that includes the type declarations for this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 107
          },
          "name": "entrypointTypes",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Setup eslint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 45
          },
          "name": "eslint",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- opinionated default options",
            "stability": "experimental",
            "summary": "Eslint options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 51
          },
          "name": "eslintOptions",
          "optional": true,
          "type": {
            "fqn": "projen.EslintOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"lib\"",
            "stability": "experimental",
            "summary": "Typescript  artifacts output directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 19
          },
          "name": "libdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Defines a `yarn package` command that will produce a tarball and place it under `dist/js`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 115
          },
          "name": "package",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `src/` and `test/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 101
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"src\"",
            "stability": "experimental",
            "summary": "Typescript sources directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 26
          },
          "name": "srcdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"test\"",
            "remarks": "If this directory is under `srcdir` (e.g. `src/test`, `src/__tests__`),\nthen tests are going to be compiled into `lib/` and executed as javascript.\nIf the test directory is outside of `src`, then we configure jest to\ncompile the code in-memory.",
            "stability": "experimental",
            "summary": "Jest tests directory. Tests files should be named `xxx.test.ts`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 38
          },
          "name": "testdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Custom TSConfig."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 80
          },
          "name": "tsconfig",
          "optional": true,
          "type": {
            "fqn": "projen.TypescriptConfigOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"latest\"",
            "remarks": "NOTE: Typescript is not semantically versioned and should remain on the\nsame minor, so we recommend using a `~` dependency (e.g. `~1.2.3`).",
            "stability": "experimental",
            "summary": "TypeScript version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 61
          },
          "name": "typescriptVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.TypescriptConfig": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypescriptConfig",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/typescript.ts",
          "line": 710
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.TypescriptConfigOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 703
      },
      "name": "TypescriptConfig",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 704
          },
          "name": "compilerOptions",
          "type": {
            "fqn": "projen.TypeScriptCompilerOptions"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 706
          },
          "name": "exclude",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 708
          },
          "name": "file",
          "type": {
            "fqn": "projen.JsonFile"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 707
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 705
          },
          "name": "include",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.TypescriptConfigOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.TypescriptConfigOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/typescript.ts",
        "line": 382
      },
      "name": "TypescriptConfigOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Compiler options to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 404
          },
          "name": "compilerOptions",
          "type": {
            "fqn": "projen.TypeScriptCompilerOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- node_modules is excluded by default",
            "stability": "experimental",
            "summary": "Filters results from the \"include\" option."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 399
          },
          "name": "exclude",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"tsconfig.json\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 386
          },
          "name": "fileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all .ts files recursively",
            "stability": "experimental",
            "summary": "Specifies a list of glob patterns that match TypeScript files to be included in compilation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/typescript.ts",
            "line": 392
          },
          "name": "include",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.Version": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.Version",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/version.ts",
          "line": 21
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.VersionOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/version.ts",
        "line": 17
      },
      "name": "Version",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/version.ts",
            "line": 19
          },
          "name": "bumpTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns the current version of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/version.ts",
            "line": 72
          },
          "name": "currentVersion",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.VersionOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.VersionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/version.ts",
        "line": 10
      },
      "name": "VersionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the release branch where the code and tags are pushed to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/version.ts",
            "line": 14
          },
          "name": "releaseBranch",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.XmlFile": {
      "assembly": "projen",
      "base": "projen.ObjectFile",
      "docs": {
        "remarks": "Objects passed in will be synthesized using the npm \"xml\" library.",
        "see": "https://www.npmjs.com/package/xml",
        "stability": "experimental",
        "summary": "Represents an XML file."
      },
      "fqn": "projen.XmlFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/xmlfile.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.XmlFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/xmlfile.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/xmlfile.ts",
            "line": 22
          },
          "name": "synthesizeContent",
          "overrides": "projen.ObjectFile",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "XmlFile"
    },
    "projen.XmlFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `XmlFile`."
      },
      "fqn": "projen.XmlFileOptions",
      "interfaces": [
        "projen.ObjectFileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/xmlfile.ts",
        "line": 9
      },
      "name": "XmlFileOptions"
    },
    "projen.YamlFile": {
      "assembly": "projen",
      "base": "projen.ObjectFile",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a YAML file."
      },
      "fqn": "projen.YamlFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/yaml.ts",
          "line": 15
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.YamlFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/yaml.ts",
        "line": 14
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/yaml.ts",
            "line": 19
          },
          "name": "synthesizeContent",
          "overrides": "projen.ObjectFile",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "YamlFile"
    },
    "projen.YamlFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `JsonFile`."
      },
      "fqn": "projen.YamlFileOptions",
      "interfaces": [
        "projen.ObjectFileOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/yaml.ts",
        "line": 9
      },
      "name": "YamlFileOptions"
    },
    "projen.deps.Dependencies": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "To add a dependency you can use a project-type specific API such as\n`nodeProject.addDeps()` or use the generic API of `project.deps`:",
        "stability": "experimental",
        "summary": "The `Dependencies` component is responsible to track the list of dependencies a project has, and then used by project types as the model for rendering project-specific dependency manifests such as the dependencies section `package.json` files."
      },
      "fqn": "projen.deps.Dependencies",
      "initializer": {
        "docs": {
          "stability": "experimental",
          "summary": "Adds a dependencies component to the project."
        },
        "locationInModule": {
          "filename": "src/deps/dependencies.ts",
          "line": 50
        },
        "parameters": [
          {
            "docs": {
              "summary": "The parent project."
            },
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/deps/dependencies.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "remarks": "Given `foo@^3.4.0` returns `{ name: \"foo\", version: \"^3.4.0\" }`.\nGiven `bar@npm:@bar/legacy` returns `{ name: \"bar\", version: \"npm:@bar/legacy\" }`.",
            "stability": "experimental",
            "summary": "Returns the coordinates of a dependency spec."
          },
          "locationInModule": {
            "filename": "src/deps/dependencies.ts",
            "line": 29
          },
          "name": "parseDependency",
          "parameters": [
            {
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.deps.DependencyCoordinates"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a dependency to this project."
          },
          "locationInModule": {
            "filename": "src/deps/dependencies.ts",
            "line": 106
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "The dependency spec in the format `MODULE[@VERSION]` where `MODULE` is the package-manager-specific module name and `VERSION` is an optional semantic version requirement (e.g. `^3.4.0`)."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The type of the dependency."
              },
              "name": "type",
              "type": {
                "fqn": "projen.deps.DependencyType"
              }
            },
            {
              "name": "metadata",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.deps.Dependency"
            }
          }
        },
        {
          "docs": {
            "remarks": "Fails if there is no dependency defined by that name or if `type` is not\nprovided and there is more then one dependency type for this dependency.",
            "returns": "a copy (cannot be modified)",
            "stability": "experimental",
            "summary": "Returns a dependency by name."
          },
          "locationInModule": {
            "filename": "src/deps/dependencies.ts",
            "line": 84
          },
          "name": "getDependency",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the dependency."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If this dependency is defined only for a\nsingle type, this argument can be omitted.",
                "summary": "The dependency type."
              },
              "name": "type",
              "optional": true,
              "type": {
                "fqn": "projen.deps.DependencyType"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.deps.Dependency"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Removes a dependency."
          },
          "locationInModule": {
            "filename": "src/deps/dependencies.ts",
            "line": 126
          },
          "name": "removeDependency",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the module to remove (without the version)."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "This is only required if there the\ndependency is defined for multiple types.",
                "summary": "The dependency type."
              },
              "name": "type",
              "optional": true,
              "type": {
                "fqn": "projen.deps.DependencyType"
              }
            }
          ]
        }
      ],
      "name": "Dependencies",
      "namespace": "deps",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The project-relative path of the deps manifest file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/dependencies.ts",
            "line": 21
          },
          "name": "MANIFEST_FILE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "The list is sorted by type->name->version",
            "stability": "experimental",
            "summary": "A copy of all dependencies recorded for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/dependencies.ts",
            "line": 68
          },
          "name": "all",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.deps.Dependency"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.deps.Dependency": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents a project dependency."
      },
      "fqn": "projen.deps.Dependency",
      "interfaces": [
        "projen.deps.DependencyCoordinates"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/deps/model.ts",
        "line": 31
      },
      "name": "Dependency",
      "namespace": "deps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Which type of dependency this is (runtime, build-time, etc)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/model.ts",
            "line": 36
          },
          "name": "type",
          "type": {
            "fqn": "projen.deps.DependencyType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "stability": "experimental",
            "summary": "Additional JSON metadata associated with the dependency (package manager specific)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/model.ts",
            "line": 43
          },
          "name": "metadata",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.deps.DependencyCoordinates": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Coordinates of the dependency (name and version)."
      },
      "fqn": "projen.deps.DependencyCoordinates",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/deps/model.ts",
        "line": 11
      },
      "name": "DependencyCoordinates",
      "namespace": "deps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "NOTE: For package managers that use complex coordinates (like Maven), we\nwill codify it into a string somehow.",
            "stability": "experimental",
            "summary": "The package manager name of the dependency (e.g. `leftpad` for npm)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/model.ts",
            "line": 18
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- requirement is managed by the package manager (e.g. npm/yarn).",
            "stability": "experimental",
            "summary": "Semantic version version requirement."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/model.ts",
            "line": 25
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.deps.DependencyType": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Type of dependency."
      },
      "fqn": "projen.deps.DependencyType",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/deps/model.ts",
        "line": 49
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The dependency is required for the program/library during runtime."
          },
          "name": "RUNTIME"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The dependency is required at runtime but expected to be installed by the consumer."
          },
          "name": "PEER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The dependency is bundled and shipped with the module, so consumers are not required to install it."
          },
          "name": "BUNDLED"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The dependency is required to run the `build` task."
          },
          "name": "BUILD"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The dependency is required to run the `test` task."
          },
          "name": "TEST"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The dependency is required for development (e.g. IDE plugins)."
          },
          "name": "DEVENV"
        }
      ],
      "name": "DependencyType",
      "namespace": "deps"
    },
    "projen.deps.DepsManifest": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.deps.DepsManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/deps/model.ts",
        "line": 1
      },
      "name": "DepsManifest",
      "namespace": "deps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "All dependencies of this module."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/deps/model.ts",
            "line": 5
          },
          "name": "dependencies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.deps.Dependency"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.AutoMerge": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "If `buildJob` is specified, the specified GitHub workflow job ID is required\nto succeed in order for the PR to be merged.\n\n`approvedReviews` specified the number of code review approvals required for\nthe PR to be merged.",
        "stability": "experimental",
        "summary": "Sets up mergify to merging approved pull requests."
      },
      "fqn": "projen.github.AutoMerge",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/auto-merge.ts",
          "line": 38
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.AutoMergeOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/auto-merge.ts",
        "line": 35
      },
      "name": "AutoMerge",
      "namespace": "github",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/auto-merge.ts",
            "line": 36
          },
          "name": "autoMergeLabel",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.github.AutoMergeOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.AutoMergeOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/auto-merge.ts",
        "line": 4
      },
      "name": "AutoMergeOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "Number of approved code reviews."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/auto-merge.ts",
            "line": 14
          },
          "name": "approvedReviews",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"auto-merge\"",
            "remarks": "To disable, set this value to an empty string.",
            "stability": "experimental",
            "summary": "Automatically merge PRs that build successfully and have this label."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/auto-merge.ts",
            "line": 23
          },
          "name": "autoMergeLabel",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The GitHub job ID of the build workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/auto-merge.ts",
            "line": 8
          },
          "name": "buildJob",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.github.Dependabot": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Since module versions are managed in projen, the versioning strategy will be\nconfigured to \"lockfile-only\" which means that only updates that can be done\non the lockfile itself will be proposed.",
        "stability": "experimental",
        "summary": "Defines dependabot configuration for node projects."
      },
      "fqn": "projen.github.Dependabot",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/dependabot.ts",
          "line": 141
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.DependabotOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 132
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Ignores a dependency from automatic updates."
          },
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 205
          },
          "name": "addIgnore",
          "parameters": [
            {
              "docs": {
                "summary": "Use to ignore updates for dependencies with matching names, optionally using `*` to match zero or more characters."
              },
              "name": "dependencyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If\nyou want to define a range, use the standard pattern for the package\nmanager (for example: `^1.0.0` for npm, or `~> 2.0` for Bundler).",
                "summary": "Use to ignore specific versions or ranges of versions."
              },
              "name": "versions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "Dependabot",
      "namespace": "github",
      "properties": [
        {
          "docs": {
            "see": "https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates",
            "stability": "experimental",
            "summary": "The raw dependabot configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 137
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.github.DependabotIgnore": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "The ignore option supports the following options.",
        "stability": "experimental",
        "summary": "You can use the `ignore` option to customize which dependencies are updated."
      },
      "fqn": "projen.github.DependabotIgnore",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 53
      },
      "name": "DependabotIgnore",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "For Java dependencies, the format of the dependency-name attribute is:\n`groupId:artifactId`, for example: `org.kohsuke:github-api`.",
            "stability": "experimental",
            "summary": "Use to ignore updates for dependencies with matching names, optionally using `*` to match zero or more characters."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 61
          },
          "name": "dependencyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If you want to\ndefine a range, use the standard pattern for the package manager (for\nexample: `^1.0.0` for npm, or `~> 2.0` for Bundler).",
            "stability": "experimental",
            "summary": "Use to ignore specific versions or ranges of versions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 68
          },
          "name": "versions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.DependabotOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.DependabotOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 6
      },
      "name": "DependabotOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Automatically merge dependabot PRs if build CI build passes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 27
          },
          "name": "autoMerge",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "The ignore option supports the following options.",
            "stability": "experimental",
            "summary": "You can use the `ignore` option to customize which dependencies are updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 34
          },
          "name": "ignore",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.github.DependabotIgnore"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This is required since projen updates may cause changes in committed files\nand anti-tamper checks will fail.\n\nProjen upgrades are covered through the `ProjenUpgrade` class.",
            "stability": "experimental",
            "summary": "Ignores updates to `projen`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 46
          },
          "name": "ignoreProjen",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ScheduleInterval.DAILY",
            "stability": "experimental",
            "summary": "How often to check for new versions and raise pull requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 12
          },
          "name": "scheduleInterval",
          "optional": true,
          "type": {
            "fqn": "projen.github.DependabotScheduleInterval"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "VersioningStrategy.LOCKFILE_ONLY The default is to only update the\nlock file because package.json is controlled by projen and any outside\nupdates will fail the build.",
            "stability": "experimental",
            "summary": "The strategy to use when edits manifest and lock files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/dependabot.ts",
            "line": 21
          },
          "name": "versioningStrategy",
          "optional": true,
          "type": {
            "fqn": "projen.github.VersioningStrategy"
          }
        }
      ]
    },
    "projen.github.DependabotScheduleInterval": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "How often to check for new versions and raise pull requests for version updates."
      },
      "fqn": "projen.github.DependabotScheduleInterval",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 75
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Runs on every weekday, Monday to Friday."
          },
          "name": "DAILY"
        },
        {
          "docs": {
            "remarks": "By default, this is on Monday.",
            "stability": "experimental",
            "summary": "Runs once each week."
          },
          "name": "WEEKLY"
        },
        {
          "docs": {
            "remarks": "This is on the first day of the month.",
            "stability": "experimental",
            "summary": "Runs once each month."
          },
          "name": "MONTHLY"
        }
      ],
      "name": "DependabotScheduleInterval",
      "namespace": "github"
    },
    "projen.github.GitHub": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.GitHub",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/component.ts",
          "line": 7
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/github.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 28
          },
          "name": "addDependabot",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.github.DependabotOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.github.Dependabot"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 10
          },
          "name": "addMergifyRules",
          "parameters": [
            {
              "name": "rules",
              "type": {
                "fqn": "projen.github.MergifyRule"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 24
          },
          "name": "addPullRequestTemplate",
          "parameters": [
            {
              "name": "content",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.github.PullRequestTemplate"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/github.ts",
            "line": 20
          },
          "name": "addWorkflow",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.github.GithubWorkflow"
            }
          }
        }
      ],
      "name": "GitHub",
      "namespace": "github"
    },
    "projen.github.GithubWorkflow": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.GithubWorkflow",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/workflows.ts",
          "line": 11
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/workflows.ts",
        "line": 5
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/workflows.ts",
            "line": 28
          },
          "name": "addJobs",
          "parameters": [
            {
              "name": "jobs",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/workflows.ts",
            "line": 21
          },
          "name": "on",
          "parameters": [
            {
              "name": "events",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ]
        }
      ],
      "name": "GithubWorkflow",
      "namespace": "github",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/workflows.ts",
            "line": 9
          },
          "name": "file",
          "type": {
            "fqn": "projen.YamlFile"
          }
        }
      ]
    },
    "projen.github.Mergify": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.Mergify",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/mergify.ts",
          "line": 18
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.MergifyOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/mergify.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 31
          },
          "name": "addRule",
          "parameters": [
            {
              "name": "rule",
              "type": {
                "fqn": "projen.github.MergifyRule"
              }
            }
          ]
        }
      ],
      "name": "Mergify",
      "namespace": "github"
    },
    "projen.github.MergifyOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.MergifyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/mergify.ts",
        "line": 11
      },
      "name": "MergifyOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 12
          },
          "name": "rules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.github.MergifyRule"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.MergifyRule": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.github.MergifyRule",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/mergify.ts",
        "line": 5
      },
      "name": "MergifyRule",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 8
          },
          "name": "actions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 7
          },
          "name": "conditions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/mergify.ts",
            "line": 6
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.github.PullRequestTemplate": {
      "assembly": "projen",
      "base": "projen.TextFile",
      "docs": {
        "stability": "experimental",
        "summary": "Template for GitHub pull requests."
      },
      "fqn": "projen.github.PullRequestTemplate",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/github/pr-template.ts",
          "line": 20
        },
        "parameters": [
          {
            "name": "github",
            "type": {
              "fqn": "projen.github.GitHub"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.github.PullRequestTemplateOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/github/pr-template.ts",
        "line": 19
      },
      "name": "PullRequestTemplate",
      "namespace": "github"
    },
    "projen.github.PullRequestTemplateOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `PullRequestTemplate`."
      },
      "fqn": "projen.github.PullRequestTemplateOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/github/pr-template.ts",
        "line": 7
      },
      "name": "PullRequestTemplateOptions",
      "namespace": "github",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- a standard default template will be created.",
            "remarks": "You can use `addLine()` to add additional lines.",
            "stability": "experimental",
            "summary": "The contents of the template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/github/pr-template.ts",
            "line": 13
          },
          "name": "lines",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.github.VersioningStrategy": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "The strategy to use when edits manifest and lock files."
      },
      "fqn": "projen.github.VersioningStrategy",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/github/dependabot.ts",
        "line": 95
      },
      "members": [
        {
          "docs": {
            "remarks": "Ignore any new\nversions that would require package manifest changes.",
            "stability": "experimental",
            "summary": "Only create pull requests to update lockfiles updates."
          },
          "name": "LOCKFILE_ONLY"
        },
        {
          "docs": {
            "remarks": "- For libraries, the range of versions is widened.",
            "stability": "experimental",
            "summary": "- For apps, the version requirements are increased."
          },
          "name": "AUTO"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Relax the version requirement to include both the new and old version, when possible."
          },
          "name": "WIDEN"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Always increase the version requirement to match the new version."
          },
          "name": "INCREASE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Increase the version requirement only when required by the new version."
          },
          "name": "INCREASE_IF_NECESSARY"
        }
      ],
      "name": "VersioningStrategy",
      "namespace": "github"
    },
    "projen.java.JavaProject": {
      "assembly": "projen",
      "base": "projen.Project",
      "docs": {
        "custom": {
          "pjid": "java"
        },
        "stability": "experimental",
        "summary": "Java project."
      },
      "fqn": "projen.java.JavaProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/java-project.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.java.JavaProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/java-project.ts",
        "line": 103
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a runtime dependency."
          },
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 197
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<groupId>/<artifactId>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The plug in is also added as a BUILD dep to the project.",
            "stability": "experimental",
            "summary": "Adds a build plugin to the pom."
          },
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 218
          },
          "name": "addPlugin",
          "parameters": [
            {
              "docs": {
                "summary": "dependency spec (`group/artifact@version`)."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "plugin options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.java.PluginOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.deps.Dependency"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a test dependency."
          },
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 206
          },
          "name": "addTestDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<groupId>/<artifactId>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "JavaProject",
      "namespace": "java",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Compile component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 122
          },
          "name": "compile",
          "type": {
            "fqn": "projen.java.MavenCompile"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Maven artifact output directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 132
          },
          "name": "distdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Packaging component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 117
          },
          "name": "packaging",
          "type": {
            "fqn": "projen.java.MavenPackaging"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "API for managing `pom.xml`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 107
          },
          "name": "pom",
          "type": {
            "fqn": "projen.java.Pom"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "JUnit component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 112
          },
          "name": "junit",
          "optional": true,
          "type": {
            "fqn": "projen.java.Junit"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Projenrc component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 127
          },
          "name": "projenrc",
          "optional": true,
          "type": {
            "fqn": "projen.java.Projenrc"
          }
        }
      ]
    },
    "projen.java.JavaProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `JavaProject`."
      },
      "fqn": "projen.java.JavaProjectOptions",
      "interfaces": [
        "projen.ProjectOptions",
        "projen.java.PomOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/java-project.ts",
        "line": 12
      },
      "name": "JavaProjectOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- defaults",
            "stability": "experimental",
            "summary": "Compile options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 68
          },
          "name": "compileOptions",
          "optional": true,
          "type": {
            "fqn": "projen.java.MavenCompileOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies use the format: `<groupId>/<artifactId>@<semver>`\n\nAdditional dependencies can be added via `project.addDependency()`.",
            "stability": "experimental",
            "summary": "List of runtime dependencies for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 31
          },
          "name": "deps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"dist/java\"",
            "stability": "experimental",
            "summary": "Final artifact output directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 18
          },
          "name": "distdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include junit tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 50
          },
          "name": "junit",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults",
            "stability": "experimental",
            "summary": "junit options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 56
          },
          "name": "junitOptions",
          "optional": true,
          "type": {
            "fqn": "projen.java.JunitOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults",
            "stability": "experimental",
            "summary": "Packaging options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 62
          },
          "name": "packagingOptions",
          "optional": true,
          "type": {
            "fqn": "projen.java.MavenPackagingOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This will install `projen` as a java depedency and will add a `synth` task which\nwill compile & execute `main()` from `src/main/java/projenrc.java`.",
            "stability": "experimental",
            "summary": "Use projenrc in java."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 89
          },
          "name": "projenrcJava",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default options",
            "stability": "experimental",
            "summary": "Options related to projenrc in java."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 95
          },
          "name": "projenrcJavaOptions",
          "optional": true,
          "type": {
            "fqn": "projen.java.ProjenrcCommonOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Include sample code and test if the relevant directories don't exist."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 73
          },
          "name": "sample",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"org.acme\"",
            "stability": "experimental",
            "summary": "The java package to use for the code sample."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 79
          },
          "name": "sampleJavaPackage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies use the format: `<groupId>/<artifactId>@<semver>`\n\nAdditional dependencies can be added via `project.addTestDependency()`.",
            "stability": "experimental",
            "summary": "List of test dependencies for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/java-project.ts",
            "line": 42
          },
          "name": "testDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.java.Junit": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Implements JUnit-based testing."
      },
      "fqn": "projen.java.Junit",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/junit.ts",
          "line": 37
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.java.JunitOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/junit.ts",
        "line": 36
      },
      "name": "Junit",
      "namespace": "java"
    },
    "projen.java.JunitOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Junit`."
      },
      "fqn": "projen.java.JunitOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/junit.ts",
        "line": 13
      },
      "name": "JunitOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Java pom."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/junit.ts",
            "line": 17
          },
          "name": "pom",
          "type": {
            "fqn": "projen.java.Pom"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"org.acme\"",
            "stability": "experimental",
            "summary": "Java package for test sample."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/junit.ts",
            "line": 30
          },
          "name": "sampleJavaPackage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"5.7.0\"",
            "stability": "experimental",
            "summary": "Junit version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/junit.ts",
            "line": 24
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.MavenCompile": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Adds the maven-compiler plugin to a POM file and the `compile` task."
      },
      "fqn": "projen.java.MavenCompile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/maven-compile.ts",
          "line": 31
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "pom",
            "type": {
              "fqn": "projen.java.Pom"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.java.MavenCompileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/maven-compile.ts",
        "line": 28
      },
      "name": "MavenCompile",
      "namespace": "java",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-compile.ts",
            "line": 29
          },
          "name": "compileTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.java.MavenCompileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `MavenCompile`."
      },
      "fqn": "projen.java.MavenCompileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/maven-compile.ts",
        "line": 9
      },
      "name": "MavenCompileOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"1.8\"",
            "stability": "experimental",
            "summary": "Source language version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-compile.ts",
            "line": 15
          },
          "name": "source",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"1.8\"",
            "stability": "experimental",
            "summary": "Target JVM version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-compile.ts",
            "line": 22
          },
          "name": "target",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.MavenPackaging": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Configures a maven project to produce a .jar archive with sources and javadocs."
      },
      "fqn": "projen.java.MavenPackaging",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/maven-packaging.ts",
          "line": 44
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "pom",
            "type": {
              "fqn": "projen.java.Pom"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.java.MavenPackagingOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/maven-packaging.ts",
        "line": 38
      },
      "name": "MavenPackaging",
      "namespace": "java",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The \"package\" task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-packaging.ts",
            "line": 42
          },
          "name": "task",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.java.MavenPackagingOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `MavenPackage`."
      },
      "fqn": "projen.java.MavenPackagingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/maven-packaging.ts",
        "line": 9
      },
      "name": "MavenPackagingOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"dist/java\"",
            "stability": "experimental",
            "summary": "Where to place the package output?"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-packaging.ts",
            "line": 20
          },
          "name": "distdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include javadocs jar in package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-packaging.ts",
            "line": 26
          },
          "name": "javadocs",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Exclude source files from docs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-packaging.ts",
            "line": 32
          },
          "name": "javadocsExclude",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include sources jar in package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-packaging.ts",
            "line": 14
          },
          "name": "sources",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.java.MavenSample": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Java code sample."
      },
      "fqn": "projen.java.MavenSample",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/maven-sample.ts",
          "line": 17
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.java.MavenSampleOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/maven-sample.ts",
        "line": 16
      },
      "name": "MavenSample",
      "namespace": "java"
    },
    "projen.java.MavenSampleOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.java.MavenSampleOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/maven-sample.ts",
        "line": 6
      },
      "name": "MavenSampleOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Project root java package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/maven-sample.ts",
            "line": 10
          },
          "name": "package",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.PluginExecution": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Plugin execution definition."
      },
      "fqn": "projen.java.PluginExecution",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/pom.ts",
        "line": 279
      },
      "name": "PluginExecution",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Which Maven goals this plugin should be associated with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 288
          },
          "name": "goals",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 283
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.PluginOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for Maven plugins."
      },
      "fqn": "projen.java.PluginOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/pom.ts",
        "line": 253
      },
      "name": "PluginOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "stability": "experimental",
            "summary": "Plugin key/value configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 258
          },
          "name": "configuration",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies are in `<groupId>/<artifactId>@<semver>` format.",
            "stability": "experimental",
            "summary": "You could configure the dependencies for the plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 273
          },
          "name": "dependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "stability": "experimental",
            "summary": "Plugin executions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 264
          },
          "name": "executions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.java.PluginExecution"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.java.Pom": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "It is\nan XML file that contains information about the project and configuration\ndetails used by Maven to build the project.",
        "stability": "experimental",
        "summary": "A Project Object Model or POM is the fundamental unit of work in Maven."
      },
      "fqn": "projen.java.Pom",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/pom.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.java.PomOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/pom.ts",
        "line": 91
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a runtime dependency."
          },
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 163
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<groupId>/<artifactId>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "The plug in is also added as a BUILD dep to the project.",
            "stability": "experimental",
            "summary": "Adds a build plugin to the pom."
          },
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 184
          },
          "name": "addPlugin",
          "parameters": [
            {
              "docs": {
                "summary": "dependency spec (`group/artifact@version`)."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "plugin options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.java.PluginOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.deps.Dependency"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a key/value property to the pom."
          },
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 154
          },
          "name": "addProperty",
          "parameters": [
            {
              "docs": {
                "summary": "the key."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a test dependency."
          },
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 172
          },
          "name": "addTestDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<groupId>/<artifactId>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Pom",
      "namespace": "java",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Maven artifact ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 105
          },
          "name": "artifactId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the pom file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 95
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Maven group ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 100
          },
          "name": "groupId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Maven packaging format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 115
          },
          "name": "packaging",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 110
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project description."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 125
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project display name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 120
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Project URL."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 130
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.PomOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Pom`."
      },
      "fqn": "projen.java.PomOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/pom.ts",
        "line": 17
      },
      "name": "PomOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"my-app\"",
            "remarks": "Although\nthe groupId is important, people within the group will rarely mention the\ngroupId in discussion (they are often all be the same ID, such as the\nMojoHaus project groupId: org.codehaus.mojo). It, along with the groupId,\ncreates a key that separates this project from every other project in the\nworld (at least, it should :) ). Along with the groupId, the artifactId\nfully defines the artifact's living quarters within the repository. In the\ncase of the above project, my-project lives in\n$M2_REPO/org/codehaus/mojo/my-project.",
            "stability": "experimental",
            "summary": "The artifactId is generally the name that the project is known by."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 46
          },
          "name": "artifactId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"org.acme\"",
            "remarks": "For example,\nall core Maven artifacts do (well, should) live under the groupId\norg.apache.maven. Group ID's do not necessarily use the dot notation, for\nexample, the junit project. Note that the dot-notated groupId does not have\nto correspond to the package structure that the project contains. It is,\nhowever, a good practice to follow. When stored within a repository, the\ngroup acts much like the Java packaging structure does in an operating\nsystem. The dots are replaced by OS specific directory separators (such as\n'/' in Unix) which becomes a relative directory structure from the base\nrepository. In the example given, the org.codehaus.mojo group lives within\nthe directory $M2_REPO/org/codehaus/mojo.",
            "stability": "experimental",
            "summary": "This is generally unique amongst an organization or a project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 32
          },
          "name": "groupId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"0.1.0\"",
            "remarks": "groupId:artifactId denotes a\nsingle project but they cannot delineate which incarnation of that project\nwe are talking about. Do we want the junit:junit of 2018 (version 4.12), or\nof 2007 (version 3.8.2)? In short: code changes, those changes should be\nversioned, and this element keeps those versions in line. It is also used\nwithin an artifact's repository to separate versions from each other.\nmy-project version 1.0 files live in the directory structure\n$M2_REPO/org/codehaus/mojo/my-project/1.0.",
            "stability": "experimental",
            "summary": "This is the last piece of the naming puzzle."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 59
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "remarks": "Although this should not replace\nformal documentation, a quick comment to any readers of the POM is always\nhelpful.",
            "stability": "experimental",
            "summary": "Description of a project is always good."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 75
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"jar\"",
            "stability": "experimental",
            "summary": "Project packaging format."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 66
          },
          "name": "packaging",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "undefined",
            "remarks": "This is a nice gesture for\nprojects users, however, so that they know where the project lives.",
            "stability": "experimental",
            "summary": "The URL, like the name, is not required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/pom.ts",
            "line": 83
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.Projenrc": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "This will install `org.projen/projen` as a Maven dependency and will add a\n`synth` task which will compile & execute `main()` from\n`src/main/java/projenrc.java`.",
        "stability": "experimental",
        "summary": "Allows writing projenrc files in java."
      },
      "fqn": "projen.java.Projenrc",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/java/projenrc.ts",
          "line": 65
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "pom",
            "type": {
              "fqn": "projen.java.Pom"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.java.ProjenrcOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/java/projenrc.ts",
        "line": 54
      },
      "name": "Projenrc",
      "namespace": "java",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the java class that includes the projen entrypoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/projenrc.ts",
            "line": 58
          },
          "name": "className",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.java.ProjenrcCommonOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `Projenrc`."
      },
      "fqn": "projen.java.ProjenrcCommonOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/projenrc.ts",
        "line": 12
      },
      "name": "ProjenrcCommonOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"projenrc\"",
            "stability": "experimental",
            "summary": "The name of the Java class which contains the `main()` method for projen."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/projenrc.ts",
            "line": 17
          },
          "name": "className",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- current version",
            "stability": "experimental",
            "summary": "The projen version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/projenrc.ts",
            "line": 23
          },
          "name": "projenVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This means that projenrc will be under\n`src/test/java/projenrc.java` and projen will be defined as a test\ndependency. This enforces that application code does not take a dependency\non projen code.\n\nIf this is disabled, projenrc should be under\n`src/main/java/projenrc.java`.",
            "stability": "experimental",
            "summary": "Defines projenrc under the test scope instead of the main scope, which is reserved to the app."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/projenrc.ts",
            "line": 37
          },
          "name": "testScope",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.java.ProjenrcOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.java.ProjenrcOptions",
      "interfaces": [
        "projen.java.ProjenrcCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/java/projenrc.ts",
        "line": 40
      },
      "name": "ProjenrcOptions",
      "namespace": "java",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Project initialization options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/java/projenrc.ts",
            "line": 44
          },
          "name": "initializationOptions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.python.IPackageProvider": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.IPackageProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-deps.ts",
        "line": 30
      },
      "name": "IPackageProvider",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "An array of packages (may be dynamically generated)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-deps.ts",
            "line": 34
          },
          "name": "packages",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.deps.Dependency"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.python.IPythonDeps": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.IPythonDeps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-deps.ts",
        "line": 4
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds a runtime dependency."
          },
          "locationInModule": {
            "filename": "src/python/python-deps.ts",
            "line": 15
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Adds a dev dependency."
          },
          "locationInModule": {
            "filename": "src/python/python-deps.ts",
            "line": 22
          },
          "name": "addDevDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Installs dependencies (called during post-synthesis)."
          },
          "locationInModule": {
            "filename": "src/python/python-deps.ts",
            "line": 27
          },
          "name": "installDependencies"
        }
      ],
      "name": "IPythonDeps",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A task that installs and updates dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-deps.ts",
            "line": 8
          },
          "name": "installTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.python.IPythonEnv": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.IPythonEnv",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-env.ts",
        "line": 1
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Initializes the virtual environment if it doesn't exist (called during post-synthesis)."
          },
          "locationInModule": {
            "filename": "src/python/python-env.ts",
            "line": 5
          },
          "name": "setupEnvironment"
        }
      ],
      "name": "IPythonEnv",
      "namespace": "python"
    },
    "projen.python.IPythonPackaging": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.IPythonPackaging",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-packaging.ts",
        "line": 4
      },
      "name": "IPythonPackaging",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A task that packages the project for distribution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 8
          },
          "name": "packageTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A task that uploads the package to a package repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 13
          },
          "name": "publishTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.python.Pip": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Manages dependencies using a requirements.txt file and the pip CLI tool."
      },
      "fqn": "projen.python.Pip",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/pip.ts",
          "line": 20
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "_options",
            "optional": true,
            "type": {
              "fqn": "projen.python.PipOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.python.IPythonDeps"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/pip.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a runtime dependency."
          },
          "locationInModule": {
            "filename": "src/python/pip.ts",
            "line": 40
          },
          "name": "addDependency",
          "overrides": "projen.python.IPythonDeps",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a dev dependency."
          },
          "locationInModule": {
            "filename": "src/python/pip.ts",
            "line": 49
          },
          "name": "addDevDependency",
          "overrides": "projen.python.IPythonDeps",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Installs dependencies (called during post-synthesis)."
          },
          "locationInModule": {
            "filename": "src/python/pip.ts",
            "line": 56
          },
          "name": "installDependencies",
          "overrides": "projen.python.IPythonDeps"
        }
      ],
      "name": "Pip",
      "namespace": "python",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that installs and updates dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/pip.ts",
            "line": 18
          },
          "name": "installTask",
          "overrides": "projen.python.IPythonDeps",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.python.PipOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for pip."
      },
      "fqn": "projen.python.PipOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/pip.ts",
        "line": 12
      },
      "name": "PipOptions",
      "namespace": "python"
    },
    "projen.python.Poetry": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Manage project dependencies, virtual environments, and packaging through the poetry CLI tool."
      },
      "fqn": "projen.python.Poetry",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/poetry.ts",
          "line": 25
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.python.PythonPackagingOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.python.IPythonDeps",
        "projen.python.IPythonEnv",
        "projen.python.IPythonPackaging"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/poetry.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a runtime dependency."
          },
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 108
          },
          "name": "addDependency",
          "overrides": "projen.python.IPythonDeps",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a dev dependency."
          },
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 117
          },
          "name": "addDevDependency",
          "overrides": "projen.python.IPythonDeps",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Installs dependencies (called during post-synthesis)."
          },
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 142
          },
          "name": "installDependencies",
          "overrides": "projen.python.IPythonDeps"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Initializes the virtual environment if it doesn't exist (called during post-synthesis)."
          },
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 124
          },
          "name": "setupEnvironment",
          "overrides": "projen.python.IPythonEnv"
        }
      ],
      "name": "Poetry",
      "namespace": "python",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that installs and updates dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 16
          },
          "name": "installTask",
          "overrides": "projen.python.IPythonDeps",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that packages the project for distribution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 17
          },
          "name": "packageTask",
          "overrides": "projen.python.IPythonPackaging",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that uploads the package to a package repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 18
          },
          "name": "publishTask",
          "overrides": "projen.python.IPythonPackaging",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that uploads the package to the Test PyPI repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 23
          },
          "name": "publishTestTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.python.PoetryPyproject": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "see": "https://python-poetry.org/docs/pyproject/",
        "stability": "experimental",
        "summary": "Represents configuration of a pyproject.toml file for a Poetry project."
      },
      "fqn": "projen.python.PoetryPyproject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/poetry.ts",
          "line": 265
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.python.PoetryPyprojectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/poetry.ts",
        "line": 262
      },
      "name": "PoetryPyproject",
      "namespace": "python",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 263
          },
          "name": "file",
          "type": {
            "fqn": "projen.TomlFile"
          }
        }
      ]
    },
    "projen.python.PoetryPyprojectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.PoetryPyprojectOptions",
      "interfaces": [
        "projen.python.PoetryPyprojectOptionsWithoutDeps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/poetry.ts",
        "line": 239
      },
      "name": "PoetryPyprojectOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "example": "{ requests: \"^2.13.0\" }",
            "remarks": "The python version for which your package is compatible is also required.",
            "stability": "experimental",
            "summary": "A list of dependencies for the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 247
          },
          "name": "dependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "example": "{ requests: \"^2.13.0\" }",
            "stability": "experimental",
            "summary": "A list of development dependencies for the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 254
          },
          "name": "devDependencies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.python.PoetryPyprojectOptionsWithoutDeps": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.PoetryPyprojectOptionsWithoutDeps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/poetry.ts",
        "line": 149
      },
      "name": "PoetryPyprojectOptionsWithoutDeps",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be in the form \"name <email>\"",
            "stability": "experimental",
            "summary": "The authors of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 176
          },
          "name": "authors",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "https://pypi.org/classifiers/",
            "stability": "experimental",
            "summary": "A list of PyPI trove classifiers that describe the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 213
          },
          "name": "classifiers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A short description of the package (required)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 163
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A URL to the documentation of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 201
          },
          "name": "documentation",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If a VCS is being used for a package, the exclude field will be seeded with\nthe VCS‚Äô ignore settings (.gitignore for git for example).",
            "stability": "experimental",
            "summary": "A list of patterns that will be excluded in the final package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 231
          },
          "name": "exclude",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A URL to the website of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 191
          },
          "name": "homepage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A list of patterns that will be included in the final package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 223
          },
          "name": "include",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A list of keywords (max: 5) that the package is related to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 206
          },
          "name": "keywords",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If the project is proprietary and does not use a specific license, you\ncan set this value as \"Proprietary\".",
            "stability": "experimental",
            "summary": "License of this package as an SPDX identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 171
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Must be in the form \"name <email>\"",
            "stability": "experimental",
            "summary": "the maintainers of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 181
          },
          "name": "maintainers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the package (required)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 153
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A list of packages and modules to include in the final distribution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 218
          },
          "name": "packages",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the readme file of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 186
          },
          "name": "readme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A URL to the repository of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 196
          },
          "name": "repository",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The scripts or executables that will be installed when installing the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 236
          },
          "name": "scripts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Version of the package (required)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/poetry.ts",
            "line": 158
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.python.Pytest": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.Pytest",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/pytest.ts",
          "line": 30
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.python.PytestOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/pytest.ts",
        "line": 27
      },
      "name": "Pytest",
      "namespace": "python",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/pytest.ts",
            "line": 28
          },
          "name": "testTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.python.PytestOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.PytestOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/pytest.ts",
        "line": 6
      },
      "name": "PytestOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Stop the testing process after the first N failures."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/pytest.ts",
            "line": 24
          },
          "name": "maxFailures",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'tests'",
            "stability": "experimental",
            "summary": "Directory with tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/pytest.ts",
            "line": 19
          },
          "name": "testdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"6.2.1\"",
            "stability": "experimental",
            "summary": "Pytest version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/pytest.ts",
            "line": 12
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.python.PythonPackagingOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.PythonPackagingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-packaging.ts",
        "line": 16
      },
      "name": "PythonPackagingOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_USER_EMAIL",
            "stability": "experimental",
            "summary": "Author's e-mail."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 29
          },
          "name": "authorEmail",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$GIT_USER_NAME",
            "stability": "experimental",
            "summary": "Author's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 22
          },
          "name": "authorName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"0.1.0\"",
            "stability": "experimental",
            "summary": "Version of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 36
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "https://pypi.org/classifiers/",
            "stability": "experimental",
            "summary": "A list of PyPI trove classifiers that describe the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 58
          },
          "name": "classifiers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A short description of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 41
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A URL to the website of the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 51
          },
          "name": "homepage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "License of this package as an SPDX identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 46
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional options to set for poetry if using poetry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 68
          },
          "name": "poetryOptions",
          "optional": true,
          "type": {
            "fqn": "projen.python.PoetryPyprojectOptionsWithoutDeps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Additional fields to pass in the setup() function if using setuptools."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-packaging.ts",
            "line": 63
          },
          "name": "setupConfig",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.python.PythonProject": {
      "assembly": "projen",
      "base": "projen.Project",
      "docs": {
        "custom": {
          "pjid": "python"
        },
        "stability": "experimental",
        "summary": "Python project."
      },
      "fqn": "projen.python.PythonProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/python-project.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.python.PythonProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/python-project.ts",
        "line": 118
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a runtime dependency."
          },
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 393
          },
          "name": "addDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a dev dependency."
          },
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 402
          },
          "name": "addDevDependency",
          "parameters": [
            {
              "docs": {
                "summary": "Format `<module>@<semver>`."
              },
              "name": "spec",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Order is *not* guaranteed.",
            "stability": "experimental",
            "summary": "Called after all components are synthesized."
          },
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 406
          },
          "name": "postSynthesize",
          "overrides": "projen.Project"
        }
      ],
      "name": "PythonProject",
      "namespace": "python",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "API for managing dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 133
          },
          "name": "depsManager",
          "type": {
            "fqn": "projen.python.IPythonDeps"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "API for mangaging the Python runtime environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 138
          },
          "name": "envManager",
          "type": {
            "fqn": "projen.python.IPythonEnv"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Python module name (the project name, with any hyphens or periods replaced with underscores)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 123
          },
          "name": "moduleName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Version of the package for distribution (should follow semver)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 128
          },
          "name": "version",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "Only applies when the `projectType` is LIB.",
            "stability": "experimental",
            "summary": "API for managing packaging the project as a library."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 143
          },
          "name": "packagingManager",
          "optional": true,
          "type": {
            "fqn": "projen.python.IPythonPackaging"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Pytest component."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 148
          },
          "name": "pytest",
          "optional": true,
          "type": {
            "fqn": "projen.python.Pytest"
          }
        }
      ]
    },
    "projen.python.PythonProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for `PythonProject`."
      },
      "fqn": "projen.python.PythonProjectOptions",
      "interfaces": [
        "projen.ProjectOptions",
        "projen.python.PythonPackagingOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-project.ts",
        "line": 19
      },
      "name": "PythonProjectOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "$PYTHON_MODULE_NAME",
            "remarks": "Must only consist of alphanumeric characters and underscores.",
            "stability": "experimental",
            "summary": "Name of the python package as used in imports and filenames."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 29
          },
          "name": "moduleName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies use the format: `<module>@<semver>`\n\nAdditional dependencies can be added via `project.addDependency()`.",
            "stability": "experimental",
            "summary": "List of runtime dependencies for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 42
          },
          "name": "deps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[]",
            "remarks": "Dependencies use the format: `<module>@<semver>`\n\nAdditional dependencies can be added via `project.addDevDependency()`.",
            "stability": "experimental",
            "summary": "List of dev dependencies for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 53
          },
          "name": "devDeps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Use pip with a requirements.txt file to track project dependencies."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 62
          },
          "name": "pip",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Use poetry to manage your project dependencies, virtual environment, and (optional) packaging/publishing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 90
          },
          "name": "poetry",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include pytest tests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 98
          },
          "name": "pytest",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults",
            "stability": "experimental",
            "summary": "pytest options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 104
          },
          "name": "pytestOptions",
          "optional": true,
          "type": {
            "fqn": "projen.python.PytestOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Include sample code and test if the relevant directories don't exist."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 110
          },
          "name": "sample",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- true if the project type is library",
            "stability": "experimental",
            "summary": "Use setuptools with a setup.py script for packaging and publishing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 82
          },
          "name": "setuptools",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Use venv to manage a virtual environment for installing dependencies inside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 69
          },
          "name": "venv",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults",
            "stability": "experimental",
            "summary": "Venv options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/python-project.ts",
            "line": 75
          },
          "name": "venvOptions",
          "optional": true,
          "type": {
            "fqn": "projen.python.VenvOptions"
          }
        }
      ]
    },
    "projen.python.PythonSample": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Python code sample."
      },
      "fqn": "projen.python.PythonSample",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/python-sample.ts",
          "line": 14
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "_options",
            "type": {
              "fqn": "projen.python.PythonSampleOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/python-sample.ts",
        "line": 13
      },
      "name": "PythonSample",
      "namespace": "python"
    },
    "projen.python.PythonSampleOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for python sample code."
      },
      "fqn": "projen.python.PythonSampleOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/python-sample.ts",
        "line": 8
      },
      "name": "PythonSampleOptions",
      "namespace": "python"
    },
    "projen.python.RequirementsFile": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "see": "https://pip.pypa.io/en/stable/reference/pip_install/#requirements-file-format",
        "stability": "experimental",
        "summary": "Specifies a list of packages to be installed using pip."
      },
      "fqn": "projen.python.RequirementsFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/requirements-file.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.python.RequirementsFileOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/requirements-file.ts",
        "line": 19
      },
      "methods": [
        {
          "docs": {
            "remarks": "Comment lines (start with `#`) are ignored.",
            "stability": "experimental",
            "summary": "Adds the specified packages provided in semver format."
          },
          "locationInModule": {
            "filename": "src/python/requirements-file.ts",
            "line": 36
          },
          "name": "addPackages",
          "parameters": [
            {
              "docs": {
                "summary": "Package version in format `<module>@<semver>`."
              },
              "name": "packages",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/python/requirements-file.ts",
            "line": 59
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "RequirementsFile",
      "namespace": "python"
    },
    "projen.python.RequirementsFileOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.python.RequirementsFileOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/requirements-file.ts",
        "line": 7
      },
      "name": "RequirementsFileOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Provide a list of packages that can be dynamically updated."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/requirements-file.ts",
            "line": 11
          },
          "name": "packageProvider",
          "optional": true,
          "type": {
            "fqn": "projen.python.IPackageProvider"
          }
        }
      ]
    },
    "projen.python.SetupPy": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental",
        "summary": "Python packaging script where package metadata can be placed."
      },
      "fqn": "projen.python.SetupPy",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/setuppy.ts",
          "line": 69
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.python.SetupPyOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/setuppy.ts",
        "line": 66
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 88
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "resolver",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "SetupPy",
      "namespace": "python"
    },
    "projen.python.SetupPyOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "see": "https://docs.python.org/3/distutils/setupscript.html",
        "stability": "experimental",
        "summary": "Fields to pass in the setup() function of setup.py."
      },
      "fqn": "projen.python.SetupPyOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/setuppy.ts",
        "line": 9
      },
      "name": "SetupPyOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's e-mail."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 28
          },
          "name": "authorEmail",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Author's name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 23
          },
          "name": "authorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "https://pypi.org/classifiers/",
            "stability": "experimental",
            "summary": "A list of PyPI trove classifiers that describe the project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 55
          },
          "name": "classifiers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A short project description."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 38
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Package's Homepage / Website."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 48
          },
          "name": "homepage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The project license."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 43
          },
          "name": "license",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Name of the package."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 13
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "List of submodules to be packaged."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 18
          },
          "name": "packages",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Manually specify package version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuppy.ts",
            "line": 33
          },
          "name": "version",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.python.Setuptools": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Manages packaging through setuptools with a setup.py script."
      },
      "fqn": "projen.python.Setuptools",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/setuptools.ts",
          "line": 19
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.python.PythonPackagingOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.python.IPythonPackaging"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/setuptools.ts",
        "line": 10
      },
      "name": "Setuptools",
      "namespace": "python",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that packages the project for distribution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuptools.ts",
            "line": 11
          },
          "name": "packageTask",
          "overrides": "projen.python.IPythonPackaging",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that uploads the package to a package repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuptools.ts",
            "line": 12
          },
          "name": "publishTask",
          "overrides": "projen.python.IPythonPackaging",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "A task that uploads the package to the Test PyPI repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/setuptools.ts",
            "line": 17
          },
          "name": "publishTestTask",
          "type": {
            "fqn": "projen.tasks.Task"
          }
        }
      ]
    },
    "projen.python.Venv": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "Manages a virtual environment through the Python venv module."
      },
      "fqn": "projen.python.Venv",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/python/venv.ts",
          "line": 29
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.python.PythonProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.python.VenvOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.python.IPythonEnv"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/python/venv.ts",
        "line": 23
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Initializes the virtual environment if it doesn't exist (called during post-synthesis)."
          },
          "locationInModule": {
            "filename": "src/python/venv.ts",
            "line": 43
          },
          "name": "setupEnvironment",
          "overrides": "projen.python.IPythonEnv"
        }
      ],
      "name": "Venv",
      "namespace": "python"
    },
    "projen.python.VenvOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for venv."
      },
      "fqn": "projen.python.VenvOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/python/venv.ts",
        "line": 11
      },
      "name": "VenvOptions",
      "namespace": "python",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\".env\"",
            "stability": "experimental",
            "summary": "Name of directory to store the environment in."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/python/venv.ts",
            "line": 17
          },
          "name": "envdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.Task": {
      "assembly": "projen",
      "docs": {
        "remarks": "Modeled as a series of shell\ncommands and subtasks.",
        "stability": "experimental",
        "summary": "A task that can be performed on the project."
      },
      "fqn": "projen.tasks.Task",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/tasks/task.ts",
          "line": 44
        },
        "parameters": [
          {
            "name": "tasks",
            "type": {
              "fqn": "projen.tasks.Tasks"
            }
          },
          {
            "name": "name",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "projen.tasks.TaskOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/tasks/task.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an environment variable to this task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 150
          },
          "name": "env",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the variable."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "If the value is surrounded by `$()`, we will\nevaluate it within a subshell and use the result as the value of the\nenvironment variable.",
                "summary": "The value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Executes a shell command."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 79
          },
          "name": "exec",
          "parameters": [
            {
              "docs": {
                "summary": "Shell command."
              },
              "name": "command",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "deprecated": "use `prependExec()`",
            "stability": "deprecated",
            "summary": "Adds a command at the beginning of the task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 98
          },
          "name": "prepend",
          "parameters": [
            {
              "docs": {
                "summary": "The command to add."
              },
              "name": "shell",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a command at the beginning of the task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 114
          },
          "name": "prependExec",
          "parameters": [
            {
              "docs": {
                "summary": "The command to add."
              },
              "name": "shell",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Says something at the beginning of the task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 136
          },
          "name": "prependSay",
          "parameters": [
            {
              "docs": {
                "summary": "Your message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a spawn instruction at the beginning of the task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 125
          },
          "name": "prependSpawn",
          "parameters": [
            {
              "docs": {
                "summary": "The subtask to execute."
              },
              "name": "subtask",
              "type": {
                "fqn": "projen.tasks.Task"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Reset the task so it no longer has any commands."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 64
          },
          "name": "reset",
          "parameters": [
            {
              "docs": {
                "summary": "the first command to add to the task after it was cleared."
              },
              "name": "command",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Say something."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 88
          },
          "name": "say",
          "parameters": [
            {
              "docs": {
                "summary": "Your message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Spawns a sub-task."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 106
          },
          "name": "spawn",
          "parameters": [
            {
              "docs": {
                "summary": "The subtask to execute."
              },
              "name": "subtask",
              "type": {
                "fqn": "projen.tasks.Task"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskStepOptions"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders this task as a single shell command."
          },
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 164
          },
          "name": "toShellCommand",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Task",
      "namespace": "tasks",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Task name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 21
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns an immutable copy of all the step specifications of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 157
          },
          "name": "steps",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskStep"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The start menu category of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 31
          },
          "name": "category",
          "optional": true,
          "type": {
            "fqn": "projen.tasks.TaskCategory"
          }
        },
        {
          "docs": {
            "remarks": "If it\nreturns a zero exit code, the task will not be executed.",
            "stability": "experimental",
            "summary": "A command to execute which determines if the task should be skipped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 37
          },
          "name": "condition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The description of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 26
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskCategory": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.tasks.TaskCategory",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 54
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "BUILD"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "TEST"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "RELEASE"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MAINTAIN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "MISC"
        }
      ],
      "name": "TaskCategory",
      "namespace": "tasks"
    },
    "projen.tasks.TaskCommonOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.tasks.TaskCommonOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 16
      },
      "name": "TaskCommonOptions",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "TaskCategory.MISC",
            "stability": "experimental",
            "summary": "Category for start menu."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 28
          },
          "name": "category",
          "optional": true,
          "type": {
            "fqn": "projen.tasks.TaskCategory"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "If\nthe program exits with a zero exit code, steps will be executed. A non-zero\ncode means that task will be skipped.",
            "stability": "experimental",
            "summary": "A shell command which determines if the this task should be executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 42
          },
          "name": "condition",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.cwd()",
            "stability": "experimental",
            "summary": "The working directory for all steps in this task (unless overridden by the step)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 50
          },
          "name": "cwd",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the task name",
            "stability": "experimental",
            "summary": "The description of this build command."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 21
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "{}",
            "remarks": "Values in this map will be evaluated in a shell, so you can do stuff like `$(echo \"foo\")`.",
            "stability": "experimental",
            "summary": "Defines environment variables for the execution of this task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 35
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.tasks.TaskOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.tasks.TaskOptions",
      "interfaces": [
        "projen.tasks.TaskCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/task.ts",
        "line": 5
      },
      "name": "TaskOptions",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- add steps using `task.exec(command)` or `task.spawn(subtask)`",
            "stability": "experimental",
            "summary": "Shell command to execute as the first command of the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/task.ts",
            "line": 10
          },
          "name": "exec",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskRuntime": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "The runtime component of the tasks engine."
      },
      "fqn": "projen.tasks.TaskRuntime",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/tasks/runtime.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "workdir",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/tasks/runtime.ts",
        "line": 13
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Runs the task."
          },
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 51
          },
          "name": "runTask",
          "parameters": [
            {
              "docs": {
                "summary": "The task name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "parents",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Find a task by name, or `undefined` if not found."
          },
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 42
          },
          "name": "tryFindTask",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.tasks.TaskSpec"
            }
          }
        }
      ],
      "name": "TaskRuntime",
      "namespace": "tasks",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The contents of tasks.json."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 17
          },
          "name": "manifest",
          "type": {
            "fqn": "projen.tasks.TasksManifest"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The tasks in this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 35
          },
          "name": "tasks",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskSpec"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The root directory of the project and the cwd for executing tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/runtime.ts",
            "line": 22
          },
          "name": "workdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskSpec": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Specification of a single task."
      },
      "fqn": "projen.tasks.TaskSpec",
      "interfaces": [
        "projen.tasks.TaskCommonOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 66
      },
      "name": "TaskSpec",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Task name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 70
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Task steps."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 75
          },
          "name": "steps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskStep"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "projen.tasks.TaskStep": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "The step could either be  the execution of a\nshell command or execution of a sub-task, by name.",
        "stability": "experimental",
        "summary": "A single step within a task."
      },
      "fqn": "projen.tasks.TaskStep",
      "interfaces": [
        "projen.tasks.TaskStepOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 101
      },
      "name": "TaskStep",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- don't execute a shell command",
            "stability": "experimental",
            "summary": "Shell command to execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 107
          },
          "name": "exec",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- don't say anything",
            "stability": "experimental",
            "summary": "Print a message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 120
          },
          "name": "say",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- don't spawn a subtask",
            "stability": "experimental",
            "summary": "Subtask to execute."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 114
          },
          "name": "spawn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.TaskStepOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for task steps."
      },
      "fqn": "projen.tasks.TaskStepOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 81
      },
      "name": "TaskStepOptions",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- determined by the task",
            "stability": "experimental",
            "summary": "The working directory for this step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 94
          },
          "name": "cwd",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no name",
            "stability": "experimental",
            "summary": "Step name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 87
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.tasks.Tasks": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "Tasks extend the projen CLI by adding subcommands to it. Task definitions are\nsynthesized into `.projen/tasks.json`.",
        "stability": "experimental",
        "summary": "Defines project tasks."
      },
      "fqn": "projen.tasks.Tasks",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/tasks/tasks.ts",
          "line": 24
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/tasks/tasks.ts",
        "line": 15
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds global environment."
          },
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 64
          },
          "name": "addEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "Environment variable name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Value."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a task to a project."
          },
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 53
          },
          "name": "addTask",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the task."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "Task options."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "projen.tasks.TaskOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "projen.tasks.Task"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns `undefined` if the task cannot be found.",
            "stability": "experimental",
            "summary": "Finds a task by name."
          },
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 81
          },
          "name": "tryFind",
          "parameters": [
            {
              "docs": {
                "summary": "The name of the task."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "fqn": "projen.tasks.Task"
            }
          }
        }
      ],
      "name": "Tasks",
      "namespace": "tasks",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "The project-relative path of the tasks manifest file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 19
          },
          "name": "MANIFEST_FILE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 44
          },
          "name": "all",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.Task"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Returns a copy of the currently global environment for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/tasks.ts",
            "line": 71
          },
          "name": "env",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.tasks.TasksManifest": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Schema for `tasks.json`."
      },
      "fqn": "projen.tasks.TasksManifest",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/tasks/model.ts",
        "line": 4
      },
      "name": "TasksManifest",
      "namespace": "tasks",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Environment for all tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 13
          },
          "name": "env",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "All tasks available for this project."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/tasks/model.ts",
            "line": 8
          },
          "name": "tasks",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "projen.tasks.TaskSpec"
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "projen.vscode.DevContainer": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "remarks": "used by GitHub\ncodespaces.",
        "stability": "experimental",
        "summary": "A development environment running VSCode in a container;"
      },
      "fqn": "projen.vscode.DevContainer",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/vscode/devcontainer.ts",
          "line": 35
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.vscode.DevContainerOptions"
            }
          }
        ]
      },
      "interfaces": [
        "projen.IDevEnvironment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "src/vscode/devcontainer.ts",
        "line": 24
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a custom Docker image or Dockerfile for the container."
          },
          "locationInModule": {
            "filename": "src/vscode/devcontainer.ts",
            "line": 69
          },
          "name": "addDockerImage",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "name": "image",
              "type": {
                "fqn": "projen.DevEnvironmentDockerImage"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds ports that should be exposed (forwarded) from the container."
          },
          "locationInModule": {
            "filename": "src/vscode/devcontainer.ts",
            "line": 90
          },
          "name": "addPorts",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The new ports."
              },
              "name": "ports",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "remarks": "Tasks will be run in sequence.",
            "stability": "experimental",
            "summary": "Adds tasks to run when the container starts."
          },
          "locationInModule": {
            "filename": "src/vscode/devcontainer.ts",
            "line": 81
          },
          "name": "addTasks",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The new tasks."
              },
              "name": "tasks",
              "type": {
                "fqn": "projen.tasks.Task"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a list of VSCode extensions that should be automatically installed in the container."
          },
          "locationInModule": {
            "filename": "src/vscode/devcontainer.ts",
            "line": 100
          },
          "name": "addVscodeExtensions",
          "overrides": "projen.IDevEnvironment",
          "parameters": [
            {
              "docs": {
                "summary": "The extension IDs."
              },
              "name": "extensions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "variadic": true
        }
      ],
      "name": "DevContainer",
      "namespace": "vscode",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Direct access to the devcontainer configuration (escape hatch)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/devcontainer.ts",
            "line": 33
          },
          "name": "config",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "projen.vscode.DevContainerOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "remarks": "The default docker image used for GitHub Codespaces is defined here:",
        "see": "https://github.com/microsoft/vscode-dev-containers/tree/master/containers/codespaces-linux",
        "stability": "experimental",
        "summary": "Constructor options for the DevContainer component."
      },
      "fqn": "projen.vscode.DevContainerOptions",
      "interfaces": [
        "projen.DevEnvironmentOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/devcontainer.ts",
        "line": 18
      },
      "name": "DevContainerOptions",
      "namespace": "vscode"
    },
    "projen.vscode.InternalConsoleOptions": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Controls the visibility of the VSCode Debug Console panel during a debugging session Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.InternalConsoleOptions",
      "kind": "enum",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 9
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "NEVER_OPEN"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OPEN_ON_FIRST_SESSION_START"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OPEN_ON_SESSION_START"
        }
      ],
      "name": "InternalConsoleOptions",
      "namespace": "vscode"
    },
    "projen.vscode.Presentation": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "VSCode launch configuration Presentation interface \"using the order, group, and hidden attributes in the presentation object you can sort, group, and hide configurations and compounds in the Debug configuration dropdown and in the Debug quick pick.\" Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.Presentation",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 22
      },
      "name": "Presentation",
      "namespace": "vscode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 24
          },
          "name": "group",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 23
          },
          "name": "hidden",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 25
          },
          "name": "order",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "projen.vscode.ServerReadyAction": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "VSCode launch configuration ServerReadyAction interface \"if you want to open a URL in a web browser whenever the program under debugging outputs a specific message to the debug console or integrated terminal.\" Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.ServerReadyAction",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 33
      },
      "name": "ServerReadyAction",
      "namespace": "vscode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 34
          },
          "name": "action",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 35
          },
          "name": "pattern",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 36
          },
          "name": "uriFormat",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.vscode.VsCode": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.vscode.VsCode",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/vscode/vscode.ts",
          "line": 8
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.Project"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/vscode/vscode.ts",
        "line": 5
      },
      "name": "VsCode",
      "namespace": "vscode",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/vscode.ts",
            "line": 12
          },
          "name": "launchConfiguration",
          "type": {
            "fqn": "projen.vscode.VsCodeLaunchConfig"
          }
        }
      ]
    },
    "projen.vscode.VsCodeLaunchConfig": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental",
        "summary": "VSCode launch configuration file (launch.json), useful for enabling in-editor debugger."
      },
      "fqn": "projen.vscode.VsCodeLaunchConfig",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/vscode/launch-config.ts",
          "line": 68
        },
        "parameters": [
          {
            "name": "vscode",
            "type": {
              "fqn": "projen.vscode.VsCode"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 65
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a VsCodeLaunchConfigurationEntry (e.g. a node.js debugger) to `.vscode/launch.json. Each configuration entry has following mandatory fields: type, request and name. See https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes for details."
          },
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 87
          },
          "name": "addConfiguration",
          "parameters": [
            {
              "docs": {
                "summary": "VsCodeLaunchConfigurationEntry."
              },
              "name": "cfg",
              "type": {
                "fqn": "projen.vscode.VsCodeLaunchConfigurationEntry"
              }
            }
          ]
        }
      ],
      "name": "VsCodeLaunchConfig",
      "namespace": "vscode"
    },
    "projen.vscode.VsCodeLaunchConfigurationEntry": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for a 'VsCodeLaunchConfigurationEntry' Source: https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes."
      },
      "fqn": "projen.vscode.VsCodeLaunchConfigurationEntry",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/vscode/launch-config.ts",
        "line": 43
      },
      "name": "VsCodeLaunchConfigurationEntry",
      "namespace": "vscode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 46
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 45
          },
          "name": "request",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 44
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 47
          },
          "name": "args",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 48
          },
          "name": "debugServer",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 49
          },
          "name": "internalConsoleOptions",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.InternalConsoleOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 57
          },
          "name": "outFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 51
          },
          "name": "postDebugTask",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 52
          },
          "name": "preLaunchTask",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 53
          },
          "name": "presentation",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.Presentation"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 54
          },
          "name": "program",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 50
          },
          "name": "runtimeArgs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 55
          },
          "name": "serverReadyAction",
          "optional": true,
          "type": {
            "fqn": "projen.vscode.ServerReadyAction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 56
          },
          "name": "skipFiles",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 58
          },
          "name": "url",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/vscode/launch-config.ts",
            "line": 59
          },
          "name": "webRoot",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.NextComponent": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextComponent",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 216
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.NextComponentOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 212
      },
      "name": "NextComponent",
      "namespace": "web"
    },
    "projen.web.NextComponentOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextComponentOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 194
      },
      "name": "NextComponentOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 209
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to apply options specific for TypeScript Next.js projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 200
          },
          "name": "typescript",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsCommonProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsCommonProjectOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 10
      },
      "name": "NextJsCommonProjectOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"public\"",
            "stability": "experimental",
            "summary": "Assets directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 16
          },
          "name": "assetsdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind CSS as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 25
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsProject": {
      "assembly": "projen",
      "base": "projen.NodeProject",
      "docs": {
        "custom": {
          "pjid": "nextjs"
        },
        "stability": "experimental",
        "summary": "Next.js project without TypeScript."
      },
      "fqn": "projen.web.NextJsProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 68
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.NextJsProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 50
      },
      "name": "NextJsProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which app assets reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 59
          },
          "name": "assetsdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 54
          },
          "name": "srcdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 66
          },
          "name": "tailwind",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsProjectOptions",
      "interfaces": [
        "projen.web.NextJsCommonProjectOptions",
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 30
      },
      "name": "NextJsProjectOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `pages/` and `public/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 42
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"src\"",
            "stability": "experimental",
            "summary": "Typescript sources directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 36
          },
          "name": "srcdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.NextJsTypeDef": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsTypeDef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 182
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.web.NextJsTypeScriptProject"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.NextJsTypeDefOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 181
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 186
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "NextJsTypeDef",
      "namespace": "web"
    },
    "projen.web.NextJsTypeDefOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsTypeDefOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 179
      },
      "name": "NextJsTypeDefOptions",
      "namespace": "web"
    },
    "projen.web.NextJsTypeScriptProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptAppProject",
      "docs": {
        "custom": {
          "pjid": "nextjs-ts"
        },
        "stability": "experimental",
        "summary": "Next.js project with TypeScript."
      },
      "fqn": "projen.web.NextJsTypeScriptProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/next.ts",
          "line": 123
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.NextJsTypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 97
      },
      "name": "NextJsTypeScriptProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which app assets reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 106
          },
          "name": "assetsdir",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "https://nextjs.org/docs/basic-features/typescript",
            "stability": "experimental",
            "summary": "TypeScript definition file included that ensures Next.js types are picked up by the TypeScript compiler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 121
          },
          "name": "nextJsTypeDef",
          "type": {
            "fqn": "projen.web.NextJsTypeDef"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 101
          },
          "name": "srcdir",
          "overrides": "projen.TypeScriptProject",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "https://tailwindcss.com/docs/installation",
            "stability": "experimental",
            "summary": "Setup Tailwind as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/next.ts",
            "line": 113
          },
          "name": "tailwind",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.NextJsTypeScriptProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.NextJsTypeScriptProjectOptions",
      "interfaces": [
        "projen.web.NextJsCommonProjectOptions",
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/next.ts",
        "line": 28
      },
      "name": "NextJsTypeScriptProjectOptions",
      "namespace": "web"
    },
    "projen.web.PostCss": {
      "assembly": "projen",
      "docs": {
        "stability": "experimental",
        "summary": "Declares a PostCSS dependency with a default config file."
      },
      "fqn": "projen.web.PostCss",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/postcss.ts",
          "line": 32
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.PostCssOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/postcss.ts",
        "line": 27
      },
      "name": "PostCss",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 29
          },
          "name": "file",
          "type": {
            "fqn": "projen.JsonFile"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 28
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 30
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "fqn": "projen.web.TailwindConfig"
          }
        }
      ]
    },
    "projen.web.PostCssOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.PostCssOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/postcss.ts",
        "line": 5
      },
      "name": "PostCssOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"postcss.config.json\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 9
          },
          "name": "fileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Install Tailwind CSS as a PostCSS plugin."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 16
          },
          "name": "tailwind",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Tailwind CSS options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/postcss.ts",
            "line": 21
          },
          "name": "tailwindOptions",
          "optional": true,
          "type": {
            "fqn": "projen.web.TailwindConfigOptions"
          }
        }
      ]
    },
    "projen.web.ReactComponent": {
      "assembly": "projen",
      "base": "projen.Component",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactComponent",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 138
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.ReactComponentOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 135
      },
      "name": "ReactComponent",
      "namespace": "web"
    },
    "projen.web.ReactComponentOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactComponentOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 126
      },
      "name": "ReactComponentOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether to apply options specific for TypeScript React projects."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 132
          },
          "name": "typescript",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "projen.web.ReactProject": {
      "assembly": "projen",
      "base": "projen.NodeProject",
      "docs": {
        "custom": {
          "pjid": "react"
        },
        "stability": "experimental",
        "summary": "React project without TypeScript."
      },
      "fqn": "projen.web.ReactProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 37
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.ReactProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 30
      },
      "name": "ReactProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "default": "\"src\"",
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 35
          },
          "name": "srcdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.ReactProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactProjectOptions",
      "interfaces": [
        "projen.NodeProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 11
      },
      "name": "ReactProjectOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "experimental",
            "summary": "Generate one-time sample in `src/` and `public/` if there are no files there."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 22
          },
          "name": "sampleCode",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"src\"",
            "stability": "experimental",
            "summary": "Source directory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 17
          },
          "name": "srcdir",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.ReactTypeDef": {
      "assembly": "projen",
      "base": "projen.FileBase",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactTypeDef",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 472
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.web.ReactTypeScriptProject"
            }
          },
          {
            "name": "filePath",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.ReactTypeDefOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 471
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Implemented by derived classes and returns the contents of the file to emit."
          },
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 476
          },
          "name": "synthesizeContent",
          "overrides": "projen.FileBase",
          "parameters": [
            {
              "name": "_",
              "type": {
                "fqn": "projen.IResolver"
              }
            }
          ],
          "protected": true,
          "returns": {
            "optional": true,
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "ReactTypeDef",
      "namespace": "web"
    },
    "projen.web.ReactTypeDefOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactTypeDefOptions",
      "interfaces": [
        "projen.FileBaseOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 469
      },
      "name": "ReactTypeDefOptions",
      "namespace": "web"
    },
    "projen.web.ReactTypeScriptProject": {
      "assembly": "projen",
      "base": "projen.TypeScriptAppProject",
      "docs": {
        "custom": {
          "pjid": "react-ts"
        },
        "stability": "experimental",
        "summary": "React project with TypeScript."
      },
      "fqn": "projen.web.ReactTypeScriptProject",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/react.ts",
          "line": 75
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "projen.web.ReactTypeScriptProjectOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 62
      },
      "name": "ReactTypeScriptProject",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "TypeScript definition file included that ensures React types are picked up by the TypeScript compiler."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 73
          },
          "name": "reactTypeDef",
          "type": {
            "fqn": "projen.web.ReactTypeDef"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The directory in which source files reside."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/react.ts",
            "line": 66
          },
          "name": "srcdir",
          "overrides": "projen.TypeScriptProject",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.ReactTypeScriptProjectOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.ReactTypeScriptProjectOptions",
      "interfaces": [
        "projen.TypeScriptProjectOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/react.ts",
        "line": 9
      },
      "name": "ReactTypeScriptProjectOptions",
      "namespace": "web"
    },
    "projen.web.TailwindConfig": {
      "assembly": "projen",
      "docs": {
        "remarks": "There are multiple ways to add Tailwind CSS in your node project - see:\nhttps://tailwindcss.com/docs/installation",
        "see": "PostCss",
        "stability": "experimental",
        "summary": "Declares a Tailwind CSS configuration file."
      },
      "fqn": "projen.web.TailwindConfig",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "src/web/tailwind.ts",
          "line": 23
        },
        "parameters": [
          {
            "name": "project",
            "type": {
              "fqn": "projen.NodeProject"
            }
          },
          {
            "name": "options",
            "optional": true,
            "type": {
              "fqn": "projen.web.TailwindConfigOptions"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/web/tailwind.ts",
        "line": 19
      },
      "name": "TailwindConfig",
      "namespace": "web",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/tailwind.ts",
            "line": 21
          },
          "name": "file",
          "type": {
            "fqn": "projen.JsonFile"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/tailwind.ts",
            "line": 20
          },
          "name": "fileName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "projen.web.TailwindConfigOptions": {
      "assembly": "projen",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "projen.web.TailwindConfigOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/web/tailwind.ts",
        "line": 4
      },
      "name": "TailwindConfigOptions",
      "namespace": "web",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "\"tailwind.config.json\"",
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/web/tailwind.ts",
            "line": 8
          },
          "name": "fileName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.17.1",
  "fingerprint": "209HAayZ3JoQhIfAHK3eCNPEo2kRPI/LXFYI11YLC3U="
}
