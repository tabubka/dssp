"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const deps_1 = require("../deps");
const util_1 = require("./util");
test('no dependencieds, no manifest', () => {
    // GIVEN
    const p = new util_1.TestProject();
    // THEN
    expect(depsManifest(p)).toBeUndefined();
});
test('minimal case', () => {
    // GIVEN
    const p = new util_1.TestProject();
    // WHEN
    const dep = p.deps.addDependency('my-first-dep', deps_1.DependencyType.RUNTIME);
    // THEN
    expect(dep.name).toBe('my-first-dep');
    expect(dep.version).toBeUndefined();
    expect(dep.type).toBe(deps_1.DependencyType.RUNTIME);
    expect(depsManifest(p)).toMatchSnapshot();
});
test('with version requirement', () => {
    // GIVEN
    const p = new util_1.TestProject();
    // WHEN
    const dep = p.deps.addDependency('depy@^7', deps_1.DependencyType.PEER);
    // THEN
    expect(dep.name).toBe('depy');
    expect(dep.version).toBe('^7');
    expect(dep.type).toBe(deps_1.DependencyType.PEER);
    expect(depsManifest(p)).toMatchSnapshot();
});
test('with package alias', () => {
    // GIVEN
    const p = new util_1.TestProject();
    // WHEN
    const dep = p.deps.addDependency('bar@npm:@bar/legacy', deps_1.DependencyType.PEER);
    // THEN
    expect(dep.name).toBe('bar');
    expect(dep.version).toBe('npm:@bar/legacy');
    expect(dep.type).toBe(deps_1.DependencyType.PEER);
    expect(depsManifest(p)).toMatchSnapshot();
});
test('deps.all returns all the dependencies', () => {
    // GIVEN
    const p = new util_1.TestProject();
    // WHEN
    p.deps.addDependency('dep1', deps_1.DependencyType.DEVENV);
    p.deps.addDependency('dep2', deps_1.DependencyType.RUNTIME);
    p.deps.addDependency('dep3', deps_1.DependencyType.PEER);
    // THEN
    expect(p.deps.all).toMatchSnapshot();
});
describe('removeDependency()', () => {
    test('can be used to remove a dependency', () => {
        // GIVEN
        const p = new util_1.TestProject();
        p.deps.addDependency('mydep', deps_1.DependencyType.RUNTIME);
        // WHEN
        p.deps.removeDependency('mydep');
        // THEN
        expect(p.deps.all).toStrictEqual([]);
    });
    test('dep is defined for multiple types (e.g. dev + runtime)', () => {
        // GIVEN
        const p = new util_1.TestProject();
        p.deps.addDependency('mydep', deps_1.DependencyType.RUNTIME);
        p.deps.addDependency('mydep', deps_1.DependencyType.BUILD);
        // WHEN
        p.deps.removeDependency('mydep', deps_1.DependencyType.BUILD);
        // THEN
        expect(p.deps.all).toStrictEqual([
            {
                name: 'mydep',
                type: 'runtime',
            },
        ]);
    });
    test('fails if type is not provided and there are more then one', () => {
        // GIVEN
        const p = new util_1.TestProject();
        // WHEN
        p.deps.addDependency('foo', deps_1.DependencyType.BUILD);
        p.deps.addDependency('foo', deps_1.DependencyType.RUNTIME);
        // THEN
        expect(() => p.deps.removeDependency('foo')).toThrow(/"foo" is defined for multiple dependency types\: build\,runtime/);
    });
    test('no-op if the dependency is not defined', () => {
        // GIVEN
        const p = new util_1.TestProject();
        p.deps.addDependency('hey', deps_1.DependencyType.RUNTIME);
        // WHEN
        p.deps.removeDependency('bam');
        // THEN
        expect(p.deps.all).toStrictEqual([
            {
                name: 'hey',
                type: 'runtime',
            },
        ]);
    });
});
describe('getDependency()', () => {
    test('returns a single dependency', () => {
        // GIVEN
        const p = new util_1.TestProject();
        // WHEN
        p.deps.addDependency('bar@^1.1.1', deps_1.DependencyType.RUNTIME);
        // THEN
        expect(p.deps.getDependency('bar')).toStrictEqual({
            name: 'bar',
            version: '^1.1.1',
            type: deps_1.DependencyType.RUNTIME,
        });
    });
    test('matches type', () => {
        // GIVEN
        const p = new util_1.TestProject();
        p.deps.addDependency('boo', deps_1.DependencyType.BUILD);
        p.deps.addDependency('zar', deps_1.DependencyType.RUNTIME);
        p.deps.addDependency('hey@^1.0.0', deps_1.DependencyType.RUNTIME);
        // WHEN
        p.deps.addDependency('bar@^1.1.1', deps_1.DependencyType.RUNTIME);
        // THEN
        expect(p.deps.getDependency('bar', deps_1.DependencyType.RUNTIME)).toStrictEqual({
            name: 'bar',
            version: '^1.1.1',
            type: deps_1.DependencyType.RUNTIME,
        });
    });
    test('matches type (multiple)', () => {
        // GIVEN
        const p = new util_1.TestProject();
        // WHEN
        p.deps.addDependency('bar@^1.2.1', deps_1.DependencyType.RUNTIME);
        p.deps.addDependency('bar@^1.1.1', deps_1.DependencyType.BUILD);
        // THEN
        expect(p.deps.getDependency('bar', deps_1.DependencyType.RUNTIME)).toStrictEqual({
            name: 'bar',
            version: '^1.2.1',
            type: deps_1.DependencyType.RUNTIME,
        });
    });
    test('fails if there is no dependency by that name', () => {
        // GIVEN
        const p = new util_1.TestProject();
        p.deps.addDependency('bar@1.1.1', deps_1.DependencyType.RUNTIME);
        // THEN
        expect(() => p.deps.getDependency('test')).toThrow(/there is no dependency defined on \"test\"/);
    });
    test('fails if there is more then one type and type is not provided', () => {
        // GIVEN
        const p = new util_1.TestProject();
        // WHEN
        p.deps.addDependency('zoo', deps_1.DependencyType.RUNTIME);
        p.deps.addDependency('zoo', deps_1.DependencyType.DEVENV);
        // THEN
        expect(() => p.deps.getDependency('zoo')).toThrow(/\"zoo\" is defined for multiple dependency types: runtime,devenv. Please specify dependency type/);
    });
    test('fails if type does not match', () => {
        // GIVEN
        const p = new util_1.TestProject();
        // WHEN
        p.deps.addDependency('zoo', deps_1.DependencyType.RUNTIME);
        // THEN
        expect(() => p.deps.getDependency('zoo', deps_1.DependencyType.BUILD)).toThrow(/there is no build dependency defined on \"zoo\"/);
    });
});
function depsManifest(p) {
    p.synth();
    const filepath = path_1.join(p.outdir, deps_1.Dependencies.MANIFEST_FILE);
    if (!fs_extra_1.existsSync(filepath)) {
        return undefined;
    }
    return JSON.parse(fs_extra_1.readFileSync(filepath, 'utf-8'));
}
//# sourceMappingURL=data:application/json;base64,