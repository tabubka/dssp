"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const launch_config_1 = require("../vscode/launch-config");
const util_1 = require("./util");
const VSCODE_DEBUGGER_FILE = '.vscode/launch.json';
test('empty launch configuration', () => {
    var _a;
    // GIVEN
    const project = new util_1.TestProject();
    // WHEN
    (_a = project.vscode) === null || _a === void 0 ? void 0 : _a.launchConfiguration;
    // THEN
    expect(util_1.synthSnapshot(project)[VSCODE_DEBUGGER_FILE]).toStrictEqual({
        version: '0.2.0',
        configurations: [],
    });
});
test('adding a launch configuration entry', () => {
    var _a;
    // GIVEN
    const project = new util_1.TestProject();
    // WHEN
    const launchConfig = (_a = project.vscode) === null || _a === void 0 ? void 0 : _a.launchConfiguration;
    launchConfig === null || launchConfig === void 0 ? void 0 : launchConfig.addConfiguration({
        type: 'node',
        request: 'launch',
        name: 'CDK Debugger',
        skipFiles: ['<node_internals>/**'],
        runtimeArgs: ['-r', './node_modules/ts-node/register/transpile-only'],
        args: ['${workspaceFolder}/src/main.ts'],
    });
    // THEN
    expect(util_1.synthSnapshot(project)[VSCODE_DEBUGGER_FILE]).toStrictEqual({
        version: '0.2.0',
        configurations: [
            {
                type: 'node',
                request: 'launch',
                name: 'CDK Debugger',
                skipFiles: ['<node_internals>/**'],
                runtimeArgs: ['-r', './node_modules/ts-node/register/transpile-only'],
                args: ['${workspaceFolder}/src/main.ts'],
            },
        ],
    });
});
test('adding multiple launch configuration entries', () => {
    var _a;
    // GIVEN
    const project = new util_1.TestProject();
    // WHEN
    const launchConfig = (_a = project.vscode) === null || _a === void 0 ? void 0 : _a.launchConfiguration;
    launchConfig === null || launchConfig === void 0 ? void 0 : launchConfig.addConfiguration({
        type: 'node',
        request: 'launch',
        name: 'CDK Debugger',
        skipFiles: ['<node_internals>/**'],
        runtimeArgs: ['-r', './node_modules/ts-node/register/transpile-only'],
        args: ['${workspaceFolder}/src/main.ts'],
    });
    launchConfig === null || launchConfig === void 0 ? void 0 : launchConfig.addConfiguration({
        type: 'node',
        request: 'launch',
        name: 'Launch Program',
        skipFiles: ['<node_internals>/**'],
        program: '${workspaceFolder}/lib/index.js',
        preLaunchTask: 'tsc: build - tsconfig.json',
        outFiles: ['${workspaceFolder}/lib/**/*.js'],
        internalConsoleOptions: launch_config_1.InternalConsoleOptions.OPEN_ON_SESSION_START,
    });
    launchConfig === null || launchConfig === void 0 ? void 0 : launchConfig.addConfiguration({
        type: 'pwa-chrome',
        request: 'launch',
        name: 'Launch Chrome against localhost',
        url: 'http://localhost:8080',
        webRoot: '${workspaceFolder}',
        debugServer: 4711,
    });
    // THEN
    expect(util_1.synthSnapshot(project)[VSCODE_DEBUGGER_FILE]).toStrictEqual({
        version: '0.2.0',
        configurations: [
            {
                type: 'node',
                request: 'launch',
                name: 'CDK Debugger',
                skipFiles: ['<node_internals>/**'],
                runtimeArgs: ['-r', './node_modules/ts-node/register/transpile-only'],
                args: ['${workspaceFolder}/src/main.ts'],
            },
            {
                type: 'node',
                request: 'launch',
                name: 'Launch Program',
                skipFiles: ['<node_internals>/**'],
                program: '${workspaceFolder}/lib/index.js',
                preLaunchTask: 'tsc: build - tsconfig.json',
                outFiles: ['${workspaceFolder}/lib/**/*.js'],
                internalConsoleOptions: 'openOnSessionStart',
            },
            {
                type: 'pwa-chrome',
                request: 'launch',
                name: 'Launch Chrome against localhost',
                url: 'http://localhost:8080',
                webRoot: '${workspaceFolder}',
                debugServer: 4711,
            },
        ],
    });
});
//# sourceMappingURL=data:application/json;base64,