"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_1 = require("../json");
const util_1 = require("../util");
const util_2 = require("./util");
describe('decamelizeRecursively', () => {
    test('decamel recurses an object structure', () => {
        // GIVEN
        const input = {
            dependsOn: ['a', 'b', 'c'],
            volumes: [
                {
                    driver: 'tmpfs',
                    driverOpts: {
                        type: 'nfs',
                        o: 'addr=...',
                        device: ':/docker/example',
                    },
                },
            ],
        };
        // WHEN
        const output = util_1.decamelizeKeysRecursively(input);
        // THEN
        expect(output).toEqual({
            depends_on: ['a', 'b', 'c'],
            volumes: [
                {
                    driver: 'tmpfs',
                    driver_opts: {
                        type: 'nfs',
                        o: 'addr=...',
                        device: ':/docker/example',
                    },
                },
            ],
        });
    });
    test('decamel quits when it recurses too deeply', () => {
        // GIVEN
        const circle = {};
        circle.circle = circle;
        // WHEN
        expect(() => util_1.decamelizeKeysRecursively(circle)).toThrow(/circular reference/);
    });
    test('decamel can know when not to decamelize a key', () => {
        // GIVEN
        const input = {
            dependsOn: ['a', 'b'],
            environment: {
                leaveThisAlone: true,
                LEAVE_CASE_ALONE: true,
            },
        };
        // WHEN
        const output = util_1.decamelizeKeysRecursively(input, {
            shouldDecamelize(path, _value) {
                return !/^environment\./.test(path.join('.'));
            },
        });
        // THEN
        expect(output).toEqual({
            depends_on: ['a', 'b'],
            environment: {
                leaveThisAlone: true,
                LEAVE_CASE_ALONE: true,
            },
        });
    });
});
test('isTruthy', () => {
    expect(util_1.isTruthy(undefined)).toEqual(false);
    expect(util_1.isTruthy('false')).toEqual(false);
    expect(util_1.isTruthy('0')).toEqual(false);
    expect(util_1.isTruthy('null')).toEqual(false);
    expect(util_1.isTruthy('')).toEqual(false);
    expect(util_1.isTruthy('true')).toEqual(true);
    expect(util_1.isTruthy('1')).toEqual(true);
    expect(util_1.isTruthy('enabled')).toEqual(true);
});
describe('deepMerge (destructive: false)', () => {
    test('merges objects', () => {
        // GIVEN
        const original = { a: { b: 3 } };
        // WHEN
        util_1.deepMerge([original, { a: { c: 4 } }]);
        // THEN
        expect(original).toEqual({ a: { b: 3, c: 4 } });
    });
    test('overwrites non-objects', () => {
        // GIVEN
        const original = { a: [] };
        // WHEN
        util_1.deepMerge([original, { a: { b: 3 } }]);
        // THEN
        expect(original).toEqual({ a: { b: 3 } });
    });
    test('does not overwrite if rightmost is "undefined"', () => {
        // GIVEN
        const original = { a: 1 };
        // WHEN
        util_1.deepMerge([original, { a: undefined }]);
        // THEN
        expect(original).toEqual({ a: 1 });
    });
    test('does not recurse on projects', () => {
        // GIVEN
        const proj1 = new util_2.TestProject();
        const proj2 = new util_2.TestProject();
        const objA = { a: proj1 };
        const objB = { a: proj2 };
        // WHEN
        util_1.deepMerge([objA, objB]);
        // THEN
        expect(objA).toEqual(objB);
    });
    test('does not recurse on components', () => {
        // GIVEN
        const proj = new util_2.TestProject();
        const comp1 = new json_1.JsonFile(proj, 'foo', { obj: 3 });
        const comp2 = new json_1.JsonFile(proj, 'bar', { obj: 5 });
        const objA = { a: comp1 };
        const objB = { a: comp2 };
        // WHEN
        util_1.deepMerge([objA, objB]);
        // THEN
        expect(objA).toEqual(objB);
    });
});
describe('deepMerge (destructive: true)', () => {
    test('merges objects', () => {
        // GIVEN
        const original = { a: { b: 3 } };
        // WHEN
        util_1.deepMerge([original, { a: { c: 4 } }], true);
        // THEN
        expect(original).toEqual({ a: { b: 3, c: 4 } });
    });
    test('overwrites non-objects', () => {
        // GIVEN
        const original = { a: [] };
        // WHEN
        util_1.deepMerge([original, { a: { b: 3 } }], true);
        // THEN
        expect(original).toEqual({ a: { b: 3 } });
    });
    test('does overwrite if rightmost is "undefined"', () => {
        // GIVEN
        const original = { a: 1 };
        // WHEN
        util_1.deepMerge([original, { a: undefined }], true);
        // THEN
        expect(original).toEqual({}); // ! different from the non-destructive case
    });
    test('does not recurse on projects', () => {
        // GIVEN
        const proj1 = new util_2.TestProject();
        const proj2 = new util_2.TestProject();
        const objA = { a: proj1 };
        const objB = { a: proj2 };
        // WHEN
        util_1.deepMerge([objA, objB], true);
        // THEN
        expect(objA).toEqual(objB);
    });
    test('does not recurse on components', () => {
        // GIVEN
        const proj = new util_2.TestProject();
        const comp1 = new json_1.JsonFile(proj, 'foo', { obj: 3 });
        const comp2 = new json_1.JsonFile(proj, 'bar', { obj: 5 });
        const objA = { a: comp1 };
        const objB = { a: comp2 };
        // WHEN
        util_1.deepMerge([objA, objB], true);
        // THEN
        expect(objA).toEqual(objB);
    });
});
test('dedupArray', () => {
    expect(util_1.dedupArray(['a', 'b', 'c'])).toEqual(['a', 'b', 'c']);
    expect(util_1.dedupArray(['a', 'a', 'b', 'a'])).toEqual(['a', 'b']);
});
test('getFilePermissions', () => {
    expect(util_1.getFilePermissions({})).toEqual('644');
    expect(util_1.getFilePermissions({ readonly: true, executable: true })).toEqual('500');
    expect(util_1.getFilePermissions({ readonly: true, executable: false })).toEqual('400');
    expect(util_1.getFilePermissions({ readonly: false, executable: true })).toEqual('755');
    expect(util_1.getFilePermissions({ readonly: false, executable: false })).toEqual('644');
    expect(util_1.getFilePermissions({ readonly: false })).toEqual('644');
    expect(util_1.getFilePermissions({ executable: true })).toEqual('755');
});
test('formatAsPythonModule', () => {
    expect(util_1.formatAsPythonModule('foo-bar-baz')).toEqual('foo_bar_baz');
    expect(util_1.formatAsPythonModule('foo.bar.baz')).toEqual('foo_bar_baz');
});
//# sourceMappingURL=data:application/json;base64,