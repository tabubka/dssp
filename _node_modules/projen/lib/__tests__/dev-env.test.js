"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const dev_env_1 = require("../dev-env");
const gitpod_1 = require("../gitpod");
const logging = require("../logging");
const util_1 = require("./util");
// This is duplicated vs exported
const GITPOD_FILE = '.gitpod.yml';
const DEVCONTAINER_FILE = '.devcontainer.json';
logging.disable();
describe('dev environment enable/disable', () => {
    test('given gitpod and devContainer are false', () => {
        // GIVEN
        const project = new util_1.TestProject({
            gitpod: false,
            devContainer: false,
        });
        // WHEN
        project.synth();
        // THEN
        const gitpodFilePath = path.join(project.outdir, GITPOD_FILE);
        const devContainerFilePath = path.join(project.outdir, DEVCONTAINER_FILE);
        expect(fs.existsSync(gitpodFilePath)).toBeFalsy();
        expect(fs.existsSync(devContainerFilePath)).toBeFalsy();
    });
    test('no gitpod/devcontainer files if they are empty', () => {
        // WHEN
        const project = new util_1.TestProject({
            gitpod: true,
            devContainer: true,
        });
        // THEN
        project.synth();
        const gitpodFilePath = path.join(project.outdir, GITPOD_FILE);
        const devContainerFilePath = path.join(project.outdir, DEVCONTAINER_FILE);
        expect(fs.existsSync(gitpodFilePath)).toBeFalsy();
        expect(fs.existsSync(devContainerFilePath)).toBeFalsy();
    });
    test('given gitpod and devContainer are true', () => {
        var _a, _b;
        // GIVEN
        const project = new util_1.TestProject({
            gitpod: true,
            devContainer: true,
        });
        // WHEN
        (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addDockerImage({ image: 'foo' });
        (_b = project.devContainer) === null || _b === void 0 ? void 0 : _b.addPorts('1234');
        // THEN
        project.synth();
        const gitpodFilePath = path.join(project.outdir, GITPOD_FILE);
        const devContainerFilePath = path.join(project.outdir, DEVCONTAINER_FILE);
        expect(fs.existsSync(gitpodFilePath)).toBeTruthy();
        expect(fs.existsSync(devContainerFilePath)).toBeTruthy();
    });
});
describe('dev environment docker options', () => {
    test('given an image', () => {
        var _a, _b;
        // GIVEN
        const project = new util_1.TestProject({
            gitpod: true,
            devContainer: true,
        });
        // WHEN
        (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addDockerImage(dev_env_1.DevEnvironmentDockerImage.fromImage('jsii/superchain'));
        (_b = project.devContainer) === null || _b === void 0 ? void 0 : _b.addDockerImage(dev_env_1.DevEnvironmentDockerImage.fromImage('jsii/uberchain'));
        // THEN
        const gitpodSnapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
        expect(gitpodSnapshot).toContain('image: jsii/superchain');
        const devContainerSnapshot = util_1.synthSnapshot(project)[DEVCONTAINER_FILE];
        expect(devContainerSnapshot).toStrictEqual({ image: 'jsii/uberchain' });
    });
    test('given a docker file dep', () => {
        var _a, _b;
        // GIVEN
        const project = new util_1.TestProject({
            gitpod: true,
            devContainer: true,
        });
        // WHEN
        (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addDockerImage(dev_env_1.DevEnvironmentDockerImage.fromFile('.gitpod.Dockerfile'));
        (_b = project.devContainer) === null || _b === void 0 ? void 0 : _b.addDockerImage(dev_env_1.DevEnvironmentDockerImage.fromFile('Dockerfile'));
        // THEN
        const gitpodSnapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
        expect(gitpodSnapshot).toContain('image:');
        expect(gitpodSnapshot).toContain('file: .gitpod.Dockerfile');
        const devContainerSnapshot = util_1.synthSnapshot(project)[DEVCONTAINER_FILE];
        expect(devContainerSnapshot).toStrictEqual({ build: { dockerfile: 'Dockerfile' } });
    });
});
describe('dev environment tasks', () => {
    test('given custom task', () => {
        var _a, _b;
        // GIVEN
        const project = new util_1.TestProject({
            gitpod: true,
            devContainer: true,
        });
        // WHEN
        const task = project.addTask('gitpod-test', { exec: 'text' });
        (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addTasks(task);
        (_b = project.devContainer) === null || _b === void 0 ? void 0 : _b.addTasks(task);
        // THEN
        const gitpodSnapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
        expect(gitpodSnapshot).toContain('command');
        expect(gitpodSnapshot).toContain('gitpod-test');
        const devContainerSnapshot = util_1.synthSnapshot(project)[DEVCONTAINER_FILE];
        expect(devContainerSnapshot.postCreateCommand).toContain('gitpod-test');
    });
    test('given gitpod task options', () => {
        var _a;
        // GIVEN
        const project = new util_1.TestProject({
            gitpod: true,
            devContainer: true,
        });
        // WHEN
        const task = project.addTask('gitpod-test', { exec: 'text' });
        (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addCustomTask({
            init: 'echo Initializing',
            openIn: gitpod_1.GitpodOpenIn.LEFT,
            openMode: gitpod_1.GitpodOpenMode.SPLIT_BOTTOM,
            command: `npx projen ${task.name}`,
        });
        // THEN
        const snapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
        expect(snapshot).toContain('init: echo Initializing');
        expect(snapshot).toContain('openIn: left');
        expect(snapshot).toContain('openMode: split-bottom');
        expect(snapshot).toContain('command: npx projen gitpod-test');
    });
});
test('dev environment ports', () => {
    var _a, _b;
    // GIVEN
    const project = new util_1.TestProject({
        gitpod: true,
        devContainer: true,
    });
    // WHEN
    (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addPorts('8080', '3000-3999');
    (_b = project.devContainer) === null || _b === void 0 ? void 0 : _b.addPorts('8080', '3000');
    // THEN
    const gitpodSnapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
    expect(gitpodSnapshot).toContain('port: "8080"');
    expect(gitpodSnapshot).toContain('port: 3000-3999');
    const devContainerSnapshot = util_1.synthSnapshot(project)[DEVCONTAINER_FILE];
    expect(devContainerSnapshot).toStrictEqual({ forwardPorts: ['8080', '3000'] });
});
test('gitpod prebuilds config', () => {
    var _a;
    // GIVEN
    const project = new util_1.TestProject({
        gitpod: true,
        devContainer: false,
    });
    // WHEN
    (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addPrebuilds({
        master: true,
        branches: true,
        pullRequestsFromForks: true,
        addBadge: false,
    });
    // THEN
    const gitpodSnapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
    expect(gitpodSnapshot).toContain('github');
    expect(gitpodSnapshot).toContain('prebuilds');
    expect(gitpodSnapshot).toContain('master');
    expect(gitpodSnapshot).toContain('branches');
    expect(gitpodSnapshot).toContain('pullRequestsFromForks');
    expect(gitpodSnapshot).toContain('addBadge');
});
test('dev environment vscode extensions', () => {
    var _a, _b;
    // GIVEN
    const project = new util_1.TestProject({
        gitpod: true,
        devContainer: true,
    });
    // WHEN
    (_a = project.gitpod) === null || _a === void 0 ? void 0 : _a.addVscodeExtensions('dbaeumer.vscode-eslint@2.1.13:5sYlSD6wJi5s3xqD8hupUw==');
    (_b = project.devContainer) === null || _b === void 0 ? void 0 : _b.addVscodeExtensions('dbaeumer.vscode-eslint');
    // THEN
    const gitpodSnapshot = util_1.synthSnapshot(project)[GITPOD_FILE];
    expect(gitpodSnapshot).toContain('extensions:');
    expect(gitpodSnapshot).toContain('dbaeumer.vscode-eslint@2.1.13:5sYlSD6wJi5s3xqD8hupUw==');
    const devContainerSnapshot = util_1.synthSnapshot(project)[DEVCONTAINER_FILE];
    expect(devContainerSnapshot).toStrictEqual({ extensions: ['dbaeumer.vscode-eslint'] });
});
//# sourceMappingURL=data:application/json;base64,