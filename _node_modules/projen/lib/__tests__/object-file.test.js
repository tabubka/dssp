"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const json_1 = require("../json");
const util_1 = require("./util");
class ChildObjectFile extends __1.ObjectFile {
}
test('json object can be mutated before synthesis', () => {
    const prj = new util_1.TestProject();
    const obj = {
        hello: 'world',
    };
    new ChildObjectFile(prj, 'my/object/file.json', { obj });
    // mutate obj (should be reflected in the output)
    obj.anotherField = {
        foo: 1234,
    };
    expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
        hello: 'world',
        anotherField: { foo: 1234 },
    });
});
describe('overrides', () => {
    test('addOverride(p, v) allows assigning arbitrary values to synthesized resource definitions', () => {
        // GIVEN
        const prj = new util_1.TestProject();
        const file = new json_1.JsonFile(prj, 'my/object/file.json', { obj: { initialObj: 'must be nonempty' } });
        // WHEN
        file.addOverride('metadata', { key: 12 });
        file.addOverride('use.dot.notation', 'to create subtrees');
        // THEN
        expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
            initialObj: 'must be nonempty',
            use: { dot: { notation: 'to create subtrees' } },
            metadata: { key: 12 },
        });
    });
    test('addOverride(p, undefined) can be used to delete a value', () => {
        // GIVEN
        const prj = new util_1.TestProject();
        const file = new json_1.JsonFile(prj, 'my/object/file.json', {
            obj: {
                hello: {
                    world: {
                        value1: 'Hello',
                        value2: 129,
                    },
                },
            },
        });
        // WHEN
        file.addOverride('hello.world.value2', undefined);
        // THEN
        expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
            hello: {
                world: {
                    value1: 'Hello',
                },
            },
        });
    });
    test('addOverride(p, undefined) will not create empty trees', () => {
        // GIVEN
        const prj = new util_1.TestProject();
        const file = new json_1.JsonFile(prj, 'my/object/file.json', { obj: { initialObj: 'must be nonempty' } });
        // WHEN
        file.addOverride('tree.exists', 42);
        file.addOverride('tree.does.not.exist', undefined);
        // THEN
        expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
            initialObj: 'must be nonempty',
            tree: {
                exists: 42,
            },
        });
    });
    test('addDeletionOverride(p) is sugar for `undefined`', () => {
        // GIVEN
        const prj = new util_1.TestProject();
        const file = new json_1.JsonFile(prj, 'my/object/file.json', {
            obj: {
                hello: {
                    world: {
                        value1: 'Hello',
                        value2: 129,
                        value3: ['foo', 'bar'],
                    },
                },
            },
        });
        // WHEN
        file.addDeletionOverride('hello.world.value2');
        // THEN
        expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
            hello: {
                world: {
                    value1: 'Hello',
                    value3: ['foo', 'bar'],
                },
            },
        });
    });
    test('addOverride(p, v) will overwrite any non-objects along the path', () => {
        // GIVEN
        const prj = new util_1.TestProject();
        const file = new json_1.JsonFile(prj, 'my/object/file.json', {
            obj: {
                hello: {
                    world: 42,
                },
            },
        });
        // WHEN
        file.addOverride('override1', ['Hello', 123]);
        file.addOverride('override1.override2', { foo: [1] });
        file.addOverride('hello.world.foo.bar', 42);
        // THEN
        expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
            hello: { world: { foo: { bar: 42 } } },
            override1: {
                override2: { foo: [1] },
            },
        });
    });
    test('addOverride(p, v) will not split on escaped dots', () => {
        // GIVEN
        const prj = new util_1.TestProject();
        const file = new json_1.JsonFile(prj, 'my/object/file.json', { obj: { initialObj: 'cannot be empty' } });
        // WHEN
        file.addOverride(String.raw `Hello\.World.Foo\.Bar\.Baz`, 42);
        file.addOverride(String.raw `Single\Back\Slashes`, 42);
        file.addOverride(String.raw `Escaped\\.Back\\.Slashes`, 42);
        file.addOverride(String.raw `DoublyEscaped\\\\Back\\\\Slashes`, 42);
        file.addOverride('EndWith\\', 42); // Raw string cannot end with a backslash
        // THEN
        expect(util_1.synthSnapshot(prj)['my/object/file.json']).toStrictEqual({
            'initialObj': 'cannot be empty',
            'Hello.World': { 'Foo.Bar.Baz': 42 },
            'SingleBackSlashes': 42,
            'Escaped\\': { 'Back\\': { Slashes: 42 } },
            'DoublyEscaped\\\\Back\\\\Slashes': 42,
            'EndWith\\': 42,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,