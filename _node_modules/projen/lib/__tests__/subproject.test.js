"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const __1 = require("..");
const common_1 = require("../common");
const util_1 = require("./util");
test('composing projects declaratively', () => {
    const comp = new util_1.TestProject();
    new TestSubproject({ name: 'foo', parent: comp, outdir: path.join('packages', 'foo') });
    comp.synth();
    // THEN
    expect(fs.existsSync(path.join(comp.outdir, 'packages', 'foo', '.gitignore'))).toBeTruthy();
});
test('composing projects synthesizes to subdirs', () => {
    // GIVEN
    const comp = new util_1.TestProject();
    // WHEN
    new TestSubproject({ name: 'foo', parent: comp, outdir: path.join('packages', 'foo') });
    new TestSubproject({ name: 'bar', parent: comp, outdir: path.join('packages', 'bar') });
    comp.synth();
    // THEN
    expect(fs.pathExistsSync(path.join(comp.outdir, 'README.md')));
    expect(fs.pathExistsSync(path.join(comp.outdir, 'packages', 'foo', '.gitignore')));
    expect(fs.pathExistsSync(path.join(comp.outdir, 'packages', 'bar', '.gitignore')));
});
test('errors when paths overlap', () => {
    // GIVEN
    const comp = new util_1.TestProject();
    new TestSubproject({ name: 'foo', parent: comp, outdir: path.join('packages', 'foo') });
    // WHEN/THEN
    expect(() => new TestSubproject({ name: 'foo', parent: comp, outdir: path.join('packages', 'foo') })).toThrowError(/there is already a sub-project with/i);
});
test('multiple levels', () => {
    const root = new util_1.TestProject();
    const child1 = new TestSubproject({ name: 'child1', parent: root, outdir: 'child1' });
    const child2 = new TestSubproject({ name: 'child2', parent: child1, outdir: 'child2' });
    expect(child1.outdir).toEqual(path.join(root.outdir, 'child1'));
    expect(child2.outdir).toEqual(path.join(root.outdir, 'child1', 'child2'));
});
test('subprojects cannot introduce files that override each other', () => {
    const root = new util_1.TestProject();
    const child = new TestSubproject({ name: 'sub-project', parent: root, outdir: 'sub-project' });
    new __1.TextFile(root, 'sub-project/file.txt');
    expect(() => new __1.TextFile(child, 'file.txt')).toThrow(/there is already a file under sub-project(\\|\/)file\.txt/);
});
test('"outdir" for subprojects must be relative', () => {
    const root = new util_1.TestProject();
    expect(() => new TestSubproject({ name: 'foobar', parent: root, outdir: '/foo/bar' })).toThrow(/"outdir" must be a relative path/);
});
test('subproject generated files do not get cleaned up by parent project', () => {
    const root = new util_1.TestProject();
    const child = new PreSynthProject({ parent: root, outdir: 'sub-project' });
    // no files have been generated yet
    expect(fs.existsSync(child.file.absolutePath)).toEqual(false);
    // generate all project files at least once
    root.synth();
    expect(child.fileExistedDuringPresynth).toEqual(false);
    expect(fs.existsSync(child.file.absolutePath)).toEqual(true);
    // resynthesize projects with all generated files already existing
    root.synth();
    expect(child.fileExistedDuringPresynth).toEqual(true);
    expect(fs.existsSync(child.file.absolutePath)).toEqual(true);
});
// a project that depends on generated files during preSynthesize()
class PreSynthProject extends __1.Project {
    constructor(options = {}) {
        super({ name: 'presynth-project', clobber: false, logging: { level: __1.LogLevel.OFF }, ...options });
        this.file = new __1.TextFile(this, 'presynth.txt', { lines: [common_1.PROJEN_MARKER] });
        this.fileExistedDuringPresynth = false;
    }
    preSynthesize() {
        this.fileExistedDuringPresynth = fs.existsSync(this.file.absolutePath);
    }
}
class TestSubproject extends __1.Project {
    constructor(options) {
        super({ logging: { level: __1.LogLevel.OFF }, ...options });
    }
}
//# sourceMappingURL=data:application/json;base64,