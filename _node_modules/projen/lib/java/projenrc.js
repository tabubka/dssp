"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Projenrc = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const common_1 = require("../common");
const component_1 = require("../component");
const deps_1 = require("../deps");
const project_1 = require("../project");
/**
 * (experimental) Allows writing projenrc files in java.
 *
 * This will install `org.projen/projen` as a Maven dependency and will add a
 * `synth` task which will compile & execute `main()` from
 * `src/main/java/projenrc.java`.
 *
 * @experimental
 */
class Projenrc extends component_1.Component {
    /**
     * @experimental
     */
    constructor(project, pom, options = {}) {
        var _b, _c, _d;
        super(project);
        const projenVersion = (_b = options.projenVersion) !== null && _b !== void 0 ? _b : common_1.PROJEN_VERSION;
        this.className = (_c = options.className) !== null && _c !== void 0 ? _c : 'projenrc';
        this.testScope = (_d = options.testScope) !== null && _d !== void 0 ? _d : true;
        const depType = this.testScope ? deps_1.DependencyType.TEST : deps_1.DependencyType.RUNTIME;
        const execOpts = this.testScope ? ' -Dexec.classpathScope="test"' : '';
        const compileGoal = this.testScope ? 'compiler:testCompile' : 'compiler:compile';
        project.deps.addDependency(`com.github.eladb/projen@${projenVersion}`, depType);
        pom.addPlugin('org.codehaus.mojo/exec-maven-plugin@3.0.0');
        // set up the "default" task which is the task executed when `projen` is executed for this project.
        const defaultTask = project.addTask(project_1.Project.DEFAULT_TASK, { description: 'Synthesize the project' });
        defaultTask.exec(`mvn ${compileGoal} --quiet`);
        defaultTask.exec(`mvn exec:java --quiet -Dexec.mainClass=${this.className}${execOpts}`);
        // if this is a new project, generate a skelaton for projenrc.java
        this.generateProjenrc(options.initializationOptions);
    }
    generateProjenrc(initOptions) {
        var _b, _c, _d;
        if (!this.project.jsiiFqn) {
            return; // cannot generate projenrc without the FQN of the project type.
        }
        let [moduleName] = this.project.jsiiFqn.split('.');
        if (moduleName === 'projen') {
            moduleName = '../..';
        }
        const jsiiManifestFile = require.resolve(`${moduleName}/.jsii`);
        const jsiiManifest = fs_extra_1.readJsonSync(jsiiManifestFile);
        const jsiiType = jsiiManifest.types[this.project.jsiiFqn];
        const javaTarget = jsiiManifest.targets.java;
        const optionsTypeFqn = (_d = (_c = (_b = jsiiType.initializer) === null || _b === void 0 ? void 0 : _b.parameters) === null || _c === void 0 ? void 0 : _c[0].type) === null || _d === void 0 ? void 0 : _d.fqn;
        if (!optionsTypeFqn) {
            this.project.logger.warn('cannot determine jsii type for project options');
            return;
        }
        const jsiiOptionsType = jsiiManifest.types[optionsTypeFqn];
        if (!jsiiOptionsType) {
            this.project.logger.warn(`cannot find jsii type for project options: ${optionsTypeFqn}`);
            return;
        }
        const dir = this.testScope ? 'src/test/java' : 'src/main/java';
        const split = this.className.split('.');
        let javaClass, javaPackage;
        if (split.length === 1) {
            javaClass = split[0];
            javaPackage = [];
        }
        else {
            javaPackage = split.slice(0, split.length - 2);
            javaClass = split[split.length - 1];
        }
        const javaFile = path_1.join(this.project.outdir, dir, ...javaPackage, javaClass + '.java');
        // skip if file exists
        if (fs_extra_1.existsSync(javaFile)) {
            return;
        }
        const lines = new Array();
        let indent = 0;
        const emit = (line = '') => lines.push(' '.repeat(indent * 4) + line);
        const openBlock = (line = '') => { emit(line + ' {'); indent++; };
        const closeBlock = () => { indent--; emit('}'); };
        if (javaPackage.length > 0) {
            emit(`package ${javaPackage.join('.')};`);
            emit();
        }
        emit(`import ${javaTarget.package}.${toJavaFullTypeName(jsiiType)};`);
        emit(`import ${javaTarget.package}.${toJavaFullTypeName(jsiiOptionsType)};`);
        emit();
        openBlock(`public class ${javaClass}`);
        openBlock('public static void main(String[] args)');
        emit(`${jsiiType.name} project = new ${jsiiType.name}(${renderJavaOptions(indent, jsiiOptionsType.name, initOptions)});`);
        emit('project.synth();');
        closeBlock();
        closeBlock();
        fs_extra_1.mkdirpSync(path_1.dirname(javaFile));
        fs_extra_1.writeFileSync(javaFile, lines.join('\n'));
    }
}
exports.Projenrc = Projenrc;
_a = JSII_RTTI_SYMBOL_1;
Projenrc[_a] = { fqn: "projen.java.Projenrc", version: "0.17.1" };
function renderJavaOptions(indent, optionsTypeName, initOptions) {
    if (!initOptions || Object.keys(initOptions).length === 0) {
        return ''; // no options
    }
    const lines = [`${optionsTypeName}.builder()`];
    for (const [name, value] of Object.entries(initOptions)) {
        lines.push(`.${toJavaProperty(name)}(${toJavaValue(value)})`);
    }
    lines.push('.build()');
    return lines.join(`\n${' '.repeat((indent + 1) * 4)}`);
}
function toJavaProperty(prop) {
    return prop;
}
function toJavaValue(value) {
    return JSON.stringify(value);
}
function toJavaFullTypeName(jsiiType) {
    return [jsiiType.namespace, jsiiType.name].filter(x => x).join('.');
}
//# sourceMappingURL=data:application/json;base64,