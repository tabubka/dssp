"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pom = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const _resolve_1 = require("../_resolve");
const component_1 = require("../component");
const deps_1 = require("../deps");
const semver_1 = require("../util/semver");
const xmlfile_1 = require("../xmlfile");
const POM_XML_ATTRS = {
    '@xsi:schemaLocation': 'http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd',
    '@xmlns': 'http://maven.apache.org/POM/4.0.0',
    '@xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
};
/**
 * (experimental) A Project Object Model or POM is the fundamental unit of work in Maven.
 *
 * It is
 * an XML file that contains information about the project and configuration
 * details used by Maven to build the project.
 *
 * @experimental
 */
class Pom extends component_1.Component {
    /**
     * @experimental
     */
    constructor(project, options) {
        var _b;
        super(project);
        this.properties = {};
        this.fileName = 'pom.xml';
        this.groupId = options.groupId;
        this.artifactId = options.artifactId;
        this.version = options.version;
        this.packaging = (_b = options.packaging) !== null && _b !== void 0 ? _b : 'jar';
        this.name = project.name;
        this.description = options.description;
        this.url = options.url;
        new xmlfile_1.XmlFile(project, this.fileName, { obj: () => this.synthPom(), marker: true });
    }
    /**
     * (experimental) Adds a key/value property to the pom.
     *
     * @param key the key.
     * @param value the value.
     * @experimental
     */
    addProperty(key, value) {
        this.properties[key] = value;
    }
    /**
     * (experimental) Adds a runtime dependency.
     *
     * @param spec Format `<groupId>/<artifactId>@<semver>`.
     * @experimental
     */
    addDependency(spec) {
        this.project.deps.addDependency(spec, deps_1.DependencyType.RUNTIME);
    }
    /**
     * (experimental) Adds a test dependency.
     *
     * @param spec Format `<groupId>/<artifactId>@<semver>`.
     * @experimental
     */
    addTestDependency(spec) {
        this.project.deps.addDependency(spec, deps_1.DependencyType.TEST);
    }
    /**
     * (experimental) Adds a build plugin to the pom.
     *
     * The plug in is also added as a BUILD dep to the project.
     *
     * @param spec dependency spec (`group/artifact@version`).
     * @param options plugin options.
     * @experimental
     */
    addPlugin(spec, options = {}) {
        var _b;
        for (const dep of (_b = options.dependencies) !== null && _b !== void 0 ? _b : []) {
            this.project.deps.addDependency(dep, deps_1.DependencyType.BUILD);
        }
        return this.project.deps.addDependency(spec, deps_1.DependencyType.BUILD, options);
    }
    synthPom() {
        return _resolve_1.resolve({
            project: {
                ...POM_XML_ATTRS,
                modelVersion: '4.0.0',
                groupId: this.groupId,
                artifactId: this.artifactId,
                version: this.version,
                packaging: this.packaging,
                name: this.name,
                description: this.description,
                url: this.url,
                properties: this.properties,
                ...this.synthDependencies(),
            },
        }, { omitEmpty: true });
    }
    synthDependencies() {
        const deps = this.project.deps.all;
        if (deps.length === 0) {
            return;
        }
        const dependencies = [];
        const plugins = [];
        for (const dep of deps) {
            switch (dep.type) {
                case deps_1.DependencyType.PEER:
                case deps_1.DependencyType.RUNTIME:
                    dependencies.push(mavenCoords(dep));
                    break;
                case deps_1.DependencyType.TEST:
                    dependencies.push({
                        ...mavenCoords(dep),
                        scope: 'test',
                    });
                    break;
                // build maps to plugins
                case deps_1.DependencyType.BUILD:
                    plugins.push({
                        ...mavenCoords(dep),
                        ...pluginConfig(dep.metadata),
                    });
                    break;
                default:
                    throw new Error(`unsupported dependency type: ${dep.type}`);
            }
        }
        return {
            build: { plugins: { plugin: plugins } },
            dependencies: { dependency: dependencies },
        };
    }
}
exports.Pom = Pom;
_a = JSII_RTTI_SYMBOL_1;
Pom[_a] = { fqn: "projen.java.Pom", version: "0.17.1" };
/**
 * Parses maven groupId and artifactId from a dependency name.
 *
 *     name    <=> <groupId>/<artifactId>
 *     version <=> <version>
 */
function mavenCoords(dep) {
    const name = dep.name;
    const parts = name.split('/');
    if (parts.length !== 2) {
        throw new Error(`invalid maven coordinates in dependency named "${name}". format is "<groupId>/<artifactId>". For example "org.junit.jupiter/junit-jupiter-engine"`);
    }
    return {
        groupId: parts[0],
        artifactId: parts[1],
        version: dep.version ? semver_1.toMavenVersionRange(dep.version) : undefined,
    };
}
function pluginConfig(options = {}) {
    var _b, _c;
    return {
        configuration: options.configuration,
        dependencies: (options.dependencies && options.dependencies.length > 0)
            ? { dependency: (_b = options.dependencies) === null || _b === void 0 ? void 0 : _b.map(d => mavenCoords(deps_1.Dependencies.parseDependency(d))) }
            : undefined,
        executions: (_c = options.executions) === null || _c === void 0 ? void 0 : _c.map(e => ({
            execution: {
                id: e.id,
                goals: e.goals.map(goal => ({ goal })),
            },
        })),
    };
}
//# sourceMappingURL=data:application/json;base64,