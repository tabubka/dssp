"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gitpod = exports.GitpodPortVisibility = exports.GitpodOnOpen = exports.GitpodOpenIn = exports.GitpodOpenMode = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("./component");
const yaml_1 = require("./yaml");
/**
  * Relative path of Gitpod file to generate
  */
const GITPOD_FILE = '.gitpod.yml';
/**
 * (experimental) Configure how the terminal should be opened relative to the previous task.
 *
 * @experimental
 */
var GitpodOpenMode;
(function (GitpodOpenMode) {
    GitpodOpenMode["TAB_AFTER"] = "tab-after";
    GitpodOpenMode["TAB_BEFORE"] = "tab-before";
    GitpodOpenMode["SPLIT_RIGHT"] = "split-right";
    GitpodOpenMode["SPLIT_LEFT"] = "split-left";
    GitpodOpenMode["SPLIT_TOP"] = "split-top";
    GitpodOpenMode["SPLIT_BOTTOM"] = "split-bottom";
})(GitpodOpenMode = exports.GitpodOpenMode || (exports.GitpodOpenMode = {}));
/**
 * (experimental) Configure where in the IDE the terminal should be opened.
 *
 * @experimental
 */
var GitpodOpenIn;
(function (GitpodOpenIn) {
    GitpodOpenIn["BOTTOM"] = "bottom";
    GitpodOpenIn["LEFT"] = "left";
    GitpodOpenIn["RIGHT"] = "right";
    GitpodOpenIn["MAIN"] = "main";
})(GitpodOpenIn = exports.GitpodOpenIn || (exports.GitpodOpenIn = {}));
/**
 * (experimental) What to do when a service on a port is detected.
 *
 * @experimental
 */
var GitpodOnOpen;
(function (GitpodOnOpen) {
    GitpodOnOpen["OPEN_BROWSER"] = "open-browser";
    GitpodOnOpen["OPEN_PREVIEW"] = "open-preview";
    GitpodOnOpen["NOTIFY"] = "notify";
    GitpodOnOpen["IGNORE"] = "ignore";
})(GitpodOnOpen = exports.GitpodOnOpen || (exports.GitpodOnOpen = {}));
/**
 * (experimental) Whether the port visibility should be private or public.
 *
 * @experimental
 */
var GitpodPortVisibility;
(function (GitpodPortVisibility) {
    GitpodPortVisibility["PUBLIC"] = "public";
    GitpodPortVisibility["PRIVATE"] = "private";
})(GitpodPortVisibility = exports.GitpodPortVisibility || (exports.GitpodPortVisibility = {}));
/**
 * (experimental) The Gitpod component which emits .gitpod.yml.
 *
 * @experimental
 */
class Gitpod extends component_1.Component {
    /**
     * @experimental
     */
    constructor(project, options = {}) {
        super(project);
        this.tasks = new Array();
        this.ports = new Array();
        this.vscodeExtensions = new Array();
        this.dockerImage = options === null || options === void 0 ? void 0 : options.dockerImage;
        if (options === null || options === void 0 ? void 0 : options.tasks) {
            for (const task of options.tasks) {
                this.addTasks(task);
            }
        }
        if (options === null || options === void 0 ? void 0 : options.prebuilds) {
            this.addPrebuilds(options === null || options === void 0 ? void 0 : options.prebuilds);
        }
        this.config = {
            image: () => this.renderDockerImage(),
            tasks: this.tasks,
            github: () => this.renderPrebuilds(),
            ports: this.ports,
            vscode: {
                extensions: this.vscodeExtensions,
            },
        };
        new yaml_1.YamlFile(this.project, GITPOD_FILE, { obj: this.config, omitEmpty: true, marker: true });
    }
    /**
     * (experimental) Add a custom Docker image or Dockerfile for the container.
     *
     * @param image The Docker image.
     * @experimental
     */
    addDockerImage(image) {
        if (this.dockerImage) {
            throw new Error('dockerImage cannot be redefined.');
        }
        this.dockerImage = image;
    }
    /**
     * (experimental) Add tasks to run when gitpod starts.
     *
     * By default, all tasks will be run in parallel. To run tasks in sequence,
     * create a new `Task` and specify the other tasks as subtasks.
     *
     * @param tasks The new tasks.
     * @experimental
     */
    addTasks(...tasks) {
        this.tasks.push(...tasks.map(task => ({
            name: task.name,
            command: `npx projen ${task.name}`,
        })));
    }
    /**
     * (experimental) Add a prebuilds configuration for the Gitpod App.
     *
     * @param config The configuration.
     * @experimental
     */
    addPrebuilds(config) {
        this.prebuilds = config;
    }
    /**
     * (experimental) Add a task with more granular options.
     *
     * By default, all tasks will be run in parallel. To run tasks in sequence,
     * create a new `Task` and set the other tasks as subtasks.
     *
     * @param options The task parameters.
     * @experimental
     */
    addCustomTask(options) {
        this.tasks.push({
            name: options.name,
            command: options.command,
            openMode: options.openMode,
            openIn: options.openIn,
            before: options.before,
            init: options.init,
            prebuild: options.prebuild,
        });
    }
    /**
     * (experimental) Add ports that should be exposed (forwarded) from the container.
     *
     * @param ports The new ports.
     * @experimental
     */
    addPorts(...ports) {
        this.ports.push(...ports.map(port => ({ port: port })));
    }
    /**
     * (experimental) Add a list of VSCode extensions that should be automatically installed in the container.
     *
     * These must be in the format defined in the Open VSX registry.
     *
     * @param extensions The extension IDs.
     * @see https://www.gitpod.io/docs/vscode-extensions/
     * @experimental
     * @example
     *
     * 'scala-lang.scala@0.3.9:O5XmjwY5Gz+0oDZAmqneJw=='
     */
    addVscodeExtensions(...extensions) {
        this.vscodeExtensions.push(...extensions);
    }
    renderDockerImage() {
        var _b, _c;
        if ((_b = this.dockerImage) === null || _b === void 0 ? void 0 : _b.image) {
            return this.dockerImage.image;
        }
        else if ((_c = this.dockerImage) === null || _c === void 0 ? void 0 : _c.dockerFile) {
            return {
                file: this.dockerImage.dockerFile,
            };
        }
        else {
            return undefined;
        }
    }
    renderPrebuilds() {
        if (this.prebuilds) {
            return {
                prebuilds: this.prebuilds,
            };
        }
        else {
            return undefined;
        }
    }
}
exports.Gitpod = Gitpod;
_a = JSII_RTTI_SYMBOL_1;
Gitpod[_a] = { fqn: "projen.Gitpod", version: "0.17.1" };
//# sourceMappingURL=data:application/json;base64,