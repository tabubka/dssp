"use strict";
/*
export async function bootstrap() {
}
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.destroyAsync = exports.destroy = exports.deployAsync = exports.deploy = exports.synth = exports.list = exports.bootstrap = void 0;
const colors = require("colors/safe");
const lib_1 = require("../lib");
const aws_auth_1 = require("./api/aws-auth");
const cloudformation_deployments_1 = require("./api/cloudformation-deployments");
const cloud_executable_1 = require("./api/cxapp/cloud-executable");
const exec_1 = require("./api/cxapp/exec");
const cdk_toolkit_1 = require("./cdk-toolkit");
const diff_1 = require("./diff");
const logging_1 = require("./logging");
const settings_1 = require("./settings");
/**
 * Bootstrap and returns the boostrapped environment. Only returns 1 environment.
 *
 * @param options CDK options
 *
 * @returns {
 *    environment: { account, region }
 *  }
 */
async function bootstrap(options = {}) {
    const { cli } = await initCommandLine(options);
    const environmentSpecs = [];
    const nonCli = true;
    const source = { source: 'default' };
    const bootstrapper = new lib_1.Bootstrapper(source);
    const bootstrapOptions = {
        toolkitStackName: undefined,
        roleArn: undefined,
        force: true,
    };
    const ret = await cli.bootstrap(environmentSpecs, bootstrapper, bootstrapOptions, nonCli, options.cdkOutputPath);
    return ret;
}
exports.bootstrap = bootstrap;
/**
 * List all stacks with dependencies.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name, dependencies }] }
 */
async function list(options = {}) {
    const { cli } = await initCommandLine(options);
    const ret = await cli.list([], {
        nonCli: true,
        cdkOutputPath: options.cdkOutputPath,
    });
    return ret;
}
exports.list = list;
/**
 * Synth all stacks, and returns synthesized stacks.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name }] }
 */
async function synth(options = {}) {
    const { cli } = await initCommandLine(options);
    const exclusively = false;
    const quiet = false;
    const ret = await cli.synth([], exclusively, quiet, {
        nonCli: true,
    });
    return ret;
}
exports.synth = synth;
/**
 * Deploy all stacks synchronously, used to deploy standard CDK app.
 *
 * @param options CDK options
 *
 * @returns { account, region, status: 'no_resources' | 'unchanged' | 'deployed'  }
 */
async function deploy(options = {}) {
    const { cli, toolkitStackName } = await initCommandLine(options);
    const ret = await cli.deploy({
        stackNames: options.stackName ? [options.stackName] : [],
        exclusively: true,
        requireApproval: diff_1.RequireApproval.Never,
        toolkitStackName,
        nonCli: true,
        asyncDeploy: false,
        skipChangeset: false,
    });
    return ret;
}
exports.deploy = deploy;
/**
 * Deploy all stacks in parallel asynchronously, and returns the environment deployed to and progress state.
 *
 * @param options CDK options
 *
 * @returns { account, region, status: 'no_resources' | 'unchanged' | 'deploying'  }
 */
async function deployAsync(options = {}) {
    process.env.CFN_QUICK_RETRY = 'true';
    const { cli, toolkitStackName } = await initCommandLine(options);
    const ret = await cli.deploy({
        stackNames: options.stackName ? [options.stackName] : [],
        exclusively: true,
        requireApproval: diff_1.RequireApproval.Never,
        toolkitStackName,
        force: options.force,
        nonCli: true,
        asyncDeploy: true,
        skipChangeset: true,
        cdkOutputPath: options.cdkOutputPath,
    });
    return ret;
}
exports.deployAsync = deployAsync;
/**
 * Destroy a single stack exclusively or destroy all stacks synchronously, used to destroy standard CDK app.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name }] }
 */
async function destroy(options = {}) {
    process.env.CFN_QUICK_RETRY = 'true';
    const { cli } = await initCommandLine(options);
    const ret = await cli.destroy({
        stackNames: options.stackName ? [options.stackName] : [],
        exclusively: true,
        force: true,
        nonCli: true,
        asyncDestroy: false,
    });
    return ret;
}
exports.destroy = destroy;
/**
 * Destroy a single stack exclusively or destroy all stacks, and returns destroyed stacks.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name }] }
 */
async function destroyAsync(options = {}) {
    process.env.CFN_QUICK_RETRY = 'true';
    const { cli } = await initCommandLine(options);
    const ret = await cli.destroy({
        stackNames: options.stackName ? [options.stackName] : [],
        exclusively: true,
        force: true,
        nonCli: true,
        asyncDestroy: true,
        cdkOutputPath: options.cdkOutputPath,
    });
    return ret;
}
exports.destroyAsync = destroyAsync;
async function initCommandLine(options = {}) {
    // set log level
    if (options.verbose) {
        logging_1.setLogLevel(options.verbose);
    }
    // set no color
    if (options.noColor) {
        colors.disable();
    }
    const argv = {
        app: options.app,
        output: options.output,
        _: ['list'],
    };
    const configuration = new settings_1.Configuration({
        commandLineArguments: {
            ...argv,
            _: argv._,
        },
    });
    await configuration.load();
    const sdkProvider = await aws_auth_1.SdkProvider.withAwsCliCompatibleDefaults({
        profile: configuration.settings.get(['profile']),
    });
    const cloudFormation = new cloudformation_deployments_1.CloudFormationDeployments({ sdkProvider });
    const cloudExecutable = new cloud_executable_1.CloudExecutable({
        configuration,
        sdkProvider,
        synthesizer: exec_1.execProgram,
    });
    const cli = new cdk_toolkit_1.CdkToolkit({
        cloudExecutable,
        cloudFormation,
        verbose: options.verbose ? options.verbose > 0 : false,
        configuration,
        sdkProvider,
    });
    const toolkitStackName = lib_1.ToolkitInfo.determineName(configuration.settings.get(['toolkitStackName']));
    return { cli, toolkitStackName };
}
//# sourceMappingURL=data:application/json;base64,