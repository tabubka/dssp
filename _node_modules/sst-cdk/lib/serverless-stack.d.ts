interface Options {
    readonly app?: string;
    readonly output?: string;
    readonly verbose?: number;
    readonly noColor?: boolean;
    readonly force?: boolean;
    readonly stackName?: string;
    readonly cdkOutputPath?: string;
}
/**
 * Bootstrap and returns the boostrapped environment. Only returns 1 environment.
 *
 * @param options CDK options
 *
 * @returns {
 *    environment: { account, region }
 *  }
 */
export declare function bootstrap(options?: Options): Promise<any>;
/**
 * List all stacks with dependencies.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name, dependencies }] }
 */
export declare function list(options?: Options): Promise<0 | {
    id: string;
    name: string;
    environment: import("@aws-cdk/cx-api").Environment;
}[] | {
    stacks: {
        id: string;
        name: string;
        dependencies: string[];
    }[];
}>;
/**
 * Synth all stacks, and returns synthesized stacks.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name }] }
 */
export declare function synth(options?: Options): Promise<any>;
/**
 * Deploy all stacks synchronously, used to deploy standard CDK app.
 *
 * @param options CDK options
 *
 * @returns { account, region, status: 'no_resources' | 'unchanged' | 'deployed'  }
 */
export declare function deploy(options?: Options): Promise<any>;
/**
 * Deploy all stacks in parallel asynchronously, and returns the environment deployed to and progress state.
 *
 * @param options CDK options
 *
 * @returns { account, region, status: 'no_resources' | 'unchanged' | 'deploying'  }
 */
export declare function deployAsync(options?: Options): Promise<any>;
/**
 * Destroy a single stack exclusively or destroy all stacks synchronously, used to destroy standard CDK app.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name }] }
 */
export declare function destroy(options?: Options): Promise<any>;
/**
 * Destroy a single stack exclusively or destroy all stacks, and returns destroyed stacks.
 *
 * @param options CDK options
 *
 * @returns { stacks: [{ id, name }] }
 */
export declare function destroyAsync(options?: Options): Promise<any>;
export {};
